[[block]]
struct buf0 {
  time : f32;
};

[[block]]
struct buf1 {
  resolution : vec2<f32>;
};

[[group(0), binding(0)]] var<uniform> x_87 : buf0;

[[group(0), binding(1)]] var<uniform> x_294 : buf1;

var<private> gl_FragCoord : vec4<f32>;

var<private> x_GLF_color : vec4<f32>;

fn main_1() {
  var x_2026 : vec3<f32>;
  var x_2025 : i32;
  var x_2804 : i32;
  var x_485 : bool;
  var x_2316 : i32;
  var x_2519 : i32;
  var x_2029 : vec3<f32>;
  var x_2028 : i32;
  var x_2603 : bool;
  var x_2934 : bool;
  var x_1011 : bool;
  var x_2604 : i32;
  var x_2605 : i32;
  var x_2936 : bool;
  var x_2032 : vec3<f32>;
  var x_3063 : i32;
  var x_2026_phi : vec3<f32>;
  var x_2025_phi : i32;
  var x_2029_phi : vec3<f32>;
  var x_2028_phi : i32;
  var x_2032_phi : vec3<f32>;
  var x_2031_phi : i32;
  let x_2791 : i32 = -(0);
  let x_2501 : i32 = (0 + bitcast<i32>(35u));
  let x_2306 : i32 = (0 - 0);
  let x_2502 : i32 = (x_2501 + 1);
  let x_2792 : f32 = f32(bitcast<u32>(1));
  let x_2503 : i32 = bitcast<i32>(0.666666687);
  let x_385 : f32 = x_87.time;
  let x_386 : f32 = sin(x_385);
  let x_388 : f32 = (0.100000001 * x_386);
  let x_2793 : f32 = f32(1u);
  let x_391 : f32 = sin(x_388);
  let x_393 : f32 = cos(x_388);
  let x_2794 : i32 = (x_2791 + x_2791);
  let x_394 : f32 = -(x_393);
  let x_399 : vec2<f32> = vec2<f32>(x_391, x_394);
  let x_400 : vec2<f32> = vec2<f32>(x_393, x_391);
  let x_2795 : i32 = (x_2791 - x_2794);
  let x_401 : mat2x2<f32> = mat2x2<f32>(x_399, x_400);
  let x_2504 : i32 = (0 + x_2503);
  let x_2796 : f32 = f32(x_2306);
  let x_2505 : i32 = -(x_2504);
  let x_459 : vec2<f32> = x_294.resolution;
  let x_2797 : f32 = bitcast<f32>(35);
  let x_461 : f32 = x_294.resolution.x;
  let x_2309 : vec3<u32> = bitcast<vec3<u32>>(vec3<f32>(0.0, 0.0, 0.0));
  let x_2506 : f32 = f32(bitcast<u32>(0));
  let x_2310 : i32 = (0 - 35);
  let x_2507 : i32 = bitcast<i32>(0.25);
  let x_463 : f32 = x_294.resolution.y;
  let x_2508 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2309)));
  let x_2311 : i32 = -(0);
  let x_2509 : f32 = f32(bitcast<u32>(x_2505));
  let x_464 : f32 = min(x_461, x_463);
  let x_2510 : i32 = bitcast<i32>(0.01);
  let x_2798 : i32 = -(x_2504);
  let x_466 : vec2<f32> = (x_459 / vec2<f32>(x_464, x_464));
  let x_2511 : f32 = f32(x_2311);
  let x_2799 : f32 = f32(bitcast<u32>(x_2510));
  let x_2312 : i32 = bitcast<i32>(0.25);
  let x_467 : vec4<f32> = gl_FragCoord;
  let x_2512 : i32 = -(x_2312);
  let x_2800 : f32 = f32(bitcast<u32>(x_2507));
  let x_2513 : f32 = f32(x_2507);
  let x_2313 : f32 = f32(0);
  let x_2801 : i32 = (x_2504 + x_2310);
  let x_2514 : i32 = -(x_2507);
  let x_473 : vec2<f32> = (x_466 * (vec2<f32>(x_467.x, x_467.y) / x_459));
  let x_2314 : i32 = (x_2311 - x_2312);
  let x_475 : vec2<f32> = (vec2<f32>(0.5, 0.5) * x_466);
  let x_2802 : f32 = f32(bitcast<u32>(35));
  let x_2515 : i32 = bitcast<i32>(6.0);
  let x_478 : vec2<f32> = (x_473 * x_401);
  let x_2516 : f32 = f32(x_2504);
  let x_2315 : i32 = (1 + bitcast<i32>(0u));
  let x_2803 : i32 = bitcast<i32>(0.5);
  let x_2517 : vec3<u32> = (x_2508 + x_2508);
  let x_481 : vec2<f32> = (x_475 * x_401);
  let x_2518 : i32 = bitcast<i32>(f32(bitcast<u32>(35)));
  x_2026_phi = vec3<f32>(0.0, 0.0, 0.0);
  x_2025_phi = 35;
  loop {
    var x_2321 : i32;
    var x_548 : f32;
    var x_553 : bool;
    var x_723 : vec3<f32>;
    var x_794 : vec3<f32>;
    var x_865 : vec3<f32>;
    var x_936 : vec3<f32>;
    var x_2099 : vec3<f32>;
    var x_520 : i32;
    var x_2092_phi : vec3<f32>;
    var x_2099_phi : vec3<f32>;
    x_2026 = x_2026_phi;
    x_2025 = x_2025_phi;
    x_2804 = (x_2314 + x_2791);
    x_485 = (x_2025 >= 0);
    x_2316 = (1 + x_2312);
    x_2519 = (x_2314 + x_2512);
    if (x_485) {
    } else {
      break;
    }
    var x_2520 : vec2<i32>;
    var x_489 : f32;
    var x_490 : f32;
    var x_2317 : bool;
    var x_2522 : f32;
    var x_494 : f32;
    var x_2806 : u32;
    var x_2807 : f32;
    var x_2524 : vec2<i32>;
    var x_497 : vec2<f32>;
    var x_2318 : i32;
    var x_2319 : i32;
    var x_501 : f32;
    var x_502 : f32;
    var x_2320 : vec3<f32>;
    x_2520 = bitcast<vec2<i32>>(x_459);
    let x_2805 : i32 = bitcast<i32>(x_394);
    x_489 = f32(x_2025);
    x_490 = (0.100000001 * x_489);
    let x_2521 : i32 = (x_2310 - x_2315);
    x_2317 = !(x_485);
    x_2522 = bitcast<f32>(0);
    x_494 = sin((x_490 + x_385));
    x_2806 = (0u - bitcast<u32>(x_2512));
    let x_2523 : i32 = (1 + x_2311);
    x_2807 = f32(x_2503);
    x_2524 = bitcast<vec2<i32>>(-(x_2520));
    x_497 = (x_481 + vec2<f32>((0.25 * x_494), 0.0));
    let x_2808 : f32 = f32(x_2315);
    x_2318 = (x_2312 - bitcast<i32>(x_2316));
    x_2319 = (x_2311 + bitcast<i32>(0u));
    let x_2809 : f32 = f32(x_2798);
    x_501 = sin((x_489 * 0.01));
    x_502 = (x_501 + 0.01);
    x_2320 = vec3<f32>(x_2309);
    let x_2810 : u32 = bitcast<u32>((x_2806 - bitcast<u32>(x_2518)));
    switch(0u) {
      default: {
        let x_2525 : i32 = bitcast<i32>(0.5);
        x_2321 = (x_2315 - x_2306);
        let x_545 : f32 = x_478.x;
        let x_2811 : f32 = f32(bitcast<u32>(x_2518));
        let x_2526 : i32 = bitcast<i32>(x_545);
        let x_2812 : f32 = bitcast<f32>(x_2523);
        let x_2322 : i32 = bitcast<i32>((x_2025 + x_2321));
        let x_2527 : f32 = f32(x_2515);
        let x_2813 : f32 = f32(bitcast<u32>(x_2518));
        x_548 = (x_545 - x_502);
        let x_2814 : i32 = (x_2803 + x_2801);
        let x_550 : f32 = x_497.x;
        let x_2815 : f32 = f32(bitcast<u32>(x_2512));
        let x_551 : bool = (x_548 < x_550);
        let x_2323 : i32 = (x_2315 + x_2314);
        x_553 = !(x_551);
        if (x_553) {
          let x_2816 : f32 = bitcast<f32>(x_2512);
          x_2092_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2528 : i32 = -(x_2311);
        let x_2324 : f32 = f32(0u);
        let x_564 : bool = ((x_502 + x_545) > x_550);
        let x_566 : bool = !(x_564);
        let x_2529 : i32 = -(x_2311);
        let x_2817 : f32 = f32(bitcast<u32>(0));
        let x_2325 : f32 = bitcast<f32>(x_2311);
        if (x_566) {
          let x_2818 : bool = !(x_485);
          x_2092_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2819 : i32 = -(x_2803);
        let x_571 : f32 = x_478.y;
        let x_2820 : f32 = f32(x_2507);
        let x_2531 : vec4<i32> = bitcast<vec4<i32>>(x_467);
        let x_574 : f32 = (x_571 - x_502);
        let x_2821 : vec3<i32> = bitcast<vec3<i32>>(vec3<f32>(1.0, 1.0, 1.0));
        let x_2532 : f32 = f32(bitcast<u32>(x_2323));
        let x_2822 : i32 = bitcast<i32>(x_2807);
        let x_2327 : bool = !(x_566);
        let x_2823 : i32 = bitcast<i32>(bitcast<f32>(x_2312));
        let x_576 : f32 = x_497.y;
        let x_2533 : f32 = f32(x_2316);
        let x_2824 : i32 = bitcast<i32>(x_2799);
        let x_577 : bool = (x_574 < x_576);
        let x_2534 : vec3<u32> = (x_2517 - x_2517);
        let x_579 : bool = !(x_577);
        let x_2825 : i32 = (x_2314 - bitcast<i32>(x_2318));
        let x_2535 : i32 = bitcast<i32>(x_490);
        let x_2826 : i32 = (x_2322 - bitcast<i32>(x_2810));
        if (x_579) {
          let x_2536 : vec2<i32> = bitcast<vec2<i32>>((x_2520 + x_2524));
          let x_2827 : i32 = bitcast<i32>((x_2318 + bitcast<i32>(x_2529)));
          x_2092_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2328 : i32 = bitcast<i32>(-(x_2025));
        let x_2828 : u32 = bitcast<u32>((x_2311 + bitcast<i32>(x_2806)));
        let x_2829 : i32 = (x_2801 - x_2525);
        let x_590 : bool = ((x_571 + x_502) > x_576);
        let x_2830 : f32 = f32(x_2803);
        let x_592 : bool = !(x_590);
        let x_2329 : i32 = (x_2328 - bitcast<i32>(0u));
        if (x_592) {
          let x_2831 : bool = !(x_590);
          let x_2537 : vec4<f32> = vec4<f32>(x_2531);
          let x_2832 : vec3<f32> = vec3<f32>(x_2309);
          x_2092_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2538 : i32 = -(x_2518);
        let x_606 : bool = ((x_545 - x_501) < x_550);
        let x_2833 : i32 = (x_2502 - x_2314);
        let x_608 : bool = !(x_606);
        if (x_608) {
          let x_690 : f32 = fract((0.025 * x_489));
          let x_2834 : f32 = f32(bitcast<u32>(x_2315));
          let x_2835 : vec3<f32> = vec3<f32>(x_2821);
          let x_2330 : f32 = bitcast<f32>(x_2316);
          let x_2836 : bool = !(x_590);
          let x_2539 : i32 = (x_2505 - x_2526);
          let x_2331 : bool = !(x_577);
          let x_2837 : f32 = f32(bitcast<u32>(x_2529));
          let x_2333 : f32 = f32(x_2329);
          let x_2838 : f32 = f32(bitcast<u32>(x_2515));
          let x_2334 : f32 = f32(x_2314);
          let x_2335 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2309));
          let x_2839 : f32 = f32(bitcast<u32>(x_2312));
          let x_2840 : i32 = (x_2510 - x_2535);
          let x_749 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_690, x_690, x_690) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * ((0.5 * x_386) + 1.0));
          let x_2842 : f32 = f32(bitcast<u32>(x_2538));
          let x_2540 : i32 = bitcast<i32>((x_2316 - x_2319));
          let x_2843 : bool = !(x_566);
          let x_2336 : i32 = -(x_2322);
          let x_2844 : vec3<i32> = bitcast<vec3<i32>>((x_2508 + bitcast<vec3<u32>>(x_2821)));
          let x_2845 : vec3<u32> = (x_2534 - (x_2309 + x_2309));
          let x_2541 : vec2<f32> = vec2<f32>(x_2520);
          let x_2846 : f32 = bitcast<f32>(-(x_2328));
          let x_2847 : i32 = (x_2518 - x_2518);
          x_723 = vec3<f32>(((1.0 / x_545) * x_749.x), ((1.0 / x_571) * x_749.y), select(x_749.z, 1.0, (abs((x_571 - x_545)) < 0.5)));
          let x_2848 : f32 = f32(x_2523);
          let x_2542 : bool = !(x_590);
          let x_2849 : i32 = (x_2794 + -(x_2314));
          x_2092_phi = x_723;
          break;
        }
        let x_2543 : i32 = bitcast<i32>(x_494);
        let x_2850 : bool = !(x_579);
        let x_626 : bool = ((x_501 + x_545) > x_550);
        let x_628 : bool = !(x_626);
        if (x_628) {
          let x_2545 : i32 = (x_2505 + x_2329);
          let x_761 : f32 = fract((0.025 * x_489));
          let x_2546 : f32 = bitcast<f32>(x_2306);
          let x_2338 : u32 = (1u - bitcast<u32>(0));
          let x_2852 : i32 = (x_2526 + x_2312);
          let x_2339 : i32 = bitcast<i32>(0.5);
          let x_2547 : i32 = (x_2538 + x_2339);
          let x_2853 : f32 = f32(x_2507);
          let x_2548 : f32 = f32(x_2321);
          let x_810 : vec3<f32> = ((vec3<f32>(x_761, x_761, x_761) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0);
          let x_2854 : i32 = -(x_2339);
          let x_2549 : f32 = bitcast<f32>(x_2510);
          let x_2856 : i32 = (x_2328 + x_2514);
          let x_2340 : f32 = f32(bitcast<u32>(x_2329));
          let x_2857 : i32 = (x_2328 + x_2310);
          let x_2550 : bool = !(x_626);
          let x_2858 : i32 = (x_2795 + x_2825);
          let x_2859 : f32 = bitcast<f32>(x_2826);
          let x_2860 : f32 = f32(x_2504);
          let x_2861 : vec3<u32> = (x_2517 - x_2309);
          let x_820 : vec3<f32> = (clamp((abs((abs(x_810) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * (1.0 + (x_386 * 0.5)));
          let x_2863 : i32 = -((x_2529 - bitcast<i32>(x_2318)));
          let x_2552 : bool = !(x_564);
          let x_2553 : f32 = f32(x_2515);
          let x_2342 : i32 = bitcast<i32>(x_545);
          let x_2864 : f32 = f32(x_2806);
          let x_2554 : vec3<i32> = bitcast<vec3<i32>>(x_810);
          let x_2865 : vec2<i32> = -(bitcast<vec2<i32>>((x_2520 + x_2520)));
          let x_2555 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>((x_2309 + x_2309))));
          let x_2866 : f32 = f32(x_2515);
          let x_2344 : vec2<i32> = bitcast<vec2<i32>>(x_481);
          let x_2556 : i32 = -(bitcast<i32>(1u));
          let x_2346 : vec2<i32> = bitcast<vec2<i32>>(x_481);
          let x_2867 : f32 = f32(bitcast<u32>(x_2858));
          let x_2347 : f32 = f32(bitcast<u32>(x_2329));
          let x_2348 : f32 = f32(x_2314);
          let x_2868 : i32 = -(x_2819);
          let x_2869 : bool = !(x_579);
          let x_2558 : i32 = (x_2507 - (x_2310 + x_2312));
          let x_2870 : i32 = -(x_2858);
          let x_2349 : f32 = f32(x_2312);
          let x_2871 : f32 = f32(bitcast<u32>((x_2543 + bitcast<i32>(x_2025))));
          let x_2872 : i32 = ((x_2824 - x_2505) + (x_2329 + x_2323));
          x_794 = vec3<f32>((x_820.x * (1.0 / x_545)), (x_820.y * (1.0 / x_571)), select(x_820.z, 1.0, (abs((x_571 - x_545)) < 0.5)));
          x_2092_phi = x_794;
          break;
        }
        let x_646 : bool = ((x_571 - x_501) < x_576);
        let x_648 : bool = !(x_646);
        let x_2874 : i32 = bitcast<i32>((x_2025 + bitcast<i32>(x_2515)));
        let x_2350 : i32 = bitcast<i32>(-(x_2316));
        let x_2875 : bool = !(!(x_2317));
        if (x_648) {
          let x_2559 : bool = !(x_553);
          let x_652 : f32 = (0.025 * x_489);
          let x_832 : f32 = fract(x_652);
          let x_2877 : bool = !(x_628);
          let x_2560 : i32 = bitcast<i32>(x_574);
          let x_2878 : i32 = (x_2515 - x_2823);
          let x_2879 : i32 = (x_2510 + x_2529);
          let x_2561 : f32 = f32(bitcast<u32>(x_2314));
          let x_2562 : i32 = -(x_2521);
          let x_2880 : i32 = bitcast<i32>(f32(bitcast<u32>(x_2502)));
          let x_2351 : bool = !(x_626);
          let x_2563 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2517));
          let x_2881 : vec2<i32> = bitcast<vec2<i32>>((x_2520 + x_2524));
          let x_2882 : bool = !(x_646);
          let x_2352 : f32 = bitcast<f32>(x_2319);
          let x_2884 : u32 = bitcast<u32>(-(bitcast<i32>(x_2810)));
          let x_2885 : f32 = f32(bitcast<u32>(x_2803));
          let x_2353 : f32 = f32(x_2319);
          let x_2886 : i32 = (x_2538 - bitcast<i32>(0u));
          let x_2887 : bool = !(x_606);
          let x_2888 : f32 = f32(x_2321);
          let x_2889 : f32 = f32(bitcast<u32>(x_2306));
          let x_2564 : vec3<i32> = bitcast<vec3<i32>>(vec3<f32>(1.0, 1.0, 1.0));
          let x_2890 : i32 = -(x_2822);
          let x_2565 : i32 = bitcast<i32>(x_652);
          let x_891 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_832, x_832, x_832) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * ((x_386 * 0.5) + 1.0));
          let x_2566 : bool = !(x_553);
          let x_2891 : f32 = f32((x_2514 - x_2560));
          let x_2567 : i32 = (x_2314 - x_2518);
          let x_2893 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2534));
          let x_2568 : bool = !(x_551);
          let x_2894 : u32 = (x_2810 - bitcast<u32>(x_2514));
          let x_2569 : vec3<i32> = bitcast<vec3<i32>>(vec3<f32>(0.0, 0.333333343, 0.666666687));
          let x_2895 : bool = !(x_608);
          let x_2570 : f32 = f32(x_2025);
          let x_2896 : bool = !(!(x_608));
          let x_2355 : i32 = -(x_2312);
          let x_2571 : f32 = f32(x_2316);
          let x_2572 : vec2<f32> = vec2<f32>(x_2520);
          let x_2897 : i32 = bitcast<i32>(x_463);
          let x_2356 : i32 = bitcast<i32>((x_2318 + bitcast<i32>(x_2311)));
          let x_2898 : f32 = f32(x_2795);
          let x_2357 : bool = !(x_566);
          let x_2573 : vec2<f32> = bitcast<vec2<f32>>(x_2524);
          let x_2358 : i32 = -(bitcast<i32>((x_2318 + bitcast<i32>(0))));
          x_865 = vec3<f32>((x_891.x * (1.0 / x_545)), (x_891.y * (1.0 / x_571)), select(x_891.z, 1.0, (abs((x_571 - x_545)) < 0.5)));
          let x_2574 : i32 = (x_2560 + x_2525);
          x_2092_phi = x_865;
          break;
        }
        let x_2899 : f32 = bitcast<f32>(x_2525);
        let x_2575 : f32 = f32(x_2306);
        let x_2900 : i32 = (x_2329 + x_2874);
        let x_666 : bool = ((x_501 + x_571) > x_576);
        let x_2576 : f32 = f32(x_2538);
        if (!(x_666)) {
          let x_2903 : f32 = f32(bitcast<u32>(x_2507));
          let x_2577 : i32 = (x_2505 - x_2505);
          let x_2904 : i32 = (x_2507 - x_2825);
          let x_2905 : f32 = bitcast<f32>(-(x_2328));
          let x_2578 : f32 = f32(x_2526);
          let x_2906 : bool = !(x_553);
          let x_2359 : i32 = (35 + bitcast<i32>(x_2316));
          let x_2907 : bool = !(x_666);
          let x_2579 : i32 = (x_2322 + bitcast<i32>(x_2025));
          let x_903 : f32 = fract((x_489 * 0.025));
          let x_2580 : i32 = -(x_2322);
          let x_2908 : bool = !(x_2327);
          let x_2360 : f32 = f32(bitcast<u32>(0));
          let x_2909 : i32 = (x_2823 + x_2315);
          let x_2910 : bool = !(x_2850);
          let x_2581 : f32 = f32(x_2502);
          let x_2911 : i32 = (x_2502 + x_2535);
          let x_2912 : f32 = f32(x_2316);
          let x_2361 : f32 = f32(x_2321);
          let x_2913 : bool = !(x_592);
          let x_2582 : vec3<i32> = bitcast<vec3<i32>>(x_2320);
          let x_2914 : i32 = (x_2314 - x_2874);
          let x_2915 : f32 = f32(x_2514);
          let x_2916 : i32 = bitcast<i32>(x_2522);
          let x_2362 : i32 = (x_2328 + bitcast<i32>(x_2321));
          let x_2584 : f32 = f32(x_2525);
          let x_962 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_903, x_903, x_903) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * (1.0 + (x_386 * 0.5)));
          let x_2363 : f32 = f32(bitcast<u32>(1));
          let x_2917 : bool = !(!(x_485));
          let x_2918 : i32 = bitcast<i32>(x_2811);
          let x_2586 : bool = !(!(x_566));
          let x_2919 : i32 = -(x_2523);
          let x_2365 : f32 = f32(bitcast<u32>(0));
          let x_2920 : f32 = f32(bitcast<u32>(x_2512));
          let x_2921 : f32 = f32(x_2801);
          let x_2587 : i32 = -(x_2528);
          let x_2366 : f32 = f32(x_2359);
          let x_2922 : f32 = f32(bitcast<i32>(0u));
          let x_2588 : bool = !(x_666);
          let x_2367 : bool = !(x_628);
          let x_2589 : f32 = f32(35);
          let x_2923 : f32 = f32(bitcast<u32>(x_2823));
          let x_2590 : i32 = -(x_2329);
          let x_2591 : i32 = (x_2514 + bitcast<i32>(35u));
          let x_2924 : f32 = f32(bitcast<u32>(x_2359));
          let x_2592 : i32 = (0 - x_2510);
          let x_2925 : i32 = -((x_2350 - (x_2502 - x_2315)));
          let x_2593 : i32 = -(x_2518);
          let x_2594 : i32 = bitcast<i32>((x_2318 - bitcast<i32>(x_2543)));
          let x_2369 : bool = !(x_2317);
          let x_2595 : f32 = f32(x_2321);
          x_936 = vec3<f32>(((1.0 / x_545) * x_962.x), (x_962.y * (1.0 / x_571)), select(x_962.z, 1.0, (abs((x_571 - x_545)) < 0.5)));
          let x_2926 : f32 = f32(bitcast<u32>(-(x_2314)));
          x_2092_phi = x_936;
          break;
        }
        let x_2596 : bool = !(x_648);
        x_2092_phi = vec3<f32>(0.0, 0.0, 0.0);
      }
    }
    let x_2092 : vec3<f32> = x_2092_phi;
    let x_2597 : i32 = bitcast<i32>(x_548);
    let x_2370 : bool = !(x_553);
    let x_2927 : i32 = (x_2518 + x_2514);
    let x_2928 : i32 = bitcast<i32>(-(x_2321));
    if ((length(x_2092) <= 0.0)) {
      let x_2371 : f32 = bitcast<f32>(0);
      x_2099_phi = x_2026;
      continue;
    }
    let x_2929 : u32 = bitcast<u32>(-(bitcast<i32>(x_2810)));
    let x_2598 : i32 = (x_2523 - x_2521);
    let x_2930 : vec3<u32> = (x_2309 - x_2309);
    x_2099_phi = x_2092;

    continuing {
      x_2099 = x_2099_phi;
      let x_2599 : f32 = f32(x_2315);
      x_520 = bitcast<i32>((x_2025 - bitcast<i32>(1)));
      x_2026_phi = x_2099;
      x_2025_phi = x_520;
    }
  }
  let x_409 : mat2x2<f32> = (x_401 * x_401);
  let x_2931 : u32 = (0u - bitcast<u32>(x_2795));
  let x_2600 : f32 = bitcast<f32>(x_2510);
  let x_1004 : vec2<f32> = (x_473 * x_409);
  let x_2601 : bool = !(x_485);
  let x_1007 : vec2<f32> = (x_475 * x_409);
  let x_2932 : u32 = bitcast<u32>((x_2798 + 1));
  let x_2602 : vec3<u32> = (x_2309 - x_2517);
  x_2029_phi = vec3<f32>(0.0, 0.0, 0.0);
  x_2028_phi = 35;
  loop {
    var x_2378 : bool;
    var x_1249 : vec3<f32>;
    var x_1320 : vec3<f32>;
    var x_1391 : vec3<f32>;
    var x_1462 : vec3<f32>;
    var x_2111 : vec3<f32>;
    var x_1046 : i32;
    var x_2071_phi : vec3<f32>;
    var x_2111_phi : vec3<f32>;
    x_2029 = x_2029_phi;
    x_2028 = x_2028_phi;
    let x_2933 : f32 = f32(bitcast<u32>(x_2518));
    x_2603 = !(x_485);
    x_2934 = !(x_485);
    x_1011 = (x_2028 >= 0);
    let x_2935 : u32 = (0u + bitcast<u32>(x_2025));
    x_2604 = -(x_2510);
    let x_2372 : f32 = f32(x_2314);
    x_2605 = -(x_2510);
    x_2936 = !(x_1011);
    if (x_1011) {
    } else {
      break;
    }
    var x_1015 : f32;
    var x_1016 : f32;
    var x_2937 : f32;
    var x_2938 : bool;
    var x_2608 : f32;
    var x_2376 : bool;
    var x_2941 : i32;
    var x_1023 : vec2<f32>;
    var x_1027 : f32;
    var x_1028 : f32;
    x_1015 = f32(x_2028);
    let x_2373 : f32 = f32(bitcast<u32>(35));
    x_1016 = (x_1015 * 0.100000001);
    let x_2606 : f32 = f32(bitcast<u32>(x_2512));
    let x_2374 : f32 = f32(bitcast<u32>(x_2310));
    x_2937 = f32(bitcast<i32>(x_2932));
    let x_2607 : f32 = f32(bitcast<u32>(x_2515));
    let x_2375 : f32 = f32(bitcast<u32>(x_2315));
    x_2938 = !(x_485);
    let x_2939 : f32 = f32(x_2504);
    x_2608 = f32(x_2514);
    let x_2940 : f32 = f32(bitcast<u32>(x_2512));
    x_2376 = !(x_1011);
    x_2941 = (x_2514 + x_2501);
    x_1023 = (vec2<f32>((sin((x_1016 + x_385)) * 0.25), 0.0) + x_1007);
    x_1027 = sin((0.01 * x_1015));
    let x_2942 : f32 = f32(bitcast<u32>(x_2512));
    x_1028 = (x_1027 + 0.01);
    let x_2943 : f32 = f32(bitcast<i32>(x_2932));
    let x_2609 : f32 = f32(x_2518);
    switch(0u) {
      default: {
        let x_1071 : f32 = x_1004.x;
        let x_2610 : i32 = bitcast<i32>((x_2025 + bitcast<i32>(0)));
        let x_2944 : f32 = f32(x_2941);
        let x_2377 : bool = !(x_2376);
        x_2378 = !(x_1011);
        let x_1076 : f32 = x_1023.x;
        let x_2379 : vec3<u32> = (x_2309 - x_2309);
        let x_2611 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2309));
        let x_1077 : bool = ((x_1071 - x_1028) < x_1076);
        let x_2945 : i32 = (x_2310 - x_2310);
        let x_1079 : bool = !(x_1077);
        let x_2612 : i32 = bitcast<i32>((35u + bitcast<u32>(x_2518)));
        if (x_1079) {
          let x_2380 : bool = !(x_2376);
          x_2071_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2946 : f32 = bitcast<f32>(x_2515);
        let x_2613 : i32 = (x_2306 + x_2610);
        let x_2381 : vec3<f32> = vec3<f32>(x_2379);
        let x_2947 : bool = !(x_2601);
        let x_2382 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2379)));
        let x_2948 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2602));
        let x_1090 : bool = ((x_1028 + x_1071) > x_1076);
        let x_2949 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2508));
        let x_2614 : vec3<u32> = (x_2379 - x_2309);
        let x_2383 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2382));
        let x_2950 : f32 = f32(x_2941);
        let x_2615 : i32 = bitcast<i32>(x_2608);
        let x_2384 : i32 = bitcast<i32>(-(x_2025));
        let x_2951 : i32 = (x_2306 + x_2504);
        if (!(x_1090)) {
          x_2071_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2952 : i32 = bitcast<i32>((x_2604 + bitcast<i32>(x_2312)));
        let x_2616 : i32 = (x_2610 - x_2310);
        let x_2385 : i32 = (35 + bitcast<i32>(35u));
        let x_1097 : f32 = x_1004.y;
        let x_2953 : i32 = -(x_2803);
        let x_2954 : f32 = f32(bitcast<u32>(x_2385));
        let x_1102 : f32 = x_1023.y;
        let x_2955 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2382)));
        let x_1103 : bool = ((x_1097 - x_1028) < x_1102);
        let x_2386 : bool = !(x_2376);
        let x_2956 : bool = !(x_2938);
        let x_1105 : bool = !(x_1103);
        let x_2957 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2508));
        if (x_1105) {
          x_2071_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2617 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2382)));
        let x_2387 : f32 = f32(x_2385);
        let x_2958 : i32 = -(x_2507);
        let x_2618 : i32 = -(x_2514);
        let x_1116 : bool = ((x_1028 + x_1097) > x_1102);
        let x_1118 : bool = !(x_1116);
        if (x_1118) {
          let x_2959 : i32 = -(x_2945);
          x_2071_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2619 : vec3<u32> = (x_2517 + x_2617);
        let x_2388 : bool = !(x_1011);
        let x_2960 : i32 = (x_2803 + x_2801);
        let x_2620 : vec3<u32> = (x_2517 + x_2517);
        let x_2961 : i32 = bitcast<i32>((35u - bitcast<u32>(x_2958)));
        let x_2389 : bool = !(x_1090);
        let x_2621 : vec3<f32> = bitcast<vec3<f32>>(x_2602);
        let x_2962 : f32 = f32(x_2025);
        let x_1132 : bool = ((x_1071 - x_1027) < x_1076);
        let x_2390 : f32 = f32(bitcast<u32>(x_2310));
        let x_1134 : bool = !(x_1132);
        let x_2622 : bool = !(x_2377);
        let x_2391 : f32 = f32(x_2306);
        let x_2964 : i32 = -(x_2504);
        let x_2623 : i32 = bitcast<i32>(x_1015);
        if (x_1134) {
          let x_2624 : f32 = f32(x_2518);
          let x_2392 : i32 = (0 - 1);
          let x_2625 : f32 = f32(x_2310);
          let x_1138 : f32 = (0.025 * x_1015);
          let x_2965 : i32 = bitcast<i32>(x_1138);
          let x_2393 : bool = !(x_1105);
          let x_1216 : f32 = fract(x_1138);
          let x_2626 : bool = !(x_2377);
          let x_2966 : vec3<u32> = (x_2619 - x_2614);
          let x_2394 : i32 = (x_2314 - x_2392);
          let x_2967 : vec3<f32> = vec3<f32>(x_2382);
          let x_2627 : f32 = f32(bitcast<u32>(x_2507));
          let x_2968 : bool = !(!(x_1079));
          let x_2395 : i32 = bitcast<i32>(x_1138);
          let x_2396 : f32 = f32(bitcast<u32>(x_2384));
          let x_2969 : i32 = -(x_2613);
          let x_2629 : i32 = (x_2392 - x_2616);
          let x_2970 : i32 = bitcast<i32>((x_2605 + bitcast<i32>(1u)));
          let x_2397 : u32 = (1u - bitcast<u32>(x_2394));
          let x_2971 : f32 = f32(bitcast<u32>(x_2623));
          let x_2398 : i32 = (x_2394 - x_2384);
          let x_2631 : i32 = -(x_2398);
          let x_2973 : f32 = f32(bitcast<u32>(x_2398));
          let x_2632 : i32 = bitcast<i32>(0.666666687);
          let x_2399 : vec2<i32> = bitcast<vec2<i32>>(vec2<f32>(0.5, 0.5));
          let x_2633 : i32 = -(x_2613);
          let x_2634 : i32 = -(bitcast<i32>(x_2516));
          let x_2400 : f32 = f32(x_2384);
          let x_2974 : bool = !(x_1077);
          let x_2635 : vec3<f32> = vec3<f32>(x_2382);
          let x_2975 : f32 = f32(bitcast<u32>(x_2311));
          let x_2401 : i32 = (x_2394 + x_2312);
          let x_2636 : f32 = f32(bitcast<u32>(x_2503));
          let x_1275 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_1216, x_1216, x_1216) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * (1.0 + (x_386 * 0.5)));
          let x_2977 : u32 = (x_2931 - bitcast<u32>(x_2616));
          let x_2637 : bool = !(x_2377);
          let x_2978 : vec3<f32> = bitcast<vec3<f32>>(bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2602))));
          let x_2979 : i32 = -(x_2801);
          let x_2980 : f32 = bitcast<f32>(x_2615);
          let x_2402 : i32 = bitcast<i32>(x_386);
          let x_2639 : i32 = bitcast<i32>((1u + bitcast<u32>(x_2503)));
          let x_2981 : f32 = f32(x_2791);
          let x_2640 : i32 = -(x_2311);
          let x_2982 : i32 = -(bitcast<i32>((x_2028 + bitcast<i32>(1))));
          let x_2983 : i32 = bitcast<i32>(0.0);
          let x_2641 : bool = !(x_2378);
          let x_2984 : i32 = bitcast<i32>(x_393);
          let x_2642 : bool = !(x_1116);
          let x_2403 : f32 = f32(x_2394);
          let x_2643 : vec3<u32> = (x_2508 - bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2602))));
          let x_2985 : i32 = (x_2610 + x_2615);
          let x_2986 : f32 = f32(bitcast<u32>(x_2616));
          let x_2987 : vec3<u32> = ((x_2602 - x_2619) + x_2619);
          let x_2988 : f32 = f32(bitcast<u32>((x_2503 - x_2612)));
          let x_2404 : i32 = bitcast<i32>((x_2028 + bitcast<i32>(1)));
          let x_2645 : f32 = bitcast<f32>(x_2615);
          x_1249 = vec3<f32>(((1.0 / x_1071) * x_1275.x), ((1.0 / x_1097) * x_1275.y), select(x_1275.z, 1.0, (abs((x_1097 - x_1071)) < 0.5)));
          x_2071_phi = x_1249;
          break;
        }
        let x_2646 : i32 = (x_2510 - x_2512);
        let x_1149 : f32 = (x_1027 + x_1071);
        let x_1152 : bool = (x_1149 > x_1076);
        let x_2405 : i32 = bitcast<i32>(3.0);
        if (!(x_1152)) {
          let x_1287 : f32 = fract((x_1015 * 0.025));
          let x_2989 : f32 = f32(x_2314);
          let x_2647 : bool = !(x_2376);
          let x_2990 : i32 = -(x_2405);
          let x_2406 : f32 = f32(x_2385);
          let x_2991 : bool = !(x_1103);
          let x_2992 : i32 = (x_2960 + x_2512);
          let x_2648 : f32 = f32(0u);
          let x_2993 : f32 = f32(bitcast<u32>(x_2801));
          let x_2994 : i32 = (x_2615 - x_2795);
          let x_2650 : f32 = f32(x_2505);
          let x_2651 : bool = !(x_1103);
          let x_2407 : i32 = -(1);
          let x_2408 : bool = !(x_485);
          let x_2409 : i32 = (35 - bitcast<i32>(1u));
          let x_2652 : bool = !(x_1077);
          let x_2995 : vec3<f32> = vec3<f32>(x_2382);
          let x_2653 : f32 = f32(x_2605);
          let x_2996 : f32 = f32(bitcast<u32>(x_2953));
          let x_2997 : f32 = f32(x_2514);
          let x_1346 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_1287, x_1287, x_1287) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * ((x_386 * 0.5) + 1.0));
          let x_2998 : bool = !(x_2936);
          let x_2654 : i32 = bitcast<i32>(0.666666687);
          let x_2655 : i32 = (x_2505 + x_2311);
          let x_2999 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2517)));
          let x_2656 : f32 = bitcast<f32>(x_2615);
          let x_2657 : i32 = (x_2311 + 35);
          let x_2411 : bool = !(x_1152);
          let x_3000 : f32 = f32(bitcast<u32>(bitcast<i32>((x_2604 - bitcast<i32>(x_2504)))));
          let x_2658 : vec3<u32> = (x_2382 + x_2382);
          let x_3001 : f32 = f32(x_2610);
          let x_2412 : i32 = -(bitcast<i32>(x_1102));
          let x_2659 : bool = !(x_1105);
          let x_3002 : i32 = bitcast<i32>(x_1076);
          let x_2660 : vec3<i32> = bitcast<vec3<i32>>(vec3<f32>(0.300000012, 0.300000012, 0.300000012));
          let x_2413 : i32 = -(x_2315);
          let x_2661 : f32 = f32(bitcast<i32>(1u));
          let x_3003 : f32 = f32(bitcast<u32>(x_2958));
          let x_2662 : bool = !(x_2389);
          let x_1311 : bool = (abs((x_1097 - x_1071)) < 0.5);
          let x_3004 : f32 = f32(x_2616);
          let x_2414 : i32 = bitcast<i32>(x_1149);
          let x_3005 : i32 = bitcast<i32>(x_391);
          let x_3006 : bool = !(x_1311);
          x_1320 = vec3<f32>((x_1346.x * (1.0 / x_1071)), ((1.0 / x_1097) * x_1346.y), select(x_1346.z, 1.0, x_1311));
          x_2071_phi = x_1320;
          break;
        }
        let x_3007 : i32 = bitcast<i32>(x_2937);
        let x_2663 : bool = !(x_1152);
        let x_3008 : bool = !(x_2956);
        let x_2415 : f32 = f32(x_2385);
        let x_1174 : bool = !(((x_1097 - x_1027) < x_1102));
        let x_3009 : i32 = bitcast<i32>((0u + bitcast<u32>(x_2384)));
        if (x_1174) {
          let x_2664 : i32 = (1 + x_2510);
          let x_3010 : i32 = -(x_2664);
          let x_2665 : f32 = f32(bitcast<u32>(x_2518));
          let x_2416 : bool = !(x_1118);
          let x_1358 : f32 = fract((0.025 * x_1015));
          let x_2667 : f32 = f32(bitcast<u32>(x_2315));
          let x_3011 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2382));
          let x_3012 : i32 = (1 - bitcast<i32>(x_2605));
          let x_3013 : i32 = (x_2618 - bitcast<i32>(x_2316));
          let x_2670 : f32 = f32(x_2610);
          let x_3015 : i32 = bitcast<i32>((x_2604 + bitcast<i32>(x_2953)));
          let x_3016 : f32 = f32(x_2615);
          let x_2671 : i32 = -(x_2510);
          let x_3018 : i32 = bitcast<i32>((x_2604 - bitcast<i32>(-(x_2502))));
          let x_3019 : bool = !(!(x_2386));
          let x_2672 : f32 = f32(bitcast<u32>(x_2664));
          let x_3020 : i32 = (x_2798 + bitcast<i32>(x_2506));
          let x_1417 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_1358, x_1358, x_1358) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * (1.0 + (0.5 * x_386)));
          let x_2673 : f32 = f32(1);
          let x_2417 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2379)));
          let x_2674 : bool = !(x_1090);
          let x_3021 : f32 = f32(bitcast<u32>(x_2613));
          let x_2418 : f32 = f32(bitcast<i32>(0u));
          let x_2419 : bool = !(x_1116);
          let x_2420 : i32 = (x_2311 + x_2311);
          let x_2421 : i32 = (x_2311 + x_2310);
          let x_2676 : f32 = f32(x_2505);
          let x_3022 : i32 = (bitcast<i32>((x_2941 - bitcast<i32>(x_2615))) - x_2618);
          let x_3023 : i32 = bitcast<i32>(x_1016);
          let x_2677 : vec3<f32> = vec3<f32>(x_2602);
          let x_3024 : bool = !(x_1134);
          let x_3025 : bool = !(x_1174);
          let x_2422 : i32 = bitcast<i32>((x_2025 - bitcast<i32>(x_2384)));
          let x_2678 : i32 = -(x_2405);
          let x_3026 : i32 = (x_2646 - x_2801);
          let x_3027 : f32 = f32(bitcast<u32>(x_2514));
          let x_2423 : vec3<f32> = vec3<f32>(x_2382);
          let x_3028 : vec3<u32> = (x_2602 - (x_2517 - x_2602));
          x_1391 = vec3<f32>(((1.0 / x_1071) * x_1417.x), ((1.0 / x_1097) * x_1417.y), select(x_1417.z, 1.0, (abs((x_1097 - x_1071)) < 0.5)));
          let x_3029 : f32 = f32((x_2932 + x_2935));
          let x_2424 : bool = !(x_485);
          let x_3030 : f32 = f32(x_2610);
          x_2071_phi = x_1391;
          break;
        }
        let x_3031 : bool = !(x_1132);
        let x_3032 : f32 = bitcast<f32>(x_2405);
        let x_1192 : bool = ((x_1027 + x_1097) > x_1102);
        let x_2426 : vec3<i32> = bitcast<vec3<i32>>(vec3<f32>(0.300000012, 0.300000012, 0.300000012));
        let x_1194 : bool = !(x_1192);
        let x_3034 : i32 = (x_2791 + bitcast<i32>(x_2025));
        let x_3035 : i32 = (0 + x_2507);
        if (x_1194) {
          let x_3037 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2620)));
          let x_1429 : f32 = fract((0.025 * x_1015));
          let x_3038 : bool = !(x_1079);
          let x_2428 : f32 = f32(bitcast<u32>(x_2312));
          let x_2679 : bool = !(x_1194);
          let x_3039 : f32 = f32(bitcast<u32>(-(x_2310)));
          let x_3040 : i32 = -(x_2803);
          let x_2429 : bool = !(x_2377);
          let x_2680 : vec3<u32> = (x_2614 - x_2619);
          let x_3041 : vec3<u32> = (x_2614 + bitcast<vec3<u32>>(bitcast<vec3<i32>>(x_2383)));
          let x_2681 : vec3<i32> = bitcast<vec3<i32>>(x_2383);
          let x_3042 : f32 = f32(x_2514);
          let x_2430 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2379)));
          let x_2682 : bool = !(x_1077);
          let x_2431 : bool = !(x_1079);
          let x_2683 : f32 = f32(x_2618);
          let x_3044 : i32 = (x_3007 + x_2945);
          let x_2432 : f32 = bitcast<f32>(x_2310);
          let x_2684 : i32 = (x_2512 - x_2315);
          let x_3045 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2614));
          let x_3046 : f32 = f32(x_2310);
          let x_1488 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_1429, x_1429, x_1429) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * (1.0 + (x_386 * 0.5)));
          let x_2685 : i32 = -(0);
          let x_2686 : bool = !(x_1192);
          let x_3048 : i32 = -((x_2623 + x_2618));
          let x_2687 : vec3<u32> = (x_2379 - x_2619);
          let x_3049 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2620));
          let x_3050 : i32 = (x_2503 + 0);
          let x_2433 : f32 = f32(1);
          let x_3051 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>((x_2517 + x_2517)));
          let x_2688 : f32 = f32(x_2504);
          let x_3052 : i32 = -(x_2503);
          let x_2434 : f32 = f32(bitcast<u32>(x_2312));
          let x_2689 : bool = !(x_2622);
          let x_2435 : f32 = f32(bitcast<u32>(x_2385));
          let x_3053 : f32 = f32(bitcast<u32>(x_3007));
          x_1462 = vec3<f32>((x_1488.x * (1.0 / x_1071)), ((1.0 / x_1097) * x_1488.y), select(x_1488.z, 1.0, (abs((x_1097 - x_1071)) < 0.5)));
          let x_2690 : i32 = -(bitcast<i32>(x_1015));
          x_2071_phi = x_1462;
          break;
        }
        x_2071_phi = vec3<f32>(0.0, 0.0, 0.0);
      }
    }
    let x_2071 : vec3<f32> = x_2071_phi;
    let x_3054 : bool = !(x_2378);
    let x_3055 : i32 = bitcast<i32>((x_2604 + bitcast<i32>(x_2791)));
    let x_3056 : bool = !(x_2934);
    if ((length(x_2071) <= 0.0)) {
      let x_3057 : i32 = -((x_2515 - x_2311));
      let x_2436 : vec2<i32> = bitcast<vec2<i32>>(x_400);
      x_2111_phi = x_2029;
      continue;
    }
    let x_3058 : i32 = bitcast<i32>(x_2509);
    let x_2692 : i32 = bitcast<i32>((x_2028 - bitcast<i32>(x_2515)));
    x_2111_phi = x_2071;

    continuing {
      x_2111 = x_2111_phi;
      let x_2693 : i32 = (x_2503 + x_2306);
      x_1046 = bitcast<i32>((x_2028 - bitcast<i32>(1u)));
      let x_2694 : i32 = bitcast<i32>(0.300000012);
      x_2029_phi = x_2111;
      x_2028_phi = x_1046;
    }
  }
  let x_3059 : f32 = f32(x_2028);
  let x_419 : mat2x2<f32> = (x_409 * x_401);
  let x_3060 : i32 = (x_2312 - bitcast<i32>(1u));
  let x_2695 : f32 = f32(bitcast<u32>(0));
  let x_3061 : f32 = bitcast<f32>(x_2605);
  let x_1530 : vec2<f32> = (x_473 * x_419);
  let x_1533 : vec2<f32> = (x_475 * x_419);
  let x_3062 : i32 = bitcast<i32>(x_388);
  x_2032_phi = vec3<f32>(0.0, 0.0, 0.0);
  x_2031_phi = 35;
  loop {
    var x_1775 : vec3<f32>;
    var x_1846 : vec3<f32>;
    var x_1917 : vec3<f32>;
    var x_1988 : vec3<f32>;
    var x_2123 : vec3<f32>;
    var x_1572 : i32;
    var x_2050_phi : vec3<f32>;
    var x_2123_phi : vec3<f32>;
    x_2032 = x_2032_phi;
    let x_2031 : i32 = x_2031_phi;
    let x_2696 : i32 = bitcast<i32>((x_2604 + bitcast<i32>(0)));
    let x_1537 : bool = (x_2031 >= 0);
    let x_2697 : i32 = (x_2306 + x_2515);
    x_3063 = bitcast<i32>(-(x_2316));
    if (x_1537) {
    } else {
      break;
    }
    var x_1541 : f32;
    var x_1545 : f32;
    var x_2698 : i32;
    var x_2699 : i32;
    var x_3066 : i32;
    var x_2700 : i32;
    var x_2439 : i32;
    var x_1549 : vec2<f32>;
    var x_3069 : i32;
    var x_2440 : i32;
    var x_2701 : i32;
    var x_1553 : f32;
    var x_3070 : f32;
    var x_2702 : i32;
    var x_1554 : f32;
    var x_3071 : i32;
    x_1541 = f32(x_2031);
    let x_3064 : i32 = (x_2504 - 1);
    x_1545 = (x_385 + (0.100000001 * x_1541));
    x_2698 = -(x_2512);
    let x_3065 : vec3<f32> = bitcast<vec3<f32>>(x_2602);
    let x_2437 : f32 = f32(x_2315);
    x_2699 = -(x_2505);
    let x_2438 : f32 = f32(bitcast<u32>(x_2311));
    x_3066 = (x_2798 - bitcast<i32>(x_2316));
    let x_3067 : bool = !(x_1537);
    x_2700 = -(x_2515);
    let x_3068 : bool = !(x_1011);
    x_2439 = (x_2031 + bitcast<i32>(x_2316));
    x_1549 = (x_1533 + vec2<f32>((sin(x_1545) * 0.25), 0.0));
    x_3069 = -(x_2306);
    x_2440 = (35 - 35);
    x_2701 = (x_2507 + bitcast<i32>(x_2700));
    x_1553 = sin((0.01 * x_1541));
    x_3070 = f32(x_2502);
    x_2702 = -(x_2501);
    x_1554 = (x_1553 + 0.01);
    x_3071 = (x_2696 - x_2311);
    switch(0u) {
      default: {
        let x_3072 : bool = !(x_1011);
        let x_2703 : f32 = f32(x_2518);
        let x_3073 : i32 = bitcast<i32>((x_3069 + bitcast<i32>(x_2504)));
        let x_1597 : f32 = x_1530.x;
        let x_2441 : i32 = (x_2306 + bitcast<i32>(x_2439));
        let x_3074 : f32 = f32(x_2804);
        let x_2704 : f32 = f32(x_2696);
        let x_1602 : f32 = x_1549.x;
        let x_1603 : bool = ((x_1597 - x_1554) < x_1602);
        let x_2705 : i32 = bitcast<i32>((x_2699 - bitcast<i32>(x_2310)));
        let x_3075 : vec2<i32> = bitcast<vec2<i32>>(x_399);
        let x_2442 : i32 = bitcast<i32>((x_2316 + x_2439));
        let x_3076 : i32 = (x_2501 - x_2504);
        let x_1605 : bool = !(x_1603);
        let x_3077 : i32 = (x_2314 + bitcast<i32>(x_2605));
        let x_2706 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2602));
        let x_2443 : vec3<u32> = (x_2309 - x_2309);
        if (x_1605) {
          let x_2707 : bool = !(x_485);
          x_2050_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2708 : f32 = f32(bitcast<u32>(x_2697));
        let x_1616 : bool = ((x_1597 + x_1554) > x_1602);
        let x_2709 : i32 = (x_2501 + x_2518);
        let x_1618 : bool = !(x_1616);
        let x_3078 : f32 = f32(x_2518);
        if (x_1618) {
          let x_3079 : i32 = bitcast<i32>(-(x_3071));
          x_2050_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_3080 : i32 = bitcast<i32>((x_2025 + x_2702));
        let x_2444 : i32 = bitcast<i32>((x_2316 + x_2316));
        let x_1623 : f32 = x_1530.y;
        let x_1626 : f32 = (x_1623 - x_1554);
        let x_2445 : u32 = bitcast<u32>(-(0));
        let x_2710 : f32 = f32(x_2515);
        let x_1628 : f32 = x_1549.y;
        let x_2711 : bool = !(x_1011);
        let x_3081 : i32 = -(x_2310);
        let x_2446 : i32 = -(x_2442);
        let x_3082 : i32 = -(x_2705);
        let x_1629 : bool = (x_1626 < x_1628);
        let x_3083 : bool = !(x_2934);
        let x_2712 : i32 = bitcast<i32>(x_386);
        let x_3084 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_2508)));
        let x_2447 : bool = !(x_1618);
        let x_3085 : f32 = f32(bitcast<u32>(x_2794));
        let x_2713 : i32 = bitcast<i32>(x_1626);
        let x_1631 : bool = !(x_1629);
        let x_2448 : i32 = (35 + x_2310);
        let x_2714 : i32 = (x_2518 - x_2442);
        if (x_1631) {
          let x_3086 : i32 = (x_2803 + x_3060);
          x_2050_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2715 : u32 = bitcast<u32>((0 + x_2315));
        let x_3087 : i32 = (35 + x_2518);
        let x_1642 : bool = ((x_1554 + x_1623) > x_1628);
        let x_2716 : vec3<u32> = (x_2309 + x_2602);
        let x_2449 : i32 = -(bitcast<i32>(1u));
        let x_2717 : bool = !(x_2601);
        let x_3088 : f32 = f32(bitcast<u32>(x_3077));
        let x_1644 : bool = !(x_1642);
        let x_3089 : vec3<u32> = (x_2309 - x_2602);
        if (x_1644) {
          let x_2718 : i32 = bitcast<i32>((x_2439 + bitcast<i32>(x_2311)));
          let x_3090 : f32 = f32(bitcast<u32>(x_2505));
          let x_2450 : i32 = bitcast<i32>((x_2316 - bitcast<i32>(x_2311)));
          let x_3091 : i32 = (x_2515 + x_3060);
          let x_2719 : bool = !(x_2711);
          x_2050_phi = vec3<f32>(0.0, 0.0, 0.0);
          break;
        }
        let x_2720 : i32 = bitcast<i32>(-(x_2028));
        let x_2721 : f32 = f32(bitcast<u32>(1));
        let x_3092 : i32 = (x_2720 + x_2720);
        let x_2722 : i32 = -(x_2518);
        let x_3093 : f32 = f32(bitcast<u32>(x_2512));
        let x_1660 : bool = !(((x_1597 - x_1553) < x_1602));
        if (x_1660) {
          let x_1742 : f32 = fract((0.025 * x_1541));
          let x_2723 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2508));
          let x_3094 : f32 = f32(bitcast<u32>(x_2696));
          let x_2452 : f32 = f32(x_2439);
          let x_2725 : i32 = bitcast<i32>((x_2701 - bitcast<i32>(x_2442)));
          let x_2453 : i32 = bitcast<i32>((x_2316 - bitcast<i32>(x_2310)));
          let x_2727 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2508));
          let x_2728 : f32 = f32(bitcast<u32>(x_2712));
          let x_2454 : i32 = bitcast<i32>(-(x_2025));
          let x_2729 : bool = !(x_1605);
          let x_2455 : vec3<u32> = (x_2443 + x_2443);
          let x_3095 : i32 = -(x_2518);
          let x_3096 : vec3<u32> = (x_2716 + bitcast<vec3<u32>>(bitcast<vec3<i32>>(x_2706)));
          let x_2730 : bool = !(x_1603);
          let x_3097 : f32 = f32(bitcast<i32>(-(x_2698)));
          let x_2456 : bool = !(x_1603);
          let x_3098 : f32 = f32(bitcast<u32>(x_2696));
          let x_2731 : f32 = f32(x_2028);
          let x_1801 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_1742, x_1742, x_1742) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * (1.0 + (0.5 * x_386)));
          let x_3099 : vec2<i32> = bitcast<vec2<i32>>(x_1549);
          let x_2732 : i32 = (x_2310 - x_2705);
          let x_2457 : f32 = f32(x_2031);
          let x_2458 : f32 = f32(bitcast<u32>(1));
          let x_3100 : i32 = (x_3062 + x_2315);
          let x_2459 : f32 = f32(x_2306);
          let x_2733 : i32 = (x_2505 - 1);
          let x_2734 : f32 = f32(bitcast<u32>(x_2505));
          let x_2460 : f32 = f32(x_2440);
          let x_2735 : i32 = (x_2510 + x_2720);
          let x_3101 : i32 = bitcast<i32>(x_3085);
          let x_2736 : vec4<i32> = bitcast<vec4<i32>>(x_467);
          let x_3102 : f32 = bitcast<f32>(35);
          let x_2461 : i32 = -(bitcast<i32>(-(x_2440)));
          let x_3103 : f32 = f32(x_2804);
          let x_2737 : bool = !(x_2601);
          let x_3104 : bool = !(x_1603);
          let x_3105 : bool = !(x_1631);
          let x_2738 : i32 = -(x_2442);
          x_1775 = vec3<f32>((x_1801.x * (1.0 / x_1597)), (x_1801.y * (1.0 / x_1623)), select(x_1801.z, 1.0, (abs((x_1623 - x_1597)) < 0.5)));
          let x_2739 : i32 = -(x_2441);
          x_2050_phi = x_1775;
          break;
        }
        let x_2462 : u32 = bitcast<u32>(-(bitcast<i32>(1u)));
        let x_3106 : vec3<f32> = vec3<f32>(bitcast<vec3<i32>>(x_2309));
        let x_3107 : f32 = f32(x_2444);
        let x_2463 : f32 = f32(x_2315);
        let x_3108 : f32 = bitcast<f32>(x_2715);
        let x_3109 : i32 = (x_3060 + x_2441);
        let x_2741 : f32 = bitcast<f32>(x_2445);
        if (!(((x_1597 + x_1553) > x_1602))) {
          let x_3110 : i32 = -(x_2448);
          let x_1813 : f32 = fract((x_1541 * 0.025));
          let x_2464 : i32 = bitcast<i32>((x_2316 - bitcast<i32>(35)));
          let x_3111 : f32 = f32(x_2712);
          let x_3112 : i32 = bitcast<i32>(x_3074);
          let x_2742 : f32 = f32(x_2705);
          let x_3113 : f32 = bitcast<f32>(x_3077);
          let x_2465 : bool = !(x_1011);
          let x_3114 : f32 = f32(x_2702);
          let x_2743 : i32 = bitcast<i32>((x_2699 + x_2605));
          let x_3115 : bool = !(x_1660);
          let x_1861 : vec3<f32> = (vec3<f32>(x_1813, x_1813, x_1813) - vec3<f32>(0.0, 0.333333343, 0.666666687));
          let x_3116 : i32 = -(x_2512);
          let x_2466 : i32 = (x_2464 - bitcast<i32>(x_2462));
          let x_2744 : bool = !(x_1629);
          let x_2745 : i32 = (0 + x_2510);
          let x_3117 : i32 = bitcast<i32>((x_2700 - bitcast<i32>(x_3064)));
          let x_2467 : i32 = bitcast<i32>((x_2439 - bitcast<i32>(x_2448)));
          let x_2746 : u32 = (0u + (x_2462 - bitcast<u32>(x_2698)));
          let x_3118 : vec3<u32> = (x_2716 + x_2517);
          let x_2747 : f32 = f32(x_2311);
          let x_3119 : f32 = bitcast<f32>(x_2441);
          let x_2468 : bool = !(x_2447);
          let x_3120 : i32 = -(x_2031);
          let x_1872 : vec3<f32> = (clamp((abs((abs((x_1861 * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * ((x_386 * 0.5) + 1.0));
          let x_2470 : f32 = f32(bitcast<u32>(x_2311));
          let x_3121 : bool = !(x_1605);
          let x_2471 : f32 = f32(x_2466);
          let x_2749 : bool = !(x_1011);
          let x_3122 : bool = !(x_2601);
          let x_3123 : u32 = bitcast<u32>(-(bitcast<i32>(x_2931)));
          let x_3124 : i32 = -(x_2801);
          let x_2750 : i32 = bitcast<i32>(x_1545);
          let x_2472 : i32 = (x_2314 - x_2466);
          let x_2473 : vec3<i32> = bitcast<vec3<i32>>(x_1861);
          let x_3125 : i32 = (x_2713 + -(bitcast<i32>(0u)));
          let x_3126 : f32 = f32(bitcast<i32>(0u));
          let x_2474 : i32 = (x_2449 + x_2315);
          let x_3127 : i32 = (bitcast<i32>((x_2445 + bitcast<u32>(x_2722))) + x_2743);
          let x_2475 : i32 = (x_2442 + bitcast<i32>(35u));
          let x_3128 : f32 = f32(x_2312);
          let x_2751 : i32 = -(x_2720);
          let x_3129 : f32 = f32(x_2464);
          let x_2752 : i32 = (x_2743 - bitcast<i32>(x_2440));
          let x_3130 : i32 = bitcast<i32>(x_2792);
          let x_2753 : i32 = (x_2714 + bitcast<i32>(x_2439));
          let x_2476 : i32 = -(x_2467);
          let x_3131 : i32 = -(x_2709);
          let x_2754 : u32 = (x_2445 - bitcast<u32>(x_2316));
          x_1846 = vec3<f32>((x_1872.x * (1.0 / x_1597)), ((1.0 / x_1623) * x_1872.y), select(x_1872.z, 1.0, (abs((x_1623 - x_1597)) < 0.5)));
          let x_2755 : f32 = f32(x_2514);
          let x_2477 : f32 = f32(x_2467);
          let x_2756 : f32 = f32(bitcast<u32>(x_2720));
          x_2050_phi = x_1846;
          break;
        }
        let x_2478 : i32 = bitcast<i32>((x_2025 + x_2316));
        let x_3132 : i32 = bitcast<i32>((x_2702 + bitcast<i32>(x_2518)));
        let x_2758 : f32 = f32(bitcast<u32>(0));
        if (!(((x_1623 - x_1553) < x_1628))) {
          let x_3133 : f32 = bitcast<f32>(x_2439);
          let x_2759 : bool = !(x_1616);
          let x_1884 : f32 = fract((x_1541 * 0.025));
          let x_2760 : f32 = bitcast<f32>(x_2316);
          let x_3134 : f32 = bitcast<f32>(0);
          let x_3135 : bool = !(x_3072);
          let x_3136 : f32 = f32(bitcast<u32>(x_2512));
          let x_3137 : i32 = (x_2315 + x_3064);
          let x_2762 : f32 = f32(x_2462);
          let x_3139 : i32 = bitcast<i32>(x_3085);
          let x_3140 : i32 = (x_2503 + bitcast<i32>(x_3063));
          let x_2763 : f32 = bitcast<f32>(x_2031);
          let x_3141 : f32 = f32(bitcast<u32>(x_2801));
          let x_2764 : bool = !(x_1618);
          let x_1943 : vec3<f32> = (clamp((abs((abs(((vec3<f32>(x_1884, x_1884, x_1884) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0)) - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * (1.0 + (0.5 * x_386)));
          let x_3142 : f32 = f32(-(x_2714));
          let x_2479 : bool = !(x_1642);
          let x_3143 : i32 = (x_2311 - x_2697);
          let x_2480 : f32 = f32(x_2449);
          let x_2766 : f32 = f32(x_2501);
          let x_3144 : f32 = f32(bitcast<u32>((x_2478 - x_2507)));
          let x_2767 : f32 = f32(x_2310);
          let x_3145 : f32 = f32(bitcast<i32>(x_3070));
          let x_2481 : bool = !(x_1537);
          let x_3146 : f32 = bitcast<f32>(x_3063);
          let x_2768 : i32 = (x_2712 + x_2713);
          let x_3147 : vec3<u32> = bitcast<vec3<u32>>(-(bitcast<vec3<i32>>(x_3089)));
          let x_3148 : i32 = -(x_3064);
          let x_2769 : f32 = f32(bitcast<u32>(x_2446));
          let x_3149 : f32 = f32(x_2439);
          let x_3150 : f32 = f32(x_2698);
          let x_2482 : f32 = f32(bitcast<u32>(x_2478));
          let x_2770 : i32 = (x_2696 - x_2505);
          let x_2771 : bool = !(x_1644);
          let x_2483 : u32 = (x_2462 + x_2445);
          let x_2772 : bool = !(!(x_1642));
          x_1917 = vec3<f32>(((1.0 / x_1597) * x_1943.x), ((1.0 / x_1623) * x_1943.y), select(x_1943.z, 1.0, (abs((x_1623 - x_1597)) < 0.5)));
          let x_3151 : f32 = bitcast<f32>(1);
          x_2050_phi = x_1917;
          break;
        }
        let x_2773 : f32 = f32(bitcast<i32>(x_2715));
        let x_2774 : f32 = f32(bitcast<u32>(x_2722));
        let x_2485 : i32 = -(x_2442);
        let x_2775 : i32 = (x_2507 + bitcast<i32>(x_2439));
        let x_3152 : f32 = f32(x_2440);
        let x_2486 : bool = !(x_1011);
        let x_1720 : bool = !(((x_1553 + x_1623) > x_1628));
        let x_2776 : bool = !(x_1603);
        if (x_1720) {
          let x_3153 : vec3<f32> = vec3<f32>(x_3089);
          let x_1955 : f32 = fract((0.025 * x_1541));
          let x_3154 : bool = !(x_2934);
          let x_2487 : i32 = bitcast<i32>((x_2025 + x_2439));
          let x_2777 : f32 = f32(x_2714);
          let x_2778 : i32 = -(x_2505);
          let x_3155 : vec3<u32> = (x_3089 - x_2602);
          let x_2779 : f32 = bitcast<f32>(x_2507);
          let x_2488 : u32 = bitcast<u32>(-(bitcast<i32>(1u)));
          let x_3156 : i32 = (x_2514 - bitcast<i32>(x_2604));
          let x_2780 : bool = !(x_1537);
          let x_2781 : i32 = bitcast<i32>(x_1955);
          let x_3157 : bool = !(x_1537);
          let x_2005 : vec3<f32> = abs(((vec3<f32>(x_1955, x_1955, x_1955) - vec3<f32>(0.0, 0.333333343, 0.666666687)) * 6.0));
          let x_3158 : bool = !(x_1537);
          let x_3159 : bool = !(x_1642);
          let x_2490 : bool = !(x_1629);
          let x_3160 : bool = !(x_2936);
          let x_2782 : f32 = f32(bitcast<u32>(x_2503));
          let x_3161 : i32 = bitcast<i32>(-(x_3063));
          let x_2783 : i32 = (1 - bitcast<i32>(x_2025));
          let x_3162 : i32 = (x_2713 + x_2442);
          let x_3163 : i32 = (x_2441 + (x_2315 + bitcast<i32>(x_2028)));
          let x_2491 : f32 = f32(x_2310);
          let x_2014 : vec3<f32> = (clamp((abs((x_2005 - vec3<f32>(3.0, 3.0, 3.0))) - vec3<f32>(1.0, 1.0, 1.0)), vec3<f32>(0.0, 0.0, 0.0), vec3<f32>(1.0, 1.0, 1.0)) * ((x_386 * 0.5) + 1.0));
          let x_3164 : i32 = (x_2507 + x_2446);
          let x_2784 : bool = !(x_1660);
          let x_3165 : f32 = f32(x_2698);
          let x_2492 : f32 = bitcast<f32>(1u);
          let x_3166 : u32 = bitcast<u32>(-(bitcast<i32>(x_2932)));
          let x_3167 : i32 = bitcast<i32>((x_3066 - bitcast<i32>(x_3080)));
          let x_2785 : i32 = bitcast<i32>((x_2519 + bitcast<i32>(x_2713)));
          let x_3168 : f32 = bitcast<f32>(x_2441);
          let x_2493 : i32 = (x_2306 + x_2310);
          let x_3169 : f32 = f32(bitcast<u32>(x_3082));
          let x_2786 : f32 = f32(x_2604);
          let x_3170 : f32 = f32(x_2605);
          let x_2494 : i32 = -(x_2310);
          let x_2495 : bool = !(x_1720);
          let x_3171 : i32 = bitcast<i32>((x_2604 + bitcast<i32>(x_2314)));
          x_1988 = vec3<f32>((x_2014.x * (1.0 / x_1597)), (x_2014.y * (1.0 / x_1623)), select(x_2014.z, 1.0, (abs((x_1623 - x_1597)) < 0.5)));
          let x_3172 : vec3<i32> = bitcast<vec3<i32>>(x_2005);
          let x_2787 : f32 = f32(-(x_2311));
          let x_2496 : f32 = f32(bitcast<u32>(x_2315));
          x_2050_phi = x_1988;
          break;
        }
        let x_3173 : i32 = bitcast<i32>(x_1545);
        x_2050_phi = vec3<f32>(0.0, 0.0, 0.0);
      }
    }
    let x_2050 : vec3<f32> = x_2050_phi;
    let x_2497 : i32 = bitcast<i32>((x_2316 - bitcast<i32>(x_2306)));
    let x_3174 : bool = !(x_3068);
    let x_3175 : bool = !(x_2603);
    let x_2498 : i32 = -(x_2310);
    if ((length(x_2050) <= 0.0)) {
      x_2123_phi = x_2032;
      continue;
    }
    let x_2499 : f32 = f32(x_2031);
    x_2123_phi = x_2050;

    continuing {
      x_2123 = x_2123_phi;
      let x_2788 : f32 = f32(bitcast<u32>(x_2310));
      x_1572 = (x_2031 - 1);
      let x_2789 : i32 = -(x_2031);
      let x_3176 : i32 = (x_3064 + bitcast<i32>(x_2025));
      let x_2500 : bool = !(x_485);
      let x_3177 : i32 = (x_2696 + x_2310);
      x_2032_phi = x_2123;
      x_2031_phi = x_1572;
    }
  }
  let x_3178 : i32 = -(x_2504);
  let x_432 : vec3<f32> = mix(mix(x_2026, x_2029, vec3<f32>(0.300000012, 0.300000012, 0.300000012)), x_2032, vec3<f32>(0.300000012, 0.300000012, 0.300000012));
  let x_2790 : i32 = -(x_2314);
  let x_3179 : i32 = bitcast<i32>((x_3063 - x_2604));
  let x_3180 : bool = !(x_2601);
  let x_3181 : vec3<u32> = (x_2602 + x_2517);
  x_GLF_color = vec4<f32>(x_432.x, x_432.y, x_432.z, 1.0);
  return;
}

struct main_out {
  [[location(0)]]
  x_GLF_color_1 : vec4<f32>;
};

[[stage(fragment)]]
fn main([[builtin(position)]] gl_FragCoord_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(x_GLF_color);
}
