[[block]]
struct buf0 {
    resolution: vec2<f32>;
};

var<private> gl_FragCoord1: vec4<f32>;
[[group(0), binding(0)]]
var<uniform> global: buf0;
var<private> GLF_color: vec4<f32>;

fn itervi2(p: ptr<function, vec2<i32>>) -> vec2<i32> {
    let e50: i32 = (*p)[0u];
    let e51: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e51;
    (*p)[0u] = 5;
    (*p)[0u] = e50;
    let e52: vec2<i32> = (*p);
    (*p) = e52;
    let e53: vec2<i32> = (*p);
    (*p) = vec2<i32>(0, 0);
    (*p) = e53;
    let e54: i32 = (*p)[0u];
    (*p)[0u] = 15;
    (*p)[0u] = e54;
    let e55: vec2<i32> = (*p);
    (*p) = vec2<i32>(0, 0);
    (*p) = e55;
    (*p) = e52;
    let e56: i32 = (*p)[0u];
    (*p)[0u] = 100;
    (*p)[0u] = e56;
    let e57: i32 = (*p)[0u];
    let e59: vec2<i32> = (*p);
    (*p) = vec2<i32>(0, 0);
    (*p) = e59;
    if ((e57 > 0)) {
        let e60: i32 = (*p)[0u];
        (*p)[0u] = 15;
        (*p)[0u] = e60;
        let e62: i32 = (*p)[0u];
        (*p)[0u] = 0;
        (*p)[0u] = e62;
        let e63: i32 = (*p)[1u];
        let e64: i32 = (*p)[0u];
        (*p)[0u] = 2;
        (*p)[0u] = e64;
        let e66: i32 = (*p)[1u];
        (*p)[1u] = e60;
        (*p)[1u] = e66;
        (*p)[1u] = (e63 - 1);
        let e67: i32 = (*p)[0u];
        (*p)[0u] = 0;
        (*p)[0u] = e67;
    }
    let e68: vec2<i32> = (*p);
    let e69: vec2<i32> = (*p);
    (*p) = vec2<i32>(0, 0);
    (*p) = e69;
    (*p) = e68;
    let e70: i32 = (*p)[0u];
    (*p)[0u] = 8;
    (*p)[0u] = e70;
    (*p) = e68;
    let e72: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e72;
    let e73: i32 = (*p)[0u];
    (*p)[0u] = e54;
    let e74: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e74;
    (*p)[0u] = e73;
    let e75: i32 = (*p)[0u];
    let e76: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e76;
    let e78: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e78;
    if ((e75 < 0)) {
        let e80: vec2<i32> = (*p);
        let e81: i32 = (*p)[1u];
        (*p)[1u] = e54;
        (*p)[1u] = e81;
        (*p) = e68;
        let e82: i32 = (*p)[0u];
        (*p)[0u] = 0;
        (*p)[0u] = e82;
        (*p) = e80;
        let e83: i32 = (*p)[1u];
        let e84: i32 = (*p)[0u];
        let e85: i32 = (*p)[0u];
        (*p)[0u] = 8;
        let e86: i32 = (*p)[0u];
        (*p)[0u] = e70;
        (*p)[0u] = e86;
        let e87: i32 = (*p)[0u];
        (*p)[0u] = 0;
        let e88: i32 = (*p)[0u];
        (*p)[0u] = 0;
        (*p)[0u] = e88;
        (*p)[0u] = e87;
        (*p)[0u] = e85;
        (*p)[0u] = 1;
        (*p)[0u] = e84;
        (*p)[1u] = (1 + e83);
        let e90: vec2<i32> = (*p);
        (*p) = vec2<i32>(0, 0);
        (*p) = e90;
        let e91: i32 = (*p)[0u];
        let e92: i32 = (*p)[0u];
        (*p)[0u] = 0;
        (*p)[0u] = e92;
        (*p)[0u] = 16;
        (*p)[0u] = e91;
        let e93: vec2<i32> = (*p);
        (*p) = e93;
        (*p) = e93;
        let e94: i32 = (*p)[1u];
        (*p)[1u] = 0;
        (*p)[1u] = e94;
    }
    let e95: i32 = (*p)[0u];
    (*p)[0u] = 1;
    let e96: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e96;
    let e97: i32 = (*p)[0u];
    let e98: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e98;
    let e99: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e99;
    (*p)[0u] = e57;
    (*p)[0u] = e97;
    (*p)[0u] = e95;
    let e101: i32 = (*p)[1u];
    (*p)[1u] = 0;
    (*p)[1u] = e101;
    let e102: i32 = (*p)[1u];
    let e104: vec2<i32> = (*p);
    let e105: i32 = (*p)[1u];
    (*p)[1u] = 5;
    (*p)[1u] = e105;
    (*p) = e68;
    (*p) = e104;
    let e107: vec2<i32> = (*p);
    (*p) = e68;
    (*p) = e107;
    let e108: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e108;
    let e109: i32 = (*p)[0u];
    let e110: i32 = (*p)[0u];
    let e111: i32 = (*p)[0u];
    (*p)[0u] = 0;
    let e112: i32 = (*p)[1u];
    (*p)[1u] = 0;
    (*p)[1u] = e112;
    (*p)[0u] = e111;
    (*p)[0u] = e57;
    (*p)[0u] = e110;
    let e113: i32 = (e109 + (e102 / 2));
    let e115: i32 = (*p)[0u];
    (*p)[0u] = e95;
    let e116: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e116;
    let e117: i32 = (*p)[1u];
    let e118: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e118;
    (*p)[1u] = e113;
    let e119: vec2<i32> = (*p);
    (*p) = vec2<i32>(0, 0);
    (*p) = e119;
    (*p)[1u] = e117;
    (*p)[0u] = e115;
    (*p)[0u] = e113;
    let e120: i32 = (*p)[1u];
    (*p)[1u] = e56;
    (*p)[1u] = e120;
    let e121: vec2<i32> = (*p);
    let e122: i32 = (*p)[0u];
    (*p)[0u] = 0;
    (*p)[0u] = e122;
    return e121;
}

fn main1() {
    var pos: vec2<f32>;
    var ipos: vec2<i32>;
    var v: i32;
    var w: i32;
    var p1: vec2<i32>;
    var i: i32;
    var param: vec2<i32>;
    var indexable: array<vec4<f32>,16u>;

    let e56: vec2<i32> = param;
    let e57: i32 = w;
    w = 0;
    w = e57;
    param = e56;
    param = e56;
    let e58: vec4<f32> = gl_FragCoord1;
    let e59: vec2<f32> = pos;
    pos = e59;
    pos = e59;
    let e60: vec2<f32> = pos;
    pos = vec2<f32>(0.0, 0.0);
    pos = e60;
    let e61: vec2<f32> = e58.xy;
    let e62: vec2<i32> = p1;
    p1 = e56;
    p1 = e62;
    let e63: vec2<i32> = param;
    param = vec2<i32>(0, 0);
    param = e63;
    let e65: vec2<i32> = p1;
    p1 = vec2<i32>(0, 0);
    p1 = e65;
    let e66: i32 = i;
    i = e66;
    i = e66;
    let e67: vec2<f32> = pos;
    pos = e61;
    pos = e67;
    let e68: vec2<f32> = global.resolution;
    let e69: vec2<f32> = (e61 / e68);
    let e70: i32 = w;
    let e71: i32 = w;
    w = 0;
    w = e71;
    w = 10;
    w = e70;
    let e72: vec2<i32> = param;
    param = e72;
    let e73: i32 = v;
    v = 0;
    v = e73;
    let e74: vec2<i32> = param;
    param = e72;
    let e75: array<vec4<f32>,16u> = indexable;
    let e76: vec2<f32> = pos;
    pos = vec2<f32>(0.0, 0.0);
    pos = e76;
    let e77: vec2<i32> = ipos;
    ipos = vec2<i32>(0, 0);
    ipos = e77;
    indexable = e75;
    indexable = e75;
    param = e74;
    param = e72;
    pos = e69;
    let e78: vec2<i32> = param;
    param = vec2<i32>(0, 0);
    param = e78;
    let e79: vec2<i32> = ipos;
    ipos = e74;
    let e80: vec2<i32> = ipos;
    ipos = vec2<i32>(0, 0);
    ipos = e80;
    ipos = e79;
    let e81: i32 = v;
    let e82: i32 = w;
    w = 0;
    let e83: i32 = w;
    w = 0;
    w = e83;
    w = e82;
    v = e81;
    v = e81;
    let e85: f32 = pos[0u];
    let e87: i32 = i;
    i = 0;
    i = e87;
    let e88: i32 = w;
    w = 1;
    w = e88;
    let e89: i32 = i32((8.0 * e85));
    let e91: f32 = pos[1u];
    let e92: i32 = w;
    w = 0;
    w = e92;
    let e93: i32 = v;
    v = 0;
    v = e93;
    let e95: vec2<i32> = p1;
    p1 = vec2<i32>(0, 0);
    p1 = e95;
    let e96: array<vec4<f32>,16u> = indexable;
    let e97: array<vec4<f32>,16u> = indexable;
    let e98: i32 = i;
    i = 0;
    i = e98;
    indexable = array<vec4<f32>,16u>(vec4<f32>(0.0, 0.0, 0.0, 1.0), vec4<f32>(0.5, 0.0, 0.0, 1.0), vec4<f32>(0.0, 0.5, 0.0, 1.0), vec4<f32>(0.5, 0.5, 0.0, 1.0), vec4<f32>(0.0, 0.0, 0.5, 1.0), vec4<f32>(0.5, 0.0, 0.5, 1.0), vec4<f32>(0.0, 0.5, 0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(0.0, 0.0, 0.0, 1.0), vec4<f32>(1.0, 0.0, 0.0, 1.0), vec4<f32>(0.0, 1.0, 0.0, 1.0), vec4<f32>(1.0, 1.0, 0.0, 1.0), vec4<f32>(0.0, 0.0, 1.0, 1.0), vec4<f32>(1.0, 0.0, 1.0, 1.0), vec4<f32>(0.0, 1.0, 1.0, 1.0), vec4<f32>(1.0, 1.0, 1.0, 1.0));
    let e99: vec2<i32> = p1;
    p1 = vec2<i32>(0, 0);
    p1 = e99;
    indexable = e97;
    indexable = e96;
    indexable = e96;
    let e100: i32 = w;
    w = 0;
    w = e100;
    let e102: i32 = v;
    v = 0;
    v = e102;
    ipos = vec2<i32>(e89, i32((e91 * 8.0)));
    let e105: array<vec4<f32>,16u> = indexable;
    indexable = e96;
    let e106: vec2<f32> = pos;
    pos = vec2<f32>(0.0, 0.0);
    pos = e106;
    indexable = e105;
    let e107: i32 = ipos[0u];
    let e108: i32 = v;
    v = 0;
    v = e108;
    let e109: i32 = w;
    w = e66;
    w = e109;
    let e110: vec2<f32> = pos;
    pos = vec2<f32>(0.0, 0.0);
    pos = e110;
    let e111: i32 = (5 & e107);
    let e113: i32 = ipos[1u];
    let e114: i32 = ipos[1u];
    ipos[1u] = e107;
    let e115: i32 = v;
    v = 0;
    v = e115;
    ipos[1u] = e114;
    let e117: i32 = w;
    w = 0;
    w = e117;
    let e119: i32 = ipos[1u];
    ipos[1u] = 0;
    ipos[1u] = e119;
    v = ((e113 & 10) | e111);
    let e120: f32 = pos[1u];
    pos[1u] = 8.0;
    let e121: i32 = w;
    w = 0;
    w = e121;
    pos[1u] = e120;
    let e123: i32 = ipos[1u];
    ipos[1u] = e123;
    ipos[1u] = e123;
    let e124: i32 = ipos[1u];
    let e125: i32 = (e124 & 5);
    let e126: vec2<i32> = p1;
    p1 = vec2<i32>(0, 0);
    p1 = e126;
    let e128: array<vec4<f32>,16u> = indexable;
    indexable = array<vec4<f32>,16u>(vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0));
    indexable = e128;
    let e129: f32 = pos[0u];
    pos[0u] = 8.0;
    let e130: f32 = pos[0u];
    pos[0u] = 0.0;
    pos[0u] = e130;
    pos[0u] = e129;
    let e131: i32 = ipos[0u];
    let e132: f32 = pos[1u];
    pos[1u] = 0.0;
    pos[1u] = e132;
    let e133: i32 = (10 & e131);
    let e134: i32 = (e125 | e133);
    w = e134;
    let e135: i32 = i;
    i = 16;
    i = e135;
    let e136: i32 = v;
    let e138: f32 = pos[0u];
    pos[0u] = 0.0;
    pos[0u] = e138;
    let e139: i32 = w;
    let e140: vec2<i32> = param;
    param = e72;
    param = e140;
    let e141: i32 = i;
    i = 0;
    i = e141;
    let e142: i32 = ipos[1u];
    let e143: i32 = ipos[0u];
    ipos[0u] = 0;
    ipos[0u] = e143;
    let e144: i32 = ipos[1u];
    ipos[1u] = 10;
    ipos[1u] = e144;
    ipos[1u] = e134;
    let e145: vec2<i32> = param;
    param = vec2<i32>(0, 0);
    param = e145;
    ipos[1u] = e142;
    let e147: i32 = v;
    v = e111;
    v = e147;
    let e148: vec2<i32> = p1;
    p1 = vec2<i32>(0, 0);
    p1 = e148;
    let e149: i32 = ipos[1u];
    ipos[1u] = 1;
    let e150: i32 = w;
    w = e89;
    w = e150;
    ipos[1u] = e149;
    let e151: i32 = ipos[0u];
    ipos[0u] = 0;
    ipos[0u] = e151;
    let e153: f32 = pos[0u];
    pos[0u] = 0.0;
    pos[0u] = e153;
    p1 = vec2<i32>(((8 * e136) + e139), 0);
    let e154: i32 = ipos[1u];
    let e155: vec2<f32> = pos;
    let e156: array<vec4<f32>,16u> = indexable;
    indexable = array<vec4<f32>,16u>(vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0));
    indexable = e156;
    pos = e59;
    let e157: vec2<i32> = p1;
    p1 = e74;
    let e158: i32 = ipos[1u];
    ipos[1u] = 0;
    ipos[1u] = e158;
    let e159: array<vec4<f32>,16u> = indexable;
    indexable = array<vec4<f32>,16u>(vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(0.0, 0.0, 0.0, 0.0));
    let e160: f32 = pos[1u];
    pos[1u] = 0.0;
    pos[1u] = e160;
    indexable = e159;
    p1 = e157;
    pos = e155;
    ipos[1u] = 10;
    ipos[1u] = e154;
    i = 0;
    loop {
        let e161: i32 = i;
        if ((e161 < 100)) {
            let e163: vec2<f32> = pos;
            pos = vec2<f32>(0.0, 0.0);
            pos = e163;
            let e164: vec2<i32> = p1;
            let e165: i32 = ipos[1u];
            ipos[1u] = e161;
            ipos[1u] = e165;
            param = e164;
            let e166: i32 = ipos[0u];
            ipos[0u] = e133;
            ipos[0u] = e166;
            let e167: i32 = ipos[0u];
            ipos[0u] = 0;
            ipos[0u] = e167;
            let e168: f32 = pos[1u];
            pos[1u] = 0.0;
            pos[1u] = e168;
            let e169: i32 = ipos[0u];
            ipos[0u] = 0;
            ipos[0u] = e169;
            let e170: vec2<i32> = itervi2((&param));
            p1 = e170;
            continue;
        } else {
            break;
        }
        continuing {
            let e171: f32 = pos[1u];
            pos[1u] = 0.0;
            pos[1u] = e171;
            let e172: i32 = ipos[1u];
            ipos[1u] = e81;
            let e173: i32 = v;
            v = 0;
            v = e173;
            ipos[1u] = e172;
            let e174: vec2<f32> = pos;
            let e175: vec2<i32> = p1;
            p1 = e56;
            let e176: i32 = ipos[1u];
            ipos[1u] = 5;
            ipos[1u] = e176;
            p1 = e175;
            pos = e67;
            pos = e174;
            let e177: vec2<f32> = pos;
            pos = vec2<f32>(0.0, 0.0);
            pos = e177;
            let e178: i32 = i;
            i = (e178 + 1);
        }
    }
    let e181: i32 = v;
    v = 0;
    v = e181;
    let e182: vec2<i32> = p1;
    p1 = e182;
    p1 = e182;
    let e183: i32 = p1[0u];
    let e184: i32 = ipos[0u];
    ipos[0u] = e142;
    let e185: i32 = ipos[1u];
    ipos[1u] = 0;
    ipos[1u] = e185;
    ipos[0u] = e184;
    let e186: i32 = ipos[0u];
    ipos[0u] = 0;
    ipos[0u] = e186;
    let e188: f32 = pos[1u];
    let e189: vec2<i32> = ipos;
    ipos = vec2<i32>(0, 0);
    ipos = e189;
    pos[1u] = 1.0;
    pos[1u] = e188;
    if ((e183 < 0)) {
        let e190: vec2<i32> = ipos;
        ipos = e182;
        let e191: i32 = i;
        i = 0;
        i = e191;
        ipos = e190;
        let e192: vec2<i32> = ipos;
        ipos = vec2<i32>(0, 0);
        ipos = e192;
        let e194: vec2<f32> = pos;
        let e195: i32 = i;
        let e196: vec2<i32> = p1;
        p1 = vec2<i32>(0, 0);
        p1 = e196;
        i = 16;
        let e197: i32 = v;
        v = 10;
        v = e197;
        i = e195;
        pos = e69;
        pos = e194;
        let e198: i32 = p1[0u];
        p1[0u] = -(e198);
        let e201: i32 = p1[0u];
        p1[0u] = e198;
        p1[0u] = e201;
        let e202: i32 = p1[0u];
        p1[0u] = e184;
        let e203: vec2<i32> = ipos;
        ipos = vec2<i32>(0, 0);
        ipos = e203;
        p1[0u] = e202;
    }
    loop {
        let e204: i32 = ipos[0u];
        ipos[0u] = e125;
        let e205: f32 = pos[0u];
        pos[0u] = 0.0;
        pos[0u] = e205;
        ipos[0u] = e204;
        let e207: vec2<i32> = ipos;
        ipos = vec2<i32>(0, 0);
        ipos = e207;
        let e208: i32 = ipos[1u];
        ipos[1u] = e204;
        ipos[1u] = e208;
        let e209: vec2<f32> = pos;
        pos = vec2<f32>(0.0, 0.0);
        pos = e209;
        let e210: i32 = p1[0u];
        let e212: i32 = p1[0u];
        p1[0u] = 0;
        p1[0u] = e212;
        let e213: vec2<i32> = param;
        let e214: i32 = p1[0u];
        p1[0u] = 0;
        p1[0u] = e214;
        let e215: vec2<i32> = ipos;
        let e216: i32 = p1[0u];
        p1[0u] = 0;
        p1[0u] = e216;
        ipos = e215;
        let e217: array<vec4<f32>,16u> = indexable;
        indexable = e97;
        indexable = e217;
        ipos = e215;
        param = e182;
        let e218: i32 = ipos[0u];
        ipos[0u] = 0;
        ipos[0u] = e218;
        param = e213;
        if ((e210 > 15)) {
            let e220: f32 = pos[1u];
            pos[1u] = 0.0;
            pos[1u] = e220;
            let e221: i32 = p1[0u];
            let e222: f32 = pos[1u];
            let e223: i32 = ipos[0u];
            ipos[0u] = 0;
            ipos[0u] = e223;
            pos[1u] = e188;
            pos[1u] = e222;
            let e224: i32 = ipos[0u];
            ipos[0u] = 0;
            ipos[0u] = e224;
            p1[0u] = (e221 - 16);
            let e227: i32 = ipos[0u];
            let e228: i32 = p1[0u];
            p1[0u] = 0;
            p1[0u] = e228;
            ipos[0u] = e139;
            let e229: vec2<i32> = param;
            param = e213;
            param = e229;
            ipos[0u] = e227;
            let e230: vec2<i32> = param;
            param = vec2<i32>(0, 0);
            param = e230;
            continue;
        } else {
            break;
        }
    }
    let e232: i32 = ipos[0u];
    ipos[0u] = 10;
    ipos[0u] = e232;
    let e233: i32 = ipos[1u];
    ipos[1u] = e131;
    ipos[1u] = e233;
    let e234: i32 = p1[0u];
    indexable = array<vec4<f32>,16u>(vec4<f32>(0.0, 0.0, 0.0, 1.0), vec4<f32>(0.5, 0.0, 0.0, 1.0), vec4<f32>(0.0, 0.5, 0.0, 1.0), vec4<f32>(0.5, 0.5, 0.0, 1.0), vec4<f32>(0.0, 0.0, 0.5, 1.0), vec4<f32>(0.5, 0.0, 0.5, 1.0), vec4<f32>(0.0, 0.5, 0.5, 1.0), vec4<f32>(0.5, 0.5, 0.5, 1.0), vec4<f32>(0.0, 0.0, 0.0, 1.0), vec4<f32>(1.0, 0.0, 0.0, 1.0), vec4<f32>(0.0, 1.0, 0.0, 1.0), vec4<f32>(1.0, 1.0, 0.0, 1.0), vec4<f32>(0.0, 0.0, 1.0, 1.0), vec4<f32>(1.0, 0.0, 1.0, 1.0), vec4<f32>(0.0, 1.0, 1.0, 1.0), vec4<f32>(1.0, 1.0, 1.0, 1.0));
    let e236: i32 = ipos[1u];
    ipos[1u] = 0;
    ipos[1u] = e236;
    let e237: vec4<f32> = indexable[e234];
    let e238: vec4<f32> = indexable[e234];
    indexable[e234] = vec4<f32>(0.0, 0.0, 0.0, 0.0);
    indexable[e234] = e238;
    GLF_color = e237;
    let e239: f32 = pos[0u];
    let e240: f32 = pos[1u];
    pos[1u] = e129;
    pos[1u] = e240;
    pos[0u] = e91;
    pos[0u] = e239;
    let e241: f32 = pos[0u];
    pos[0u] = 0.0;
    pos[0u] = e241;
    let e242: i32 = p1[0u];
    p1[0u] = 16;
    p1[0u] = e242;
    return;
}

[[stage(fragment)]]
fn main([[builtin(position)]] gl_FragCoord: vec4<f32>) -> [[location(0)]] vec4<f32> {
    gl_FragCoord1 = gl_FragCoord;
    main1();
    let e3: vec4<f32> = GLF_color;
    return e3;
}
