var<private> gl_FragCoord1: vec4<f32>;
var<private> color: vec4<f32>;

fn main1() {
    var row: f32;
    var vector_1: vec3<f32>;
    var scalar: f32;
    var column: f32;
    var vector_2: vec3<f32>;
    var matrix_1: mat3x3<f32>;
    var matrix_2: mat3x3<f32>;

    let e20: f32 = gl_FragCoord1[0u];
    row = f32((1 + (i32(e20) / 16)));
    let e26: f32 = gl_FragCoord1[1u];
    column = f32((1 + (i32(e26) / 16)));
    scalar = 1.0;
    let e31: f32 = scalar;
    scalar = (1.0 + e31);
    let e33: f32 = row;
    let e35: f32 = scalar;
    scalar = (e35 + 1.0);
    let e37: f32 = column;
    let e39: f32 = scalar;
    scalar = (e39 + 1.0);
    let e41: f32 = row;
    let e43: f32 = column;
    vector_1 = vec3<f32>((e33 * e31), (e37 * e35), (e43 * (e41 * e39)));
    let e46: f32 = scalar;
    scalar = (e46 + 1.0);
    let e48: f32 = row;
    let e50: f32 = scalar;
    scalar = (1.0 + e50);
    let e52: f32 = column;
    let e54: f32 = scalar;
    scalar = (1.0 + e54);
    let e56: f32 = row;
    let e58: f32 = column;
    vector_2 = vec3<f32>((e46 * e48), (e50 * e52), ((e56 * e54) * e58));
    let e61: f32 = scalar;
    scalar = (e61 + 1.0);
    let e63: f32 = row;
    let e65: f32 = scalar;
    scalar = (e65 + 1.0);
    let e67: f32 = column;
    let e69: f32 = scalar;
    scalar = (e69 + 1.0);
    let e71: f32 = row;
    let e73: f32 = column;
    let e75: f32 = scalar;
    scalar = (1.0 + e75);
    let e77: f32 = row;
    let e79: f32 = scalar;
    scalar = (1.0 + e79);
    let e81: f32 = column;
    let e83: f32 = scalar;
    scalar = (e83 + 1.0);
    let e85: f32 = row;
    let e87: f32 = column;
    let e89: f32 = scalar;
    scalar = (e89 + 1.0);
    let e91: f32 = row;
    let e93: f32 = scalar;
    scalar = (e93 + 1.0);
    let e95: f32 = column;
    let e97: f32 = scalar;
    scalar = (1.0 + e97);
    let e99: f32 = row;
    let e101: f32 = column;
    matrix_1 = mat3x3<f32>(vec3<f32>((e61 * e63), (e67 * e65), ((e71 * e69) * e73)), vec3<f32>((e75 * e77), (e79 * e81), (e87 * (e83 * e85))), vec3<f32>((e91 * e89), (e93 * e95), ((e97 * e99) * e101)));
    let e107: f32 = scalar;
    scalar = (e107 + 1.0);
    let e109: f32 = row;
    let e111: f32 = scalar;
    scalar = (1.0 + e111);
    let e113: f32 = column;
    let e115: f32 = scalar;
    scalar = (1.0 + e115);
    let e117: f32 = row;
    let e119: f32 = column;
    let e121: f32 = scalar;
    scalar = (e121 + 1.0);
    let e123: f32 = row;
    let e125: f32 = scalar;
    scalar = (e125 + 1.0);
    let e127: f32 = column;
    let e129: f32 = scalar;
    scalar = (e129 + 1.0);
    let e131: f32 = row;
    let e133: f32 = column;
    let e135: f32 = scalar;
    scalar = (1.0 + e135);
    let e137: f32 = row;
    let e139: f32 = scalar;
    scalar = (e139 + 1.0);
    let e141: f32 = column;
    let e143: f32 = scalar;
    scalar = (e143 + 1.0);
    let e145: f32 = row;
    let e147: f32 = column;
    matrix_2 = mat3x3<f32>(vec3<f32>((e109 * e107), (e113 * e111), (e119 * (e115 * e117))), vec3<f32>((e121 * e123), (e127 * e125), (e133 * (e131 * e129))), vec3<f32>((e135 * e137), (e139 * e141), (e147 * (e145 * e143))));
    let e153: f32 = scalar;
    scalar = (1.0 + e153);
    let e155: vec3<f32> = vector_1;
    let e156: vec3<f32> = (e155 * e153);
    let e157: vec4<f32> = color;
    color = vec4<f32>(e156.x, e156.y, e156.z, e157.w);
    let e163: f32 = scalar;
    scalar = (1.0 + e163);
    let e165: mat3x3<f32> = matrix_1;
    let e167: vec4<f32> = color;
    let e169: vec3<f32> = (e167.xyz * (e165 * e163));
    let e170: vec4<f32> = color;
    color = vec4<f32>(e169.x, e169.y, e169.z, e170.w);
    let e176: vec3<f32> = vector_1;
    let e177: mat3x3<f32> = matrix_1;
    let e179: vec4<f32> = color;
    let e181: vec3<f32> = (e179.xyz + (e176 * e177));
    let e182: vec4<f32> = color;
    color = vec4<f32>(e181.x, e181.y, e181.z, e182.w);
    let e188: mat3x3<f32> = matrix_1;
    let e189: vec3<f32> = vector_1;
    let e191: vec4<f32> = color;
    let e193: vec3<f32> = ((e188 * e189) + e191.xyz);
    let e194: vec4<f32> = color;
    color = vec4<f32>(e193.x, e193.y, e193.z, e194.w);
    let e200: mat3x3<f32> = matrix_1;
    let e201: mat3x3<f32> = matrix_2;
    let e203: vec4<f32> = color;
    let e205: vec3<f32> = (e203.xyz * (e200 * e201));
    let e206: vec4<f32> = color;
    color = vec4<f32>(e205.x, e205.y, e205.z, e206.w);
    let e212: vec3<f32> = vector_1;
    let e213: vec3<f32> = vector_2;
    let e215: vec4<f32> = color;
    let e217: vec3<f32> = (e215.xyz * outerProduct(e212, e213));
    let e218: vec4<f32> = color;
    color = vec4<f32>(e217.x, e217.y, e217.z, e218.w);
    let e224: vec3<f32> = vector_1;
    let e225: vec3<f32> = vector_2;
    let e227: vec4<f32> = color;
    let e229: vec3<f32> = (e227.xyz * dot(e225, e224));
    let e230: vec4<f32> = color;
    color = vec4<f32>(e229.x, e229.y, e229.z, e230.w);
    let e236: vec4<f32> = color;
    let e238: vec3<f32> = sin(e236.xyz);
    color = vec4<f32>(e238.x, e238.y, e238.z, 1.0);
    return;
}

[[stage(fragment)]]
fn main([[builtin(position)]] gl_FragCoord: vec4<f32>) -> [[location(0)]] vec4<f32> {
    gl_FragCoord1 = gl_FragCoord;
    main1();
    let e3: vec4<f32> = color;
    return e3;
}
