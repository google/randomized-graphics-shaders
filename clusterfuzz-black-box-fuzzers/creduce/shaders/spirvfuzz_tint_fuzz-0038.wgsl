[[block]]
struct buf0 {
  resolution : vec2<f32>;
};

[[group(0), binding(0)]] var<uniform> x_39 : buf0;

var<private> gl_FragCoord : vec4<f32>;

var<private> x_GLF_color : vec4<f32>;

fn main_1() {
  var data : array<vec3<f32>, 16u>;
  var x_752 : vec3<f32>;
  var x_570 : vec3<f32>;
  var x_753 : vec2<f32>;
  var x_754 : vec2<f32>;
  var x_363 : vec3<f32>;
  var x_644 : vec3<f32>;
  var x_361_phi : i32;
  var x_363_phi : vec3<f32>;
  var x_362_phi : i32;
  let x_751 : vec2<f32> = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).x, vec3<f32>(0.0625, 0.0625, 0.0625).z);
  x_361_phi = 0;
  loop {
    var x_572 : vec3<f32>;
    var x_755 : vec3<f32>;
    var x_573 : vec3<f32>;
    var x_757 : vec2<f32>;
    var x_569 : i32;
    var x_364_phi : i32;
    let x_361 : i32 = x_361_phi;
    x_752 = vec3<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).z, vec3<f32>(0.0625, 0.0625, 0.0625).x, vec3<f32>(0.0625, 0.0625, 0.0625).z);
    x_570 = vec3<f32>(vec3<f32>(0.0, 0.0, 0.0).z, vec3<f32>(0.0, 0.0, 0.0).y, vec3<f32>(0.0, 0.0, 0.0).z);
    x_753 = vec2<f32>(x_570.y, x_751.x);
    x_754 = vec2<f32>(vec3<f32>(0.0, 0.0, 0.0).z, x_752.z);
    if ((x_361 < 4)) {
    } else {
      break;
    }
    let x_571 : vec3<f32> = vec3<f32>(vec3<f32>(0.0, 0.0, 0.0).z, vec3<f32>(0.0, 0.0, 0.0).y, vec3<f32>(0.0, 0.0, 0.0).y);
    x_364_phi = 0;
    loop {
      var x_779 : vec2<f32>;
      var x_587 : vec3<i32>;
      var x_671 : vec4<f32>;
      var x_786 : vec3<f32>;
      var x_680 : vec2<f32>;
      var x_681 : vec2<f32>;
      var x_590 : vec2<f32>;
      var x_512 : vec2<f32>;
      var x_513 : vec4<f32>;
      var x_519 : vec2<f32>;
      var x_802 : vec3<f32>;
      var x_803 : vec3<i32>;
      var x_596 : vec2<f32>;
      var x_598 : vec2<i32>;
      var x_811 : vec3<f32>;
      var x_603 : vec3<f32>;
      var x_820 : vec3<f32>;
      var x_694 : vec2<f32>;
      var x_822 : vec3<f32>;
      var x_360 : vec3<f32>;
      var x_345 : vec3<f32>;
      var x_932 : i32;
      var x_377_phi : vec3<f32>;
      let x_364 : i32 = x_364_phi;
      x_572 = vec3<f32>(x_571.y, vec3<f32>(0.0, 0.0, 0.0).z, vec3<f32>(0.0, 0.0, 0.0).x);
      x_755 = vec3<f32>(x_753.x, x_753.x, x_752.z);
      let x_756 : vec2<f32> = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).y, x_571.y);
      x_573 = vec3<f32>(x_571.z, vec3<f32>(0.0625, 0.0625, 0.0625).x, x_571.x);
      x_757 = vec2<f32>(x_572.x, x_572.y);
      if ((x_364 < bitcast<i32>(4u))) {
      } else {
        break;
      }
      var x_758 : vec3<f32>;
      var x_663 : vec2<i32>;
      var x_664 : vec2<i32>;
      var x_496 : vec3<i32>;
      var x_760 : vec2<f32>;
      var x_498 : vec3<i32>;
      var x_499 : vec3<i32>;
      var x_763 : vec3<i32>;
      var x_576 : vec3<f32>;
      var x_577 : vec3<i32>;
      var x_670 : vec3<f32>;
      var x_767 : vec2<f32>;
      var x_768 : vec2<i32>;
      var x_578 : vec3<i32>;
      var x_579 : vec3<f32>;
      var x_580 : vec3<i32>;
      var x_581 : vec3<i32>;
      var x_772 : vec3<i32>;
      var x_501 : vec3<i32>;
      var x_502 : vec3<i32>;
      var x_582 : vec2<f32>;
      var x_773 : vec2<f32>;
      var x_775 : vec3<i32>;
      var x_584 : vec2<f32>;
      var x_505 : vec3<f32>;
      var x_506 : vec3<f32>;
      var x_196 : f32;
      var x_777 : vec2<f32>;
      var x_585 : vec2<i32>;
      var x_371 : i32;
      var x_371_phi : i32;
      var x_368_phi : f32;
      var x_367_phi : f32;
      var x_366_phi : i32;
      let x_574 : vec3<f32> = vec3<f32>(vec3<f32>(0.0, 0.0, 0.0).x, vec3<f32>(0.0625, 0.0625, 0.0625).x, vec3<f32>(0.0625, 0.0625, 0.0625).y);
      let x_662 : vec2<i32> = vec2<i32>(0, 4);
      x_758 = vec3<f32>(x_572.y, x_755.z, x_572.x);
      x_663 = vec2<i32>(0, x_364);
      x_664 = (x_662 * bitcast<vec2<i32>>(x_663));
      let x_759 : vec3<f32> = vec3<f32>(x_751.x, x_751.y, x_751.y);
      let x_178 : i32 = bitcast<i32>((4u * bitcast<u32>(x_364)));
      x_496 = vec3<i32>(0, 0, x_664.y);
      x_760 = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).y, x_758.x);
      let x_575 : vec2<f32> = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).y, x_572.y);
      x_498 = vec3<i32>(0, 0, x_361);
      let x_761 : vec3<f32> = vec3<f32>(x_759.z, x_759.x, x_759.z);
      x_499 = bitcast<vec3<i32>>((x_496 + x_498));
      let x_563 : i32 = x_498.z;
      let x_762 : vec2<f32> = vec2<f32>(x_570.z, x_570.x);
      let x_747 : i32 = x_498.z;
      x_763 = vec3<i32>(x_498.x, x_498.z, x_498.z);
      let x_940 : vec4<i32> = (vec4<i32>(0, x_178, 0, 0) + vec4<i32>(0, x_747, 0, 0));
      let x_180 : i32 = (x_178 + x_747);
      x_576 = vec3<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).y, vec3<f32>(0.0, 0.0, 0.0).z, vec3<f32>(0.0625, 0.0625, 0.0625).z);
      let x_186 : f32 = gl_FragCoord.x;
      let x_764 : vec3<i32> = vec3<i32>(x_763.z, x_763.y, x_663.y);
      let x_665 : vec4<i32> = vec4<i32>(x_498.z, 0, 0, 0);
      let x_765 : vec3<i32> = vec3<i32>(x_496.z, x_496.y, x_764.x);
      let x_666 : vec4<i32> = vec4<i32>(1, 0, 0, 0);
      let x_766 : vec2<i32> = vec2<i32>(x_664.x, x_665.w);
      let x_667 : vec4<i32> = (x_665 - x_666);
      let x_943 : vec4<i32> = (vec4<i32>(0, 0, 0, x_361) - vec4<i32>(0, 0, 0, 1));
      x_577 = vec3<i32>(x_499.x, x_499.x, x_499.z);
      let x_189 : f32 = f32((x_361 - bitcast<i32>(1u)));
      let x_669 : vec3<f32> = vec3<f32>(0.0, x_189, 0.0);
      x_670 = (vec3<f32>(0.0, x_186, 0.0) + x_669);
      x_767 = vec2<f32>(x_751.x, x_751.y);
      let x_190 : f32 = (x_186 + x_189);
      x_768 = vec2<i32>(x_667.y, x_667.y);
      x_578 = vec3<i32>(x_498.z, x_577.x, x_498.y);
      let x_769 : vec3<f32> = vec3<f32>(x_753.y, x_753.x, x_751.x);
      x_579 = vec3<f32>(x_573.y, x_573.y, x_573.y);
      let x_192 : f32 = gl_FragCoord.y;
      x_580 = vec3<i32>(x_498.y, x_496.z, x_498.x);
      let x_770 : vec3<i32> = vec3<i32>(x_578.y, x_578.x, x_765.y);
      let x_500 : vec3<i32> = vec3<i32>(x_364, 0, 0);
      let x_771 : vec2<f32> = vec2<f32>(x_574.z, x_574.y);
      x_581 = vec3<i32>(x_578.y, x_578.x, x_496.x);
      x_772 = vec3<i32>(x_662.x, x_580.x, x_662.y);
      x_501 = vec3<i32>(1, 0, 0);
      x_502 = (x_500 - bitcast<vec3<i32>>(x_501));
      x_582 = vec2<f32>(vec3<f32>(0.0, 0.0, 0.0).z, x_575.y);
      x_773 = vec2<f32>(x_767.y, x_767.x);
      let x_654 : i32 = x_500.x;
      let x_946 : vec4<i32> = (vec4<i32>(0, 0, 0, x_654) - vec4<i32>(0, 0, 0, 1));
      let x_774 : vec3<f32> = vec3<f32>(x_573.x, x_573.y, x_576.y);
      let x_583 : vec3<i32> = vec3<i32>(x_580.x, x_502.x, x_580.y);
      let x_195 : f32 = f32((x_654 - 1));
      let x_504 : vec3<f32> = vec3<f32>(0.0, 0.0, x_192);
      x_775 = vec3<i32>(x_666.y, x_666.x, x_666.w);
      x_584 = vec2<f32>(x_504.y, x_760.y);
      x_505 = vec3<f32>(0.0, 0.0, x_195);
      x_506 = (x_504 + x_505);
      let x_776 : vec3<f32> = vec3<f32>(x_752.y, x_752.x, x_752.x);
      let x_949 : vec2<f32> = (vec2<f32>(0.0, x_192) + vec2<f32>(0.0, x_195));
      x_196 = (x_192 + x_195);
      x_777 = vec2<f32>(x_769.y, x_769.z);
      x_585 = vec2<i32>(x_578.y, x_578.x);
      let x_778 : vec3<f32> = vec3<f32>(x_669.z, x_572.y, x_669.x);
      switch(0u) {
        default: {
          x_779 = vec2<f32>(x_767.x, x_762.y);
          let x_780 : vec3<f32> = vec3<f32>(x_575.x, x_777.y, x_777.x);
          let x_586 : vec2<f32> = vec2<f32>(x_576.z, x_576.y);
          let x_781 : vec3<i32> = vec3<i32>(x_496.x, x_496.z, x_496.y);
          let x_262 : f32 = x_39.resolution.y;
          let x_782 : vec3<f32> = vec3<f32>(x_754.y, x_776.y, x_776.z);
          x_587 = vec3<i32>(x_502.x, x_502.x, x_499.x);
          let x_264 : f32 = x_39.resolution.x;
          let x_507 : vec3<f32> = vec3<f32>(0.0, 0.0, x_190);
          let x_508 : vec3<f32> = vec3<f32>(0.0, 0.0, 0.100000001);
          let x_783 : vec2<f32> = vec2<f32>(x_782.x, x_782.y);
          let x_509 : vec3<f32> = (x_507 * x_508);
          x_671 = vec4<f32>(0.0, 0.0, 0.0, x_190);
          let x_784 : vec3<f32> = vec3<f32>(x_762.x, x_579.x, x_579.y);
          let x_672 : vec4<f32> = vec4<f32>(0.0, 0.0, 0.0, 0.100000001);
          let x_785 : vec2<f32> = vec2<f32>(x_586.x, x_586.y);
          let x_673 : vec4<f32> = (x_671 * x_672);
          let x_952 : vec3<f32> = (vec3<f32>(0.0, 0.0, x_190) * vec3<f32>(0.0, 0.0, 0.100000001));
          let x_266 : f32 = (x_190 * 0.100000001);
          x_786 = vec3<f32>(x_751.x, x_751.x, x_575.y);
          let x_588 : vec3<f32> = vec3<f32>(x_509.y, x_575.y, x_509.y);
          let x_674 : vec2<f32> = vec2<f32>(x_264, 0.0);
          let x_787 : vec2<i32> = vec2<i32>(x_581.z, x_581.z);
          let x_676 : vec2<f32> = (x_674 * vec2<f32>(0.600000024, 0.0));
          let x_788 : vec3<i32> = vec3<i32>(x_766.y, x_766.x, x_768.x);
          let x_677 : vec3<f32> = vec3<f32>(0.0, x_266, 0.0);
          let x_678 : vec3<f32> = vec3<f32>(0.0, x_676.x, 0.0);
          let x_789 : vec2<f32> = vec2<f32>(x_774.z, x_774.x);
          let x_679 : vec3<f32> = (x_677 + x_678);
          let x_790 : vec3<f32> = vec3<f32>(x_509.x, x_509.z, x_579.y);
          let x_589 : vec2<f32> = vec2<f32>(x_571.y, x_507.z);
          let x_791 : vec2<i32> = vec2<i32>(x_662.x, x_662.y);
          let x_736 : f32 = x_506.z;
          x_680 = vec2<f32>(0.0, x_506.z);
          x_681 = vec2<f32>(0.0, 0.100000001);
          let x_792 : vec3<f32> = vec3<f32>(x_777.x, x_777.x, x_777.x);
          let x_682 : vec2<f32> = (x_680 * x_681);
          let x_272 : f32 = (x_196 * 0.100000001);
          x_590 = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).z, x_575.y);
          let x_510 : vec2<f32> = vec2<f32>(0.0, x_262);
          let x_511 : vec2<f32> = vec2<f32>(0.0, 0.400000006);
          let x_793 : vec3<f32> = vec3<f32>(x_769.x, x_574.z, x_574.x);
          let x_591 : vec3<i32> = vec3<i32>(x_583.y, x_583.z, x_587.x);
          x_512 = (x_510 * x_511);
          let x_955 : vec4<f32> = (vec4<f32>(0.0, x_262, 0.0, 0.0) * vec4<f32>(0.0, 0.400000006, 0.0, 0.0));
          let x_794 : vec3<f32> = vec3<f32>(x_505.z, x_570.y, x_570.y);
          x_513 = vec4<f32>(0.0, x_264, 0.0, 0.0);
          let x_795 : vec2<i32> = vec2<i32>(x_775.y, x_775.z);
          let x_592 : vec2<f32> = vec2<f32>(x_509.y, x_508.z);
          let x_514 : vec4<f32> = vec4<f32>(0.0, 0.5, 0.0, 0.0);
          let x_796 : vec2<f32> = vec2<f32>(x_570.y, x_571.y);
          let x_515 : vec4<f32> = (x_513 * x_514);
          let x_797 : vec2<i32> = vec2<i32>(x_580.y, x_580.x);
          let x_279 : f32 = (x_264 * x_514.y);
          let x_798 : vec3<i32> = vec3<i32>(x_766.y, x_766.x, x_766.y);
          let x_516 : vec3<f32> = vec3<f32>(0.0, 0.0, (x_266 + (x_264 * 0.600000024)));
          let x_593 : vec3<f32> = vec3<f32>(x_507.y, vec3<f32>(0.0625, 0.0625, 0.0625).x, x_507.z);
          let x_799 : vec3<i32> = vec3<i32>(x_587.z, x_578.x, x_587.z);
          let x_517 : vec3<f32> = vec3<f32>(0.0, 0.0, x_515.y);
          let x_518 : vec3<f32> = (x_516 - x_517);
          let x_656 : f32 = x_516.z;
          let x_280 : f32 = (x_516.z - x_515.y);
          let x_800 : vec2<f32> = vec2<f32>(x_505.x, x_505.z);
          let x_801 : vec2<i32> = vec2<i32>(x_766.x, x_787.x);
          x_519 = vec2<f32>(x_518.z, 0.0);
          x_802 = vec3<f32>(x_516.y, x_516.z, x_516.z);
          let x_594 : vec3<f32> = vec3<f32>(vec3<f32>(0.0, 0.0, 0.0).x, x_590.y, vec3<f32>(0.0, 0.0, 0.0).x);
          x_803 = vec3<i32>(x_587.x, x_781.y, x_587.y);
          let x_520 : vec2<f32> = vec2<f32>(3.200000048, 0.0);
          let x_804 : vec2<f32> = vec2<f32>(x_800.x, x_670.x);
          let x_805 : vec2<f32> = vec2<f32>(x_516.z, x_516.y);
          let x_282 : f32 = (x_519.x * 3.200000048);
          let x_595 : vec2<f32> = vec2<f32>(x_513.x, x_513.z);
          let x_284 : f32 = (((x_519 * x_520)).x / x_264);
          x_596 = vec2<f32>(x_584.y, x_593.y);
          let x_806 : vec2<f32> = vec2<f32>(x_589.x, x_777.y);
          let x_683 : vec3<f32> = vec3<f32>(0.0, 0.0, x_284);
          let x_684 : vec3<f32> = vec3<f32>(0.0, 0.0, 0.400000006);
          let x_685 : vec3<f32> = (x_683 - x_684);
          let x_807 : vec2<f32> = vec2<f32>(x_757.x, x_758.y);
          let x_958 : vec2<f32> = (vec2<f32>(x_284, 0.0) - vec2<f32>(0.400000006, 0.0));
          let x_285 : f32 = (x_284 - 0.400000006);
          let x_655 : f32 = x_514.y;
          let x_686 : vec3<f32> = vec3<f32>(0.0, 0.0, x_262);
          let x_808 : vec2<f32> = vec2<f32>(x_507.x, x_507.z);
          let x_687 : vec3<f32> = vec3<f32>(0.0, 0.0, x_655);
          let x_288 : f32 = (x_510.y * x_655);
          let x_809 : vec2<i32> = vec2<i32>(x_791.y, x_791.x);
          let x_597 : vec3<i32> = vec3<i32>(x_578.z, x_578.y, x_578.z);
          let x_810 : vec3<i32> = vec3<i32>(x_798.x, x_798.x, x_798.x);
          let x_522 : vec2<f32> = vec2<f32>((x_682.y + (x_262 * 0.400000006)), 0.0);
          x_598 = vec2<i32>(x_500.x, x_583.x);
          x_811 = vec3<f32>(x_574.y, x_574.y, x_574.y);
          let x_523 : vec2<f32> = vec2<f32>(((x_686 * x_687)).z, 0.0);
          let x_524 : vec2<f32> = (x_522 - x_523);
          let x_812 : vec2<f32> = vec2<f32>(x_767.y, x_673.w);
          let x_599 : vec3<f32> = vec3<f32>(x_571.x, x_516.y, x_571.x);
          let x_813 : vec2<f32> = vec2<f32>(x_687.y, x_687.x);
          let x_600 : vec3<f32> = vec3<f32>(x_574.y, x_574.x, x_574.x);
          let x_814 : vec3<f32> = vec3<f32>(x_680.x, x_680.y, x_575.y);
          let x_815 : vec3<f32> = vec3<f32>(x_676.x, x_752.y, x_752.y);
          let x_691 : vec3<f32> = (vec3<f32>(0.0, 0.0, x_522.x) - vec3<f32>(0.0, 0.0, x_288));
          let x_289 : f32 = (x_522.x - x_288);
          let x_816 : vec2<f32> = vec2<f32>(x_813.y, x_815.x);
          let x_601 : vec2<f32> = vec2<f32>(x_592.x, x_575.x);
          let x_817 : vec3<f32> = vec3<f32>(x_570.x, x_570.x, x_570.y);
          let x_602 : vec3<f32> = vec3<f32>(x_512.y, x_510.y, x_512.x);
          let x_527 : vec3<f32> = (vec3<f32>(0.0, 0.0, x_289) * vec3<f32>(0.0, 0.0, 3.200000048));
          x_603 = vec3<f32>(x_516.y, x_584.x, x_516.x);
          let x_818 : vec2<f32> = vec2<f32>(x_520.y, x_677.z);
          let x_657 : f32 = x_520.x;
          let x_819 : vec3<f32> = vec3<f32>(x_573.x, x_594.x, x_594.y);
          x_820 = vec3<f32>(x_676.x, x_596.x, x_676.x);
          x_694 = (vec2<f32>(x_289, 0.0) * vec2<f32>(x_520.x, 0.0));
          let x_821 : vec2<f32> = vec2<f32>(x_677.y, x_594.x);
          let x_961 : vec4<f32> = (vec4<f32>(0.0, 0.0, x_289, 0.0) * vec4<f32>(0.0, 0.0, x_657, 0.0));
          x_822 = vec3<f32>(x_685.z, x_685.y, x_755.y);
          let x_823 : vec2<f32> = vec2<f32>(x_671.z, x_671.x);
          let x_293 : f32 = ((x_289 * x_657) / x_513.y);
          let x_824 : vec3<f32> = vec3<f32>(x_602.x, x_752.z, x_752.x);
          let x_604 : vec2<i32> = vec2<i32>(x_597.z, x_597.y);
          let x_825 : vec2<i32> = vec2<i32>(x_583.y, x_583.x);
          x_371_phi = 0;
          x_368_phi = 0.0;
          x_367_phi = 0.0;
          x_366_phi = 0;
          loop {
            var x_745 : f32;
            var x_936 : i32;
            x_371 = x_371_phi;
            let x_368 : f32 = x_368_phi;
            let x_367 : f32 = x_367_phi;
            let x_366 : i32 = x_366_phi;
            let x_826 : vec2<f32> = vec2<f32>(x_800.y, x_800.y);
            let x_605 : vec2<f32> = vec2<f32>(x_582.x, x_572.y);
            let x_827 : vec2<f32> = vec2<f32>(x_773.y, x_773.y);
            if ((x_366 < bitcast<i32>(1000u))) {
            } else {
              break;
            }
            let x_828 : vec3<f32> = vec3<f32>(x_821.x, x_821.x, x_517.y);
            let x_695 : vec2<f32> = vec2<f32>(x_367, 0.0);
            let x_697 : vec2<f32> = (x_695 * vec2<f32>(x_367, 0.0));
            let x_301 : f32 = (x_367 * x_367);
            let x_606 : vec2<f32> = vec2<f32>(x_505.y, x_512.y);
            let x_528 : vec4<f32> = vec4<f32>(x_368, 0.0, 0.0, 0.0);
            let x_607 : vec2<f32> = vec2<f32>(x_576.x, x_589.x);
            let x_829 : vec2<i32> = vec2<i32>(x_666.x, x_663.x);
            let x_529 : vec4<f32> = vec4<f32>(x_368, 0.0, 0.0, 0.0);
            let x_608 : vec2<f32> = vec2<f32>(x_512.y, x_573.x);
            let x_530 : vec4<f32> = (x_528 * x_529);
            let x_609 : vec2<f32> = vec2<f32>(x_602.x, x_602.x);
            let x_658 : f32 = x_528.x;
            let x_659 : f32 = x_528.x;
            let x_830 : vec3<f32> = vec3<f32>(x_518.z, x_518.x, x_518.z);
            let x_698 : vec2<f32> = vec2<f32>(0.0, x_658);
            let x_831 : vec2<f32> = vec2<f32>(x_571.y, x_571.y);
            let x_700 : vec2<f32> = (x_698 * vec2<f32>(0.0, x_659));
            let x_832 : vec3<f32> = vec3<f32>(x_681.x, x_602.z, x_681.x);
            let x_964 : vec4<f32> = (vec4<f32>(0.0, x_658, 0.0, 0.0) * vec4<f32>(0.0, x_659, 0.0, 0.0));
            let x_304 : f32 = (x_658 * x_659);
            let x_833 : vec2<f32> = vec2<f32>(x_821.y, x_694.y);
            let x_610 : vec2<f32> = vec2<f32>(x_530.x, x_530.w);
            let x_834 : vec2<i32> = vec2<i32>(x_795.y, x_663.x);
            let x_531 : vec2<f32> = vec2<f32>(0.0, x_301);
            let x_611 : vec2<f32> = vec2<f32>(x_596.x, x_511.x);
            let x_835 : vec2<i32> = vec2<i32>(x_763.z, x_763.z);
            let x_532 : vec2<f32> = vec2<f32>(0.0, x_610.x);
            let x_836 : vec2<i32> = vec2<i32>(x_768.x, x_801.y);
            let x_533 : vec2<f32> = (x_531 + x_532);
            let x_837 : vec2<f32> = vec2<f32>(x_582.y, x_683.y);
            let x_838 : vec2<i32> = vec2<i32>(x_772.y, x_585.x);
            let x_839 : vec3<f32> = vec3<f32>(x_682.x, x_682.x, x_691.x);
            let x_840 : vec2<f32> = vec2<f32>(x_823.y, x_823.x);
            let x_703 : vec3<f32> = (vec3<f32>(x_531.y, 0.0, 0.0) + vec3<f32>(x_304, 0.0, 0.0));
            let x_841 : vec2<i32> = vec2<i32>(x_500.z, x_500.x);
            let x_929 : f32 = x_532.y;
            let x_967 : vec2<f32> = (vec2<f32>(x_301, 0.0) + vec2<f32>(x_929, 0.0));
            let x_305 : f32 = (x_301 + x_929);
            let x_842 : vec3<i32> = vec3<i32>(x_587.y, x_587.z, x_587.z);
            let x_612 : vec2<i32> = vec2<i32>(x_581.y, x_498.y);
            if ((x_533.y > 4.0)) {
              let x_843 : vec2<f32> = vec2<f32>(x_678.x, x_678.x);
              break;
            }
            let x_844 : vec3<f32> = vec3<f32>(x_672.x, x_672.y, x_672.z);
            let x_845 : vec3<f32> = vec3<f32>(x_760.x, x_760.x, x_808.x);
            let x_970 : vec2<f32> = (vec2<f32>(x_301, 0.0) - vec2<f32>(x_304, 0.0));
            let x_315 : f32 = (x_301 - x_304);
            let x_534 : vec3<f32> = vec3<f32>(0.0, x_315, 0.0);
            let x_846 : vec3<f32> = vec3<f32>(x_833.x, x_529.z, x_529.w);
            let x_613 : vec3<f32> = vec3<f32>(x_579.y, x_579.y, x_589.y);
            let x_847 : vec2<f32> = vec2<f32>(x_520.x, x_832.z);
            let x_614 : vec2<f32> = vec2<f32>(x_530.y, x_530.z);
            let x_848 : vec3<i32> = vec3<i32>(x_798.z, x_798.x, x_798.x);
            let x_536 : vec3<f32> = (x_534 + vec3<f32>(0.0, x_285, 0.0));
            let x_849 : vec2<f32> = vec2<f32>(x_839.z, x_839.y);
            let x_615 : vec3<f32> = vec3<f32>(x_511.x, x_518.z, x_518.z);
            let x_743 : f32 = ((vec4<f32>(0.0, x_697.x, 0.0, 0.0) - vec4<f32>(0.0, x_304, 0.0, 0.0))).y;
            let x_850 : vec3<f32> = vec3<f32>(x_523.y, x_523.y, x_523.y);
            let x_851 : vec3<f32> = vec3<f32>(x_758.z, x_830.z, x_830.z);
            let x_709 : vec2<f32> = (vec2<f32>(0.0, x_534.y) + vec2<f32>(0.0, x_285));
            let x_852 : vec2<f32> = vec2<f32>(x_751.y, x_767.y);
            let x_853 : vec3<f32> = vec3<f32>(x_574.x, x_783.y, x_574.x);
            let x_616 : vec2<f32> = vec2<f32>(x_517.z, x_517.y);
            let x_854 : vec2<i32> = vec2<i32>(x_848.x, x_848.z);
            let x_617 : vec3<f32> = vec3<f32>(x_530.y, x_514.y, x_530.y);
            let x_538 : vec4<f32> = vec4<f32>(0.0, 0.0, 0.0, x_695.x);
            let x_855 : vec2<f32> = vec2<f32>(x_820.z, x_820.z);
            let x_539 : vec4<f32> = (vec4<f32>(0.0, 0.0, 0.0, 2.0) * x_538);
            let x_618 : vec3<i32> = vec3<i32>(x_502.z, x_604.y, x_604.y);
            let x_856 : vec2<f32> = vec2<f32>(x_588.y, x_588.x);
            let x_711 : vec3<f32> = vec3<f32>(0.0, 0.0, x_367);
            let x_857 : vec2<i32> = vec2<i32>(x_612.x, x_501.z);
            let x_858 : vec3<i32> = vec3<i32>(x_763.z, x_763.x, x_763.z);
            let x_973 : vec2<f32> = (vec2<f32>(0.0, 2.0) * vec2<f32>(0.0, x_367));
            let x_319 : f32 = (2.0 * x_367);
            let x_859 : vec3<f32> = vec3<f32>(x_826.y, x_826.x, x_779.y);
            let x_860 : vec2<f32> = vec2<f32>(x_599.y, x_824.x);
            let x_861 : vec2<i32> = vec2<i32>(x_585.y, x_835.x);
            let x_715 : vec3<f32> = (vec3<f32>(0.0, 0.0, ((vec3<f32>(0.0, 0.0, 2.0) * x_711)).z) * vec3<f32>(0.0, 0.0, x_368));
            let x_862 : vec2<f32> = vec2<f32>(x_821.x, x_796.y);
            let x_976 : vec2<f32> = (vec2<f32>(0.0, x_319) * vec2<f32>(0.0, x_368));
            let x_321 : f32 = (x_319 * x_368);
            let x_863 : vec3<f32> = vec3<f32>(x_794.z, x_794.x, x_532.x);
            let x_619 : vec2<i32> = vec2<i32>(x_578.z, x_578.x);
            let x_864 : vec3<f32> = vec3<f32>(x_516.y, x_789.y, x_516.x);
            let x_620 : vec2<f32> = vec2<f32>(x_531.x, x_538.z);
            let x_865 : vec2<i32> = vec2<i32>(x_803.y, x_665.w);
            let x_621 : vec3<f32> = vec3<f32>(x_592.x, x_520.x, x_520.y);
            let x_866 : vec2<f32> = vec2<f32>(x_676.y, x_845.y);
            let x_542 : vec3<f32> = (vec3<f32>(0.0, 0.0, x_321) + vec3<f32>(0.0, 0.0, x_293));
            let x_867 : vec3<i32> = vec3<i32>(x_797.y, x_797.y, x_577.z);
            let x_718 : vec2<f32> = (vec2<f32>(x_321, 0.0) + vec2<f32>(x_293, 0.0));
            let x_868 : vec2<f32> = vec2<f32>(x_840.y, x_840.x);
            let x_979 : vec4<f32> = (vec4<f32>(0.0, 0.0, 0.0, x_321) + vec4<f32>(0.0, 0.0, 0.0, x_293));
            let x_323 : f32 = (x_321 + x_293);
            let x_622 : vec2<f32> = vec2<f32>(x_610.y, x_584.y);
            let x_869 : vec2<f32> = vec2<f32>(x_684.z, x_684.y);
            let x_623 : vec3<i32> = vec3<i32>(x_612.y, x_502.y, x_612.y);
            let x_870 : vec3<f32> = vec3<f32>(x_780.x, x_808.x, x_780.z);
            let x_545 : vec4<i32> = vec4<i32>(1, 0, 0, 0);
            let x_624 : vec2<f32> = vec2<f32>(x_528.w, x_528.y);
            let x_871 : vec3<f32> = vec3<f32>(x_711.x, x_780.z, x_711.z);
            let x_546 : vec4<i32> = (vec4<i32>(x_371, 0, 0, 0) + x_545);
            let x_625 : vec2<f32> = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).x, x_608.y);
            let x_872 : vec3<f32> = vec3<f32>(x_830.y, x_672.x, x_672.w);

            continuing {
              let x_873 : vec2<i32> = vec2<i32>(x_835.y, x_835.x);
              let x_874 : vec3<f32> = vec3<f32>(x_822.y, x_822.y, x_822.x);
              let x_982 : vec4<i32> = (vec4<i32>(0, 0, 0, x_366) + vec4<i32>(0, 0, 0, 1));
              let x_329 : i32 = (x_366 + bitcast<i32>(1u));
              let x_875 : vec2<f32> = vec2<f32>(x_593.z, x_593.y);
              x_745 = x_718.x;
              let x_876 : vec3<f32> = vec3<f32>(x_674.y, x_808.x, x_808.x);
              x_936 = ((vec4<i32>(0, 0, 0, x_366) + vec4<i32>(0, 0, 0, 1))).w;
              x_371_phi = bitcast<i32>((x_371 + bitcast<i32>(x_545.x)));
              x_368_phi = x_745;
              x_367_phi = (x_315 + x_285);
              x_366_phi = x_936;
            }
          }
          let x_626 : vec2<f32> = vec2<f32>(x_600.z, x_600.x);
          if ((x_371 < bitcast<i32>(1000u))) {
            let x_880 : vec2<i32> = vec2<i32>(x_577.z, x_499.y);
            let x_352 : f32 = f32(x_371);
            let x_548 : vec2<f32> = vec2<f32>(0.02, 0.0);
            let x_549 : vec2<f32> = (vec2<f32>(x_352, 0.0) * x_548);
            let x_881 : vec3<f32> = vec3<f32>(x_794.z, x_794.y, x_794.y);
            let x_629 : vec3<f32> = vec3<f32>(x_593.z, x_600.y, x_593.x);
            let x_661 : f32 = x_548.x;
            let x_882 : vec2<f32> = vec2<f32>(x_817.z, x_817.y);
            let x_724 : vec4<f32> = (vec4<f32>(0.0, 0.0, x_352, 0.0) * vec4<f32>(0.0, 0.0, x_661, 0.0));
            let x_883 : vec2<f32> = vec2<f32>(x_576.z, x_603.z);
            let x_985 : vec4<f32> = (vec4<f32>(x_352, 0.0, 0.0, 0.0) * vec4<f32>(x_661, 0.0, 0.0, 0.0));
            let x_630 : vec2<f32> = vec2<f32>(x_629.y, x_586.y);
            let x_550 : vec2<f32> = vec2<f32>(x_352, 0.0);
            let x_884 : vec2<f32> = vec2<f32>(x_815.y, x_815.y);
            let x_631 : vec2<i32> = vec2<i32>(x_501.x, x_587.x);
            let x_551 : vec2<f32> = vec2<f32>(0.008333334, 0.0);
            let x_885 : vec3<i32> = vec3<i32>(x_591.x, x_580.x, x_591.z);
            let x_632 : vec2<f32> = vec2<f32>(x_522.y, x_522.x);
            let x_552 : vec2<f32> = (x_550 * x_551);
            let x_886 : vec3<f32> = vec3<f32>(x_777.y, x_524.y, x_777.x);
            let x_988 : vec4<f32> = (vec4<f32>(0.0, x_352, 0.0, 0.0) * vec4<f32>(0.0, 0.008333334, 0.0, 0.0));
            let x_633 : vec3<f32> = vec3<f32>(x_550.y, x_626.x, x_550.y);
            let x_553 : vec4<f32> = vec4<f32>(0.0, 0.0, 0.0, x_352);
            let x_887 : vec3<i32> = vec3<i32>(x_791.y, x_791.y, x_781.z);
            let x_888 : vec3<f32> = vec3<f32>(x_513.y, x_506.z, x_513.y);
            let x_634 : vec2<f32> = vec2<f32>(x_603.z, x_603.x);
            let x_555 : vec4<f32> = (x_553 * vec4<f32>(0.0, 0.0, 0.0, 0.007142857));
            let x_635 : vec2<f32> = vec2<f32>(x_550.y, x_550.y);
            let x_746 : f32 = x_550.x;
            let x_889 : vec3<f32> = vec3<f32>(x_805.x, x_805.y, x_805.x);
            let x_991 : vec2<f32> = (vec2<f32>(x_746, 0.0) * vec2<f32>(0.007142857, 0.0));
            let x_636 : vec2<f32> = vec2<f32>(x_630.x, x_508.y);
            let x_890 : vec2<f32> = vec2<f32>(x_886.z, x_886.y);
            x_360 = vec3<f32>((x_352 * x_661), (x_352 * 0.008333334), (x_746 * 0.007142857));
            x_377_phi = x_360;
            break;
          } else {
            let x_877 : vec2<f32> = vec2<f32>(x_686.x, x_686.y);
            let x_627 : vec3<f32> = vec3<f32>(x_600.z, x_570.y, x_570.x);
            x_345 = vec3<f32>((x_670.y / x_264), 0.0, (x_196 / x_262));
            let x_878 : vec3<f32> = vec3<f32>(x_815.z, x_784.y, x_784.z);
            let x_628 : vec3<i32> = vec3<i32>(x_498.y, x_578.y, x_578.x);
            let x_879 : vec3<f32> = vec3<f32>(x_507.x, x_507.x, x_589.y);
            x_377_phi = x_345;
            break;
          }
          return;
        }
      }
      let x_377 : vec3<f32> = x_377_phi;
      let x_891 : vec2<f32> = vec2<f32>(x_786.z, x_786.y);
      let x_637 : vec2<f32> = vec2<f32>(vec3<f32>(0.0, 0.0, 0.0).z, vec3<f32>(0.0, 0.0, 0.0).x);
      let x_892 : vec3<i32> = vec3<i32>(x_587.x, x_665.y, x_587.z);
      let x_893 : vec3<f32> = vec3<f32>(x_671.y, x_671.w, x_671.w);
      data[x_180] = x_377;
      let x_894 : vec3<f32> = vec3<f32>(x_811.x, x_811.z, x_681.y);

      continuing {
        let x_895 : vec2<f32> = vec2<f32>(x_802.x, x_751.x);
        let x_896 : vec3<f32> = vec3<f32>(x_680.x, vec3<f32>(0.0, 0.0, 0.0).x, vec3<f32>(0.0, 0.0, 0.0).x);
        let x_558 : vec4<i32> = (vec4<i32>(0, x_654, 0, 0) + vec4<i32>(0, 1, 0, 0));
        let x_897 : vec3<f32> = vec3<f32>(x_596.x, x_596.x, x_820.y);
        let x_898 : vec3<f32> = vec3<f32>(x_822.z, x_822.y, x_822.z);
        let x_899 : vec3<i32> = vec3<i32>(x_803.z, x_803.x, x_666.z);
        let x_933 : i32 = x_598.x;
        let x_994 : vec3<i32> = (vec3<i32>(0, x_933, 0) + vec3<i32>(0, 1, 0));
        let x_203 : i32 = (x_933 + 1);
        let x_900 : vec3<f32> = vec3<f32>(x_603.z, x_603.z, x_779.x);
        let x_638 : vec3<f32> = vec3<f32>(x_512.x, x_504.z, x_512.y);
        let x_901 : vec2<f32> = vec2<f32>(x_574.y, x_574.y);
        x_932 = ((vec4<i32>(0, 0, 0, x_500.x) + vec4<i32>(0, 0, 0, 1))).w;
        x_364_phi = x_932;
      }
    }

    continuing {
      let x_902 : vec2<f32> = vec2<f32>(x_757.x, vec3<f32>(0.0625, 0.0625, 0.0625).z);
      let x_639 : vec2<f32> = vec2<f32>(x_573.z, x_573.z);
      let x_559 : vec2<i32> = vec2<i32>(0, x_361);
      let x_903 : vec3<f32> = vec3<f32>(x_751.x, x_755.z, x_751.x);
      let x_640 : vec2<f32> = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).x, x_573.y);
      let x_904 : vec2<f32> = vec2<f32>(x_754.x, x_754.y);
      let x_561 : vec2<i32> = vec2<i32>(0, 1);
      let x_641 : vec2<i32> = vec2<i32>(x_561.y, x_561.x);
      let x_905 : vec3<f32> = vec3<f32>(x_572.z, x_572.z, x_572.x);
      let x_642 : vec3<i32> = vec3<i32>(x_559.y, x_641.x, x_559.y);
      let x_566 : i32 = x_561.y;
      let x_653 : i32 = x_559.y;
      let x_906 : vec3<i32> = vec3<i32>(x_642.z, x_642.z, x_642.x);
      let x_907 : vec2<f32> = vec2<f32>(x_572.x, x_572.z);
      let x_908 : vec2<f32> = vec2<f32>(x_907.y, x_753.x);
      let x_730 : vec2<i32> = (vec2<i32>(0, x_653) + vec2<i32>(0, 1));
      let x_205 : i32 = (x_653 + 1);
      let x_643 : vec3<f32> = vec3<f32>(x_570.x, x_570.x, x_570.y);
      x_569 = ((x_559 + x_561)).y;
      x_361_phi = x_569;
    }
  }
  let x_909 : vec3<f32> = vec3<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).x, x_752.x, x_752.y);
  x_363_phi = vec3<f32>(0.0, 0.0, 0.0);
  x_362_phi = 0;
  loop {
    var x_223 : i32;
    x_363 = x_363_phi;
    let x_362 : i32 = x_362_phi;
    x_644 = vec3<f32>(vec3<f32>(0.0, 0.0, 0.0).y, vec3<f32>(0.0, 0.0, 0.0).z, vec3<f32>(0.0, 0.0, 0.0).z);
    let x_910 : vec3<f32> = vec3<f32>(x_753.x, x_754.x, x_754.x);
    if ((x_362 < bitcast<i32>(16u))) {
    } else {
      break;
    }

    continuing {
      let x_911 : vec3<f32> = vec3<f32>(x_644.y, x_754.y, x_754.x);
      let x_219 : vec3<f32> = data[x_362];
      let x_912 : vec2<f32> = vec2<f32>(x_363.y, x_644.y);
      let x_221 : vec3<f32> = (x_363 + x_219);
      let x_913 : vec3<f32> = vec3<f32>(x_221.z, x_221.z, x_221.x);
      let x_645 : vec3<f32> = vec3<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).z, vec3<f32>(0.0625, 0.0625, 0.0625).x, vec3<f32>(0.0625, 0.0625, 0.0625).z);
      let x_914 : vec3<f32> = vec3<f32>(x_909.x, x_913.y, x_913.y);
      let x_915 : vec2<f32> = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).y, vec3<f32>(0.0625, 0.0625, 0.0625).y);
      let x_733 : vec4<i32> = (vec4<i32>(x_362, 0, 0, 0) + vec4<i32>(1, 0, 0, 0));
      let x_997 : vec4<i32> = (vec4<i32>(0, 0, 0, x_362) + vec4<i32>(0, 0, 0, 1));
      x_223 = (x_362 + 1);
      let x_916 : vec2<f32> = vec2<f32>(vec3<f32>(0.0, 0.0, 0.0).z, vec3<f32>(0.0, 0.0, 0.0).z);
      let x_646 : vec3<f32> = vec3<f32>(x_645.x, x_645.y, x_645.x);
      let x_917 : vec3<f32> = vec3<f32>(x_914.z, x_914.y, x_914.x);
      x_363_phi = x_221;
      x_362_phi = x_223;
    }
  }
  let x_918 : vec2<f32> = vec2<f32>(vec3<f32>(0.0625, 0.0625, 0.0625).z, x_570.z);
  let x_647 : vec3<f32> = vec3<f32>(x_570.z, x_570.y, x_570.x);
  let x_919 : vec2<f32> = vec2<f32>(x_918.y, x_754.y);
  let x_227 : vec3<f32> = (x_363 * vec3<f32>(0.0625, 0.0625, 0.0625));
  let x_648 : vec2<f32> = vec2<f32>(x_647.x, x_647.x);
  let x_920 : vec2<f32> = vec2<f32>(vec3<f32>(0.0, 0.0, 0.0).z, x_644.x);
  let x_649 : vec2<f32> = vec2<f32>(x_647.y, x_647.x);
  let x_921 : vec3<f32> = vec3<f32>(x_919.y, x_648.y, x_648.x);
  let x_650 : vec3<f32> = vec3<f32>(x_644.z, x_644.y, x_644.x);
  let x_922 : vec3<f32> = vec3<f32>(x_647.z, x_752.x, x_752.z);
  let x_651 : vec2<f32> = vec2<f32>(x_644.x, vec3<f32>(0.0625, 0.0625, 0.0625).y);
  x_GLF_color = vec4<f32>(x_227.x, x_227.y, x_227.z, 1.0);
  let x_652 : vec3<f32> = vec3<f32>(x_649.x, x_649.y, x_649.x);
  return;
}

struct main_out {
  [[location(0)]]
  x_GLF_color_1 : vec4<f32>;
};

[[stage(fragment)]]
fn main([[builtin(position)]] gl_FragCoord_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(x_GLF_color);
}
