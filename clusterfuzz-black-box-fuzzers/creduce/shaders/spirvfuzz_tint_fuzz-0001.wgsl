[[block]]
struct buf0 {
  resolution : vec2<f32>;
};

[[group(0), binding(0)]] var<uniform> x_24 : buf0;

var<private> gl_FragCoord : vec4<f32>;

var<private> x_GLF_color : vec4<f32>;

fn main_1() {
  var A : array<f32, 50u>;
  var x_546 : bool;
  var x_518 : i32;
  var x_502 : i32;
  var x_485 : i32;
  var x_471 : bool;
  var x_435 : bool;
  var x_559 : bool;
  var x_619 : bool;
  var x_632 : bool;
  var x_656 : i32;
  var x_675 : i32;
  var x_676 : i32;
  var x_657 : i32;
  var x_633 : bool;
  var x_620 : bool;
  var x_560 : bool;
  var x_547 : bool;
  var x_519 : i32;
  var x_503 : i32;
  var x_486 : i32;
  var x_472 : bool;
  var x_436 : bool;
  var x_554_phi : i32;
  var x_546_phi : bool;
  var x_542_phi : i32;
  var x_530_phi : bool;
  var x_518_phi : i32;
  var x_502_phi : i32;
  var x_496_phi : f32;
  var x_485_phi : i32;
  var x_478_phi : bool;
  var x_471_phi : bool;
  var x_466_phi : i32;
  var x_435_phi : bool;
  var x_432_phi : i32;
  var x_18_phi : bool;
  var x_302_phi : i32;
  var x_607_phi : i32;
  var x_579_phi : i32;
  var x_569_phi : bool;
  var x_561_phi : bool;
  var x_548_phi : bool;
  var x_520_phi : bool;
  var x_504_phi : i32;
  var x_487_phi : i32;
  var x_451_phi : i32;
  var x_437_phi : bool;
  var x_409_phi : bool;
  var x_667_phi : bool;
  var x_658_phi : i32;
  var x_636_phi : i32;
  var x_621_phi : i32;
  var x_591_phi : i32;
  var x_571_phi : i32;
  var x_563_phi : bool;
  var x_535_phi : bool;
  var x_522_phi : bool;
  var x_489_phi : bool;
  var x_473_phi : i32;
  var x_453_phi : i32;
  var x_439_phi : i32;
  var x_417_phi : bool;
  var x_64_phi : bool;
  var x_304_phi : i32;
  let x_405 : bool = (bitcast<i32>(0u) < 200);
  let x_464 : i32 = (bitcast<i32>(0u) / 4);
  let x_476 : bool = (bitcast<i32>(0u) < 50);
  let x_494 : i32 = (4 * x_464);
  let x_513 : bool = (0 > 0);
  let x_540 : bool = (0 == x_494);
  let x_575 : i32 = (0 - 1);
  let x_584 : f32 = f32(0);
  let x_596 : i32 = bitcast<i32>((1u + 0u));
  let x_613 : i32 = (1 + 0);
  let x_624 : bool = (0 < bitcast<i32>(50u));
  let x_650 : i32 = bitcast<i32>((0u + bitcast<u32>(1)));
  let x_669 : bool = (x_596 < bitcast<i32>(50u));
  let x_683 : i32 = bitcast<i32>((0u + bitcast<u32>(1)));
  x_554_phi = x_683;
  x_546_phi = x_669;
  x_542_phi = x_650;
  x_530_phi = x_624;
  x_518_phi = x_613;
  x_502_phi = x_596;
  x_496_phi = x_584;
  x_485_phi = x_575;
  x_478_phi = x_540;
  x_471_phi = x_513;
  x_466_phi = x_494;
  x_435_phi = x_476;
  x_432_phi = x_464;
  x_18_phi = x_405;
  x_302_phi = 0;
  loop {
    var x_664 : i32;
    var x_642 : i32;
    var x_630 : f32;
    var x_617 : i32;
    var x_589 : bool;
    var x_558 : bool;
    var x_534 : i32;
    var x_501 : bool;
    var x_483 : i32;
    var x_469 : bool;
    var x_450 : i32;
    var x_651 : i32;
    var x_625 : bool;
    var x_614 : i32;
    var x_585 : f32;
    var x_576 : i32;
    var x_541 : bool;
    var x_514 : bool;
    var x_495 : i32;
    var x_477 : bool;
    var x_465 : i32;
    var x_406 : bool;
    var x_670 : bool;
    var x_684 : i32;
    var x_531_phi : i32;
    var x_515_phi : i32;
    var x_498_phi : bool;
    var x_497_phi : i32;
    var x_480_phi : bool;
    var x_479_phi : bool;
    var x_467_phi : i32;
    var x_459_phi : i32;
    var x_448_phi : bool;
    var x_433_phi : f32;
    var x_423_phi : bool;
    var x_416_phi : i32;
    var x_407_phi : i32;
    var x_628_phi : i32;
    var x_616_phi : i32;
    var x_600_phi : bool;
    var x_588_phi : bool;
    var x_587_phi : bool;
    var x_557_phi : bool;
    var x_556_phi : i32;
    var x_533_phi : i32;
    var x_516_phi : bool;
    var x_500_phi : bool;
    var x_499_phi : i32;
    var x_482_phi : i32;
    var x_481_phi : bool;
    var x_468_phi : bool;
    var x_460_phi : i32;
    var x_449_phi : i32;
    var x_408_phi : f32;
    var x_40_phi : bool;
    var x_38_phi : i32;
    var x_37_phi : i32;
    var x_631_phi : i32;
    var x_618_phi : i32;
    var x_590_phi : f32;
    var x_578_phi : i32;
    var x_568_phi : bool;
    var x_545_phi : bool;
    var x_517_phi : i32;
    var x_484_phi : bool;
    var x_470_phi : i32;
    var x_434_phi : bool;
    var x_424_phi : i32;
    var x_651_phi : i32;
    var x_625_phi : bool;
    var x_614_phi : i32;
    var x_597_phi : i32;
    var x_585_phi : f32;
    var x_576_phi : i32;
    var x_541_phi : bool;
    var x_514_phi : bool;
    var x_495_phi : i32;
    var x_477_phi : bool;
    var x_465_phi : i32;
    var x_406_phi : bool;
    var x_55_phi : i32;
    let x_554 : i32 = x_554_phi;
    x_546 = x_546_phi;
    let x_542 : i32 = x_542_phi;
    let x_530 : bool = x_530_phi;
    x_518 = x_518_phi;
    x_502 = x_502_phi;
    let x_496 : f32 = x_496_phi;
    x_485 = x_485_phi;
    let x_478 : bool = x_478_phi;
    x_471 = x_471_phi;
    let x_466 : i32 = x_466_phi;
    x_435 = x_435_phi;
    let x_432 : i32 = x_432_phi;
    let x_18 : bool = x_18_phi;
    let x_302 : i32 = x_302_phi;
    x_559 = (x_518 < 50);
    let x_606 : bool = (0 > bitcast<i32>(0u));
    x_619 = (x_502 > bitcast<i32>(0u));
    let x_626 : bool = (x_542 < 200);
    x_632 = (x_518 > 0);
    let x_638 : i32 = (0 - 1);
    let x_652 : bool = (x_554 < bitcast<i32>(200u));
    x_656 = bitcast<i32>((x_502 - bitcast<i32>(1u)));
    let x_671 : i32 = (x_542 / bitcast<i32>(4u));
    x_675 = bitcast<i32>((x_502 + bitcast<i32>(1)));
    let x_685 : i32 = bitcast<i32>((0u + bitcast<u32>(1)));
    x_531_phi = x_685;
    x_515_phi = x_671;
    x_498_phi = x_652;
    x_497_phi = x_638;
    x_480_phi = x_626;
    x_479_phi = x_606;
    x_467_phi = x_554;
    x_459_phi = x_542;
    x_448_phi = x_530;
    x_433_phi = x_496;
    x_423_phi = x_478;
    x_416_phi = x_466;
    x_407_phi = x_432;
    x_607_phi = x_675;
    x_579_phi = x_656;
    x_569_phi = x_632;
    x_561_phi = x_619;
    x_548_phi = x_559;
    x_520_phi = x_546;
    x_504_phi = x_518;
    x_487_phi = x_502;
    x_451_phi = x_485;
    x_437_phi = x_471;
    x_409_phi = x_435;
    if (x_18) {
    } else {
      break;
    }
    var x_676_phi : i32;
    var x_657_phi : i32;
    var x_633_phi : bool;
    var x_620_phi : bool;
    var x_560_phi : bool;
    var x_547_phi : bool;
    var x_519_phi : i32;
    var x_503_phi : i32;
    var x_486_phi : i32;
    var x_472_phi : bool;
    var x_436_phi : bool;
    let x_531 : i32 = x_531_phi;
    let x_515 : i32 = x_515_phi;
    let x_498 : bool = x_498_phi;
    let x_497 : i32 = x_497_phi;
    let x_480 : bool = x_480_phi;
    let x_479 : bool = x_479_phi;
    let x_467 : i32 = x_467_phi;
    let x_459 : i32 = x_459_phi;
    let x_448 : bool = x_448_phi;
    let x_433 : f32 = x_433_phi;
    let x_423 : bool = x_423_phi;
    let x_416 : i32 = x_416_phi;
    let x_407 : i32 = x_407_phi;
    let x_29 : f32 = x_24.resolution.x;
    let x_532 : i32 = (x_467 / 4);
    let x_543 : i32 = (0 + 1);
    let x_544 : bool = (bitcast<i32>(0u) < bitcast<i32>(50u));
    let x_567 : bool = (0 < bitcast<i32>(50u));
    let x_577 : i32 = bitcast<i32>((4u * bitcast<u32>(x_515)));
    let x_586 : i32 = (4 * x_532);
    let x_599 : bool = (bitcast<i32>(0u) > 0);
    let x_615 : bool = (bitcast<i32>(0u) > bitcast<i32>(0u));
    let x_627 : bool = (x_459 == x_577);
    let x_654 : bool = (x_467 == x_586);
    let x_662 : i32 = bitcast<i32>((0u - 1u));
    let x_672 : i32 = bitcast<i32>((0u - bitcast<u32>(1)));
    x_676_phi = bitcast<i32>((1u + bitcast<u32>(x_531)));
    x_657_phi = (x_531 - bitcast<i32>(1u));
    x_633_phi = (x_543 > 0);
    x_620_phi = (x_531 > bitcast<i32>(0u));
    x_560_phi = (x_543 < bitcast<i32>(50u));
    x_547_phi = (x_531 < 50);
    x_519_phi = x_543;
    x_503_phi = x_531;
    x_486_phi = x_497;
    x_472_phi = x_479;
    x_436_phi = x_448;
    x_628_phi = x_672;
    x_616_phi = x_662;
    x_600_phi = x_654;
    x_588_phi = x_627;
    x_587_phi = x_615;
    x_557_phi = x_599;
    x_556_phi = x_586;
    x_533_phi = x_577;
    x_516_phi = x_567;
    x_500_phi = x_544;
    x_499_phi = x_532;
    x_482_phi = x_515;
    x_481_phi = x_498;
    x_468_phi = x_480;
    x_460_phi = x_467;
    x_449_phi = x_459;
    x_408_phi = x_433;
    x_40_phi = x_423;
    x_38_phi = x_416;
    x_37_phi = x_407;
    if ((x_302 >= i32(x_29))) {
      x_676 = x_676_phi;
      x_657 = x_657_phi;
      x_633 = x_633_phi;
      x_620 = x_620_phi;
      x_560 = x_560_phi;
      x_547 = x_547_phi;
      x_519 = x_519_phi;
      x_503 = x_503_phi;
      x_486 = x_486_phi;
      x_472 = x_472_phi;
      x_436 = x_436_phi;
      x_607_phi = x_676;
      x_579_phi = x_657;
      x_569_phi = x_633;
      x_561_phi = x_620;
      x_548_phi = x_560;
      x_520_phi = x_547;
      x_504_phi = x_519;
      x_487_phi = x_503;
      x_451_phi = x_486;
      x_437_phi = x_472;
      x_409_phi = x_436;
      break;
    }
    var x_664_phi : i32;
    var x_642_phi : i32;
    var x_630_phi : f32;
    var x_617_phi : i32;
    var x_589_phi : bool;
    var x_558_phi : bool;
    var x_534_phi : i32;
    var x_501_phi : bool;
    var x_483_phi : i32;
    var x_469_phi : bool;
    var x_450_phi : i32;
    var x_50_phi : f32;
    let x_628 : i32 = x_628_phi;
    let x_616 : i32 = x_616_phi;
    let x_600 : bool = x_600_phi;
    let x_588 : bool = x_588_phi;
    let x_587 : bool = x_587_phi;
    let x_557 : bool = x_557_phi;
    let x_556 : i32 = x_556_phi;
    let x_533 : i32 = x_533_phi;
    let x_516 : bool = x_516_phi;
    let x_500 : bool = x_500_phi;
    let x_499 : i32 = x_499_phi;
    let x_482 : i32 = x_482_phi;
    let x_481 : bool = x_481_phi;
    let x_468 : bool = x_468_phi;
    let x_460 : i32 = x_460_phi;
    let x_449 : i32 = x_449_phi;
    let x_408 : f32 = x_408_phi;
    let x_40 : bool = x_40_phi;
    let x_38 : i32 = x_38_phi;
    let x_37 : i32 = x_37_phi;
    let x_629 : f32 = f32(x_449);
    let x_641 : i32 = (1 + 0);
    let x_663 : i32 = bitcast<i32>((1u + 0u));
    x_664_phi = bitcast<i32>((0u + bitcast<u32>(1)));
    x_642_phi = (0 + bitcast<i32>(1u));
    x_630_phi = f32(x_460);
    x_617_phi = x_628;
    x_589_phi = x_600;
    x_558_phi = x_587;
    x_534_phi = x_556;
    x_501_phi = x_516;
    x_483_phi = x_499;
    x_469_phi = x_481;
    x_450_phi = x_460;
    x_50_phi = x_408;
    x_631_phi = x_663;
    x_618_phi = x_641;
    x_590_phi = x_629;
    x_578_phi = x_616;
    x_568_phi = x_588;
    x_545_phi = x_557;
    x_517_phi = x_533;
    x_484_phi = x_500;
    x_470_phi = x_482;
    x_434_phi = x_468;
    x_424_phi = x_449;
    if (x_40) {
      x_664 = x_664_phi;
      x_642 = x_642_phi;
      x_630 = x_630_phi;
      x_617 = x_617_phi;
      x_589 = x_589_phi;
      x_558 = x_558_phi;
      x_534 = x_534_phi;
      x_501 = x_501_phi;
      x_483 = x_483_phi;
      x_469 = x_469_phi;
      x_450 = x_450_phi;
      let x_50 : f32 = x_50_phi;
      A[x_37] = x_50;
      x_631_phi = x_664;
      x_618_phi = x_642;
      x_590_phi = x_630;
      x_578_phi = x_617;
      x_568_phi = x_589;
      x_545_phi = x_558;
      x_517_phi = x_534;
      x_484_phi = x_501;
      x_470_phi = x_483;
      x_434_phi = x_469;
      x_424_phi = x_450;
    }
    let x_631 : i32 = x_631_phi;
    let x_618 : i32 = x_618_phi;
    let x_590 : f32 = x_590_phi;
    let x_578 : i32 = x_578_phi;
    let x_568 : bool = x_568_phi;
    let x_545 : bool = x_545_phi;
    let x_517 : i32 = x_517_phi;
    let x_484 : bool = x_484_phi;
    let x_470 : i32 = x_470_phi;
    let x_434 : bool = x_434_phi;
    let x_424 : i32 = x_424_phi;
    let x_643 : bool = (bitcast<i32>(0u) < 50);
    let x_674 : i32 = (x_424 + bitcast<i32>(1u));
    x_651_phi = x_674;
    x_625_phi = x_643;
    x_614_phi = x_631;
    x_597_phi = x_618;
    x_585_phi = x_590;
    x_576_phi = x_578;
    x_541_phi = x_568;
    x_514_phi = x_545;
    x_495_phi = x_517;
    x_477_phi = x_484;
    x_465_phi = x_470;
    x_406_phi = x_434;
    x_55_phi = x_424;

    continuing {
      x_651 = x_651_phi;
      x_625 = x_625_phi;
      x_614 = x_614_phi;
      let x_597 : i32 = x_597_phi;
      x_585 = x_585_phi;
      x_576 = x_576_phi;
      x_541 = x_541_phi;
      x_514 = x_514_phi;
      x_495 = x_495_phi;
      x_477 = x_477_phi;
      x_465 = x_465_phi;
      x_406 = x_406_phi;
      let x_55 : i32 = x_55_phi;
      x_670 = (x_597 < 50);
      x_684 = (x_55 + 1);
      x_554_phi = x_684;
      x_546_phi = x_670;
      x_542_phi = x_651;
      x_530_phi = x_625;
      x_518_phi = x_614;
      x_502_phi = x_597;
      x_496_phi = x_585;
      x_485_phi = x_576;
      x_478_phi = x_541;
      x_471_phi = x_514;
      x_466_phi = x_495;
      x_435_phi = x_477;
      x_432_phi = x_465;
      x_18_phi = x_406;
      x_302_phi = x_55;
    }
  }
  let x_607 : i32 = x_607_phi;
  let x_579 : i32 = x_579_phi;
  let x_569 : bool = x_569_phi;
  let x_561 : bool = x_561_phi;
  let x_548 : bool = x_548_phi;
  let x_520 : bool = x_520_phi;
  let x_504 : i32 = x_504_phi;
  let x_487 : i32 = x_487_phi;
  let x_451 : i32 = x_451_phi;
  let x_437 : bool = x_437_phi;
  let x_409 : bool = x_409_phi;
  let x_634 : i32 = (x_487 + bitcast<i32>(1u));
  let x_644 : i32 = (x_504 - 1);
  let x_665 : i32 = (x_504 + 1);
  let x_677 : bool = (x_607 < bitcast<i32>(50u));
  x_667_phi = x_677;
  x_658_phi = x_665;
  x_636_phi = x_644;
  x_621_phi = x_634;
  x_591_phi = x_607;
  x_571_phi = x_579;
  x_563_phi = x_569;
  x_535_phi = x_561;
  x_522_phi = x_548;
  x_489_phi = x_520;
  x_473_phi = x_504;
  x_453_phi = x_487;
  x_439_phi = x_451;
  x_417_phi = x_437;
  x_64_phi = x_409;
  x_304_phi = 0;
  loop {
    var x_648 : bool;
    var x_611 : bool;
    var x_604 : bool;
    var x_593 : bool;
    var x_552 : i32;
    var x_537 : i32;
    var x_526 : i32;
    var x_508 : bool;
    var x_443 : bool;
    var x_427 : i32;
    var x_681 : i32;
    var x_689 : i32;
    var x_645 : i32;
    var x_635 : i32;
    var x_580 : i32;
    var x_570 : bool;
    var x_562 : bool;
    var x_549 : bool;
    var x_521 : bool;
    var x_488 : i32;
    var x_452 : i32;
    var x_438 : bool;
    var x_410 : bool;
    var x_91 : i32;
    var x_666 : i32;
    var x_678 : bool;
    var x_679_phi : i32;
    var x_659_phi : bool;
    var x_646_phi : i32;
    var x_622_phi : i32;
    var x_601_phi : i32;
    var x_581_phi : i32;
    var x_564_phi : i32;
    var x_550_phi : bool;
    var x_523_phi : bool;
    var x_506_phi : bool;
    var x_461_phi : bool;
    var x_454_phi : i32;
    var x_440_phi : i32;
    var x_425_phi : i32;
    var x_411_phi : bool;
    var x_602_phi : i32;
    var x_592_phi : bool;
    var x_572_phi : i32;
    var x_565_phi : i32;
    var x_551_phi : i32;
    var x_536_phi : i32;
    var x_525_phi : i32;
    var x_524_phi : bool;
    var x_507_phi : bool;
    var x_474_phi : bool;
    var x_442_phi : bool;
    var x_441_phi : i32;
    var x_426_phi : i32;
    var x_412_phi : i32;
    var x_78_phi : bool;
    var x_668_phi : i32;
    var x_649_phi : i32;
    var x_612_phi : bool;
    var x_605_phi : bool;
    var x_594_phi : bool;
    var x_573_phi : bool;
    var x_538_phi : i32;
    var x_527_phi : i32;
    var x_509_phi : i32;
    var x_490_phi : bool;
    var x_428_phi : bool;
    var x_418_phi : i32;
    var x_645_phi : i32;
    var x_635_phi : i32;
    var x_608_phi : i32;
    var x_580_phi : i32;
    var x_570_phi : bool;
    var x_562_phi : bool;
    var x_549_phi : bool;
    var x_521_phi : bool;
    var x_505_phi : i32;
    var x_488_phi : i32;
    var x_452_phi : i32;
    var x_438_phi : bool;
    var x_410_phi : bool;
    var x_91_phi : i32;
    let x_667 : bool = x_667_phi;
    let x_658 : i32 = x_658_phi;
    let x_636 : i32 = x_636_phi;
    let x_621 : i32 = x_621_phi;
    let x_591 : i32 = x_591_phi;
    let x_571 : i32 = x_571_phi;
    let x_563 : bool = x_563_phi;
    let x_535 : bool = x_535_phi;
    let x_522 : bool = x_522_phi;
    let x_489 : bool = x_489_phi;
    let x_473 : i32 = x_473_phi;
    let x_453 : i32 = x_453_phi;
    let x_439 : i32 = x_439_phi;
    let x_417 : bool = x_417_phi;
    let x_64 : bool = x_64_phi;
    let x_304 : i32 = x_304_phi;
    let x_687 : i32 = (x_473 + 1);
    x_679_phi = x_687;
    x_659_phi = x_667;
    x_646_phi = x_658;
    x_622_phi = x_636;
    x_601_phi = x_621;
    x_581_phi = x_591;
    x_564_phi = x_571;
    x_550_phi = x_563;
    x_523_phi = x_535;
    x_506_phi = x_522;
    x_461_phi = x_489;
    x_454_phi = x_473;
    x_440_phi = x_453;
    x_425_phi = x_439;
    x_411_phi = x_417;
    if (x_64) {
    } else {
      break;
    }
    let x_679 : i32 = x_679_phi;
    let x_659 : bool = x_659_phi;
    let x_646 : i32 = x_646_phi;
    let x_622 : i32 = x_622_phi;
    let x_601 : i32 = x_601_phi;
    let x_581 : i32 = x_581_phi;
    let x_564 : i32 = x_564_phi;
    let x_550 : bool = x_550_phi;
    let x_523 : bool = x_523_phi;
    let x_506 : bool = x_506_phi;
    let x_461 : bool = x_461_phi;
    let x_454 : i32 = x_454_phi;
    let x_440 : i32 = x_440_phi;
    let x_425 : i32 = x_425_phi;
    let x_411 : bool = x_411_phi;
    let x_71 : f32 = gl_FragCoord.x;
    x_602_phi = x_679;
    x_592_phi = x_659;
    x_572_phi = x_646;
    x_565_phi = x_622;
    x_551_phi = x_601;
    x_536_phi = x_581;
    x_525_phi = x_564;
    x_524_phi = x_550;
    x_507_phi = x_523;
    x_474_phi = x_506;
    x_442_phi = x_461;
    x_441_phi = x_454;
    x_426_phi = x_440;
    x_412_phi = x_425;
    x_78_phi = x_411;
    if ((x_304 < i32(x_71))) {
      break;
    }
    var x_648_phi : bool;
    var x_611_phi : bool;
    var x_604_phi : bool;
    var x_593_phi : bool;
    var x_552_phi : i32;
    var x_537_phi : i32;
    var x_526_phi : i32;
    var x_508_phi : bool;
    var x_443_phi : bool;
    var x_427_phi : i32;
    var x_83_phi : i32;
    let x_602 : i32 = x_602_phi;
    let x_592 : bool = x_592_phi;
    let x_572 : i32 = x_572_phi;
    let x_565 : i32 = x_565_phi;
    let x_551 : i32 = x_551_phi;
    let x_536 : i32 = x_536_phi;
    let x_525 : i32 = x_525_phi;
    let x_524 : bool = x_524_phi;
    let x_507 : bool = x_507_phi;
    let x_474 : bool = x_474_phi;
    let x_442 : bool = x_442_phi;
    let x_441 : i32 = x_441_phi;
    let x_426 : i32 = x_426_phi;
    let x_412 : i32 = x_412_phi;
    let x_78 : bool = x_78_phi;
    let x_603 : bool = (x_551 < 50);
    let x_610 : bool = (x_536 > 0);
    let x_647 : bool = (x_551 > 0);
    let x_680 : i32 = (x_536 - 1);
    let x_688 : i32 = bitcast<i32>((1u + bitcast<u32>(x_536)));
    x_648_phi = (x_602 > 0);
    x_611_phi = (x_572 > bitcast<i32>(0u));
    x_604_phi = (x_602 < 50);
    x_593_phi = (x_572 < 50);
    x_552_phi = x_602;
    x_537_phi = x_572;
    x_526_phi = x_565;
    x_508_phi = x_524;
    x_443_phi = x_474;
    x_427_phi = x_441;
    x_83_phi = x_412;
    x_668_phi = x_688;
    x_649_phi = x_680;
    x_612_phi = x_647;
    x_605_phi = x_610;
    x_594_phi = x_603;
    x_573_phi = x_592;
    x_538_phi = x_551;
    x_527_phi = x_536;
    x_509_phi = x_525;
    x_490_phi = x_507;
    x_428_phi = x_442;
    x_418_phi = x_426;
    if (x_78) {
      x_648 = x_648_phi;
      x_611 = x_611_phi;
      x_604 = x_604_phi;
      x_593 = x_593_phi;
      x_552 = x_552_phi;
      x_537 = x_537_phi;
      x_526 = x_526_phi;
      x_508 = x_508_phi;
      x_443 = x_443_phi;
      x_427 = x_427_phi;
      let x_83 : i32 = x_83_phi;
      let x_85 : f32 = A[x_83];
      let x_86 : ptr<function, f32> = &(A[x_304]);
      let x_87 : f32 = *(x_86);
      *(x_86) = (x_87 + x_85);
      x_681 = bitcast<i32>((x_537 - bitcast<i32>(1u)));
      x_689 = bitcast<i32>((x_537 + bitcast<i32>(1)));
      x_668_phi = x_689;
      x_649_phi = x_681;
      x_612_phi = x_648;
      x_605_phi = x_611;
      x_594_phi = x_604;
      x_573_phi = x_593;
      x_538_phi = x_552;
      x_527_phi = x_537;
      x_509_phi = x_526;
      x_490_phi = x_508;
      x_428_phi = x_443;
      x_418_phi = x_427;
    }
    let x_668 : i32 = x_668_phi;
    let x_649 : i32 = x_649_phi;
    let x_612 : bool = x_612_phi;
    let x_605 : bool = x_605_phi;
    let x_594 : bool = x_594_phi;
    let x_573 : bool = x_573_phi;
    let x_538 : i32 = x_538_phi;
    let x_527 : i32 = x_527_phi;
    let x_509 : i32 = x_509_phi;
    let x_490 : bool = x_490_phi;
    let x_428 : bool = x_428_phi;
    let x_418 : i32 = x_418_phi;
    let x_682 : i32 = (1 + x_527);
    let x_690 : i32 = (x_538 - 1);
    x_645_phi = x_690;
    x_635_phi = x_682;
    x_608_phi = x_668;
    x_580_phi = x_649;
    x_570_phi = x_612;
    x_562_phi = x_605;
    x_549_phi = x_594;
    x_521_phi = x_573;
    x_505_phi = x_538;
    x_488_phi = x_527;
    x_452_phi = x_509;
    x_438_phi = x_490;
    x_410_phi = x_428;
    x_91_phi = x_418;

    continuing {
      x_645 = x_645_phi;
      x_635 = x_635_phi;
      let x_608 : i32 = x_608_phi;
      x_580 = x_580_phi;
      x_570 = x_570_phi;
      x_562 = x_562_phi;
      x_549 = x_549_phi;
      x_521 = x_521_phi;
      let x_505 : i32 = x_505_phi;
      x_488 = x_488_phi;
      x_452 = x_452_phi;
      x_438 = x_438_phi;
      x_410 = x_410_phi;
      x_91 = x_91_phi;
      x_666 = (x_505 + bitcast<i32>(1u));
      x_678 = (x_608 < 50);
      x_667_phi = x_678;
      x_658_phi = x_666;
      x_636_phi = x_645;
      x_621_phi = x_635;
      x_591_phi = x_608;
      x_571_phi = x_580;
      x_563_phi = x_570;
      x_535_phi = x_562;
      x_522_phi = x_549;
      x_489_phi = x_521;
      x_473_phi = x_505;
      x_453_phi = x_488;
      x_439_phi = x_452;
      x_417_phi = x_438;
      x_64_phi = x_410;
      x_304_phi = x_91;
    }
  }
  var x_429 : bool;
  var x_455 : bool;
  var x_462 : bool;
  var x_491 : bool;
  var x_510 : bool;
  var x_539 : bool;
  var x_582 : bool;
  var x_595 : bool;
  var x_583_phi : bool;
  var x_566_phi : bool;
  var x_528_phi : bool;
  var x_475_phi : bool;
  var x_456_phi : bool;
  var x_444_phi : bool;
  var x_413_phi : bool;
  var x_119_phi : bool;
  let x_93 : f32 = gl_FragCoord.x;
  let x_94 : i32 = i32(x_93);
  x_429 = (x_94 < bitcast<i32>(40u));
  x_455 = (x_94 < 60);
  x_462 = (x_94 < 80);
  x_491 = (x_94 < bitcast<i32>(100u));
  x_510 = (x_94 < 120);
  x_539 = (x_94 < 140);
  x_582 = (x_94 < 160);
  x_595 = (x_94 < 180);
  x_583_phi = x_595;
  x_566_phi = x_582;
  x_528_phi = x_539;
  x_475_phi = x_510;
  x_456_phi = x_491;
  x_444_phi = x_462;
  x_413_phi = x_455;
  x_119_phi = x_429;
  if ((x_94 < bitcast<i32>(20u))) {
    let x_102 : f32 = A[0u];
    let x_104 : f32 = x_24.resolution.x;
    let x_107 : f32 = A[4u];
    let x_110 : f32 = x_24.resolution.y;
    x_GLF_color = vec4<f32>((x_102 / x_104), (x_107 / x_110), 1.0, 1.0);
  } else {
    var x_583 : bool;
    var x_566 : bool;
    var x_528 : bool;
    var x_475 : bool;
    var x_456 : bool;
    var x_444 : bool;
    var x_413 : bool;
    var x_574_phi : bool;
    var x_553_phi : bool;
    var x_511_phi : bool;
    var x_463_phi : bool;
    var x_445_phi : bool;
    var x_430_phi : bool;
    var x_140_phi : bool;
    x_583 = x_583_phi;
    x_566 = x_566_phi;
    x_528 = x_528_phi;
    x_475 = x_475_phi;
    x_456 = x_456_phi;
    x_444 = x_444_phi;
    x_413 = x_413_phi;
    let x_119 : bool = x_119_phi;
    x_574_phi = x_583;
    x_553_phi = x_566;
    x_511_phi = x_528;
    x_463_phi = x_475;
    x_445_phi = x_456;
    x_430_phi = x_444;
    x_140_phi = x_413;
    if (x_119) {
      let x_124 : f32 = A[5];
      let x_126 : f32 = x_24.resolution.x;
      let x_130 : f32 = A[9u];
      let x_132 : f32 = x_24.resolution.y;
      x_GLF_color = vec4<f32>((x_124 / x_126), (x_130 / x_132), 1.0, 1.0);
    } else {
      var x_574 : bool;
      var x_553 : bool;
      var x_511 : bool;
      var x_463 : bool;
      var x_445 : bool;
      var x_430 : bool;
      var x_529_phi : bool;
      var x_492_phi : bool;
      var x_457_phi : bool;
      var x_419_phi : bool;
      var x_414_phi : bool;
      var x_161_phi : bool;
      x_574 = x_574_phi;
      x_553 = x_553_phi;
      x_511 = x_511_phi;
      x_463 = x_463_phi;
      x_445 = x_445_phi;
      x_430 = x_430_phi;
      let x_140 : bool = x_140_phi;
      x_529_phi = x_574;
      x_492_phi = x_553;
      x_457_phi = x_511;
      x_419_phi = x_463;
      x_414_phi = x_445;
      x_161_phi = x_430;
      if (x_140) {
        let x_145 : f32 = A[10u];
        let x_147 : f32 = x_24.resolution.x;
        let x_151 : f32 = A[14];
        let x_153 : f32 = x_24.resolution.y;
        x_GLF_color = vec4<f32>((x_145 / x_147), (x_151 / x_153), 1.0, 1.0);
      } else {
        var x_529 : bool;
        var x_492 : bool;
        var x_457 : bool;
        var x_419 : bool;
        var x_414 : bool;
        var x_512_phi : bool;
        var x_458_phi : bool;
        var x_446_phi : bool;
        var x_415_phi : bool;
        var x_182_phi : bool;
        x_529 = x_529_phi;
        x_492 = x_492_phi;
        x_457 = x_457_phi;
        x_419 = x_419_phi;
        x_414 = x_414_phi;
        let x_161 : bool = x_161_phi;
        x_512_phi = x_529;
        x_458_phi = x_492;
        x_446_phi = x_457;
        x_415_phi = x_419;
        x_182_phi = x_414;
        if (x_161) {
          let x_166 : f32 = A[15];
          let x_168 : f32 = x_24.resolution.x;
          let x_172 : f32 = A[19u];
          let x_174 : f32 = x_24.resolution.y;
          x_GLF_color = vec4<f32>((x_166 / x_168), (x_172 / x_174), 1.0, 1.0);
        } else {
          var x_512 : bool;
          var x_458 : bool;
          var x_446 : bool;
          var x_415 : bool;
          var x_493_phi : bool;
          var x_431_phi : bool;
          var x_420_phi : bool;
          var x_202_phi : bool;
          x_512 = x_512_phi;
          x_458 = x_458_phi;
          x_446 = x_446_phi;
          x_415 = x_415_phi;
          let x_182 : bool = x_182_phi;
          x_493_phi = x_512;
          x_431_phi = x_458;
          x_420_phi = x_446;
          x_202_phi = x_415;
          if (x_182) {
            let x_186 : f32 = A[20];
            let x_188 : f32 = x_24.resolution.x;
            let x_192 : f32 = A[24];
            let x_194 : f32 = x_24.resolution.y;
            x_GLF_color = vec4<f32>((x_186 / x_188), (x_192 / x_194), 1.0, 1.0);
          } else {
            var x_493 : bool;
            var x_431 : bool;
            var x_420 : bool;
            var x_447_phi : bool;
            var x_421_phi : bool;
            var x_223_phi : bool;
            x_493 = x_493_phi;
            x_431 = x_431_phi;
            x_420 = x_420_phi;
            let x_202 : bool = x_202_phi;
            x_447_phi = x_493;
            x_421_phi = x_431;
            x_223_phi = x_420;
            if (x_202) {
              let x_207 : f32 = A[25];
              let x_209 : f32 = x_24.resolution.x;
              let x_213 : f32 = A[29];
              let x_215 : f32 = x_24.resolution.y;
              x_GLF_color = vec4<f32>((x_207 / x_209), (x_213 / x_215), 1.0, 1.0);
            } else {
              var x_447 : bool;
              var x_421 : bool;
              var x_422_phi : bool;
              var x_244_phi : bool;
              x_447 = x_447_phi;
              x_421 = x_421_phi;
              let x_223 : bool = x_223_phi;
              x_422_phi = x_447;
              x_244_phi = x_421;
              if (x_223) {
                let x_228 : f32 = A[30];
                let x_230 : f32 = x_24.resolution.x;
                let x_234 : f32 = A[34u];
                let x_236 : f32 = x_24.resolution.y;
                x_GLF_color = vec4<f32>((x_228 / x_230), (x_234 / x_236), 1.0, 1.0);
              } else {
                var x_422 : bool;
                var x_265_phi : bool;
                x_422 = x_422_phi;
                let x_244 : bool = x_244_phi;
                x_265_phi = x_422;
                if (x_244) {
                  let x_249 : f32 = A[35];
                  let x_251 : f32 = x_24.resolution.x;
                  let x_255 : f32 = A[39];
                  let x_257 : f32 = x_24.resolution.y;
                  x_GLF_color = vec4<f32>((x_249 / x_251), (x_255 / x_257), 1.0, 1.0);
                } else {
                  var x_265 : bool;
                  x_265 = x_265_phi;
                  if (x_265) {
                    let x_269 : f32 = A[40];
                    let x_271 : f32 = x_24.resolution.x;
                    let x_275 : f32 = A[44];
                    let x_277 : f32 = x_24.resolution.y;
                    x_GLF_color = vec4<f32>((x_269 / x_271), (x_275 / x_277), 1.0, 1.0);
                  } else {
                    if (x_265) {
                    } else {
                      discard;
                    }
                    let x_289 : f32 = A[45];
                    let x_291 : f32 = x_24.resolution.x;
                    let x_295 : f32 = A[49u];
                    let x_297 : f32 = x_24.resolution.y;
                    x_GLF_color = vec4<f32>((x_289 / x_291), (x_295 / x_297), 1.0, 1.0);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return;
}

struct main_out {
  [[location(0)]]
  x_GLF_color_1 : vec4<f32>;
};

[[stage(fragment)]]
fn main([[builtin(position)]] gl_FragCoord_param : vec4<f32>) -> main_out {
  gl_FragCoord = gl_FragCoord_param;
  main_1();
  return main_out(x_GLF_color);
}
