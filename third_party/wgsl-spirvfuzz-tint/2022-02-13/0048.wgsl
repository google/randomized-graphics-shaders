[[block]]
struct buf0{
polynomial:vec3<f32>;
};

[[block]]
struct buf1{
initial_xvalues:vec3<f32>;
};

[[group(0),binding(0)]]var<uniform>x_15:buf0;

[[group(0),binding(1)]]var<uniform>x_42:buf1;

var<private>x_GLF_color:vec4<f32>;

fn main_1(){
var x_235:f32;
var x_234:f32;
var x_233:f32;
var x_63:f32;
var x_465:f32;
var x_467:f32;
var x_64:f32;
var x_435:vec3<f32>;
var x_663:f32;
var x_235_phi:f32;
var x_234_phi:f32;
var x_233_phi:f32;
let x_945:vec3<f32>=vec3<f32>(2.0,-1.100000024,-1.100000024);
let x_789:vec4<f32>=vec4<f32>(0.0,4.0,1.0,-0.899999976);
let x_773:f32=x_42.initial_xvalues.z;
let x_591:vec3<f32>=vec3<f32>(-1.100000024,x_773,-1.100000024);
let x_790:vec3<f32>=vec3<f32>(1.0,1e-15,-1.100000024);
let x_575:f32=x_15.polynomial.z;
let x_791:vec3<f32>=vec3<f32>(x_773,2.0,4.0);
let x_579:f32=x_15.polynomial.x;
let x_946:vec3<f32>=vec3<f32>(2.0,1.0,4.0);
let x_931:f32=x_15.polynomial.x;
let x_525:vec4<f32>=vec4<f32>(x_579,x_931,x_575,-0.899999976);
let x_792:vec4<f32>=vec4<f32>(1.0,x_591);
let x_771:f32=x_15.polynomial.z;
let x_947:vec4<f32>=vec4<f32>(0.0,-1.100000024,-1.100000024,1e-15);
let x_685:vec4<f32>=vec4<f32>(x_771,x_575,x_575,4.0);
let x_379:f32=x_15.polynomial.z;
let x_686:vec3<f32>=vec3<f32>(0.0,-1.100000024,4.0);
let x_592:vec4<f32>=vec4<f32>(x_379,0.0,1e-15,x_579);
let x_793:vec4<f32>=vec4<f32>(x_591,x_771);
let x_385:f32=x_15.polynomial.x;
let x_526:vec3<f32>=vec3<f32>(-0.899999976,x_385,0.0);
let x_519:f32=x_15.polynomial.z;
let x_687:vec3<f32>=vec3<f32>(x_379,0.0,4.0);
let x_794:vec4<f32>=vec4<f32>(1e-15,x_575,x_519,1e-15);
let x_948:vec4<f32>=vec4<f32>(4.0,x_771,4.0,1e-15);
let x_923:f32=x_15.polynomial.z;
let x_473:vec4<f32>=vec4<f32>(x_923,0.0,x_519,1e-15);
let x_795:vec4<f32>=vec4<f32>(-0.899999976,x_687);
let x_949:vec3<f32>=vec3<f32>(4.0,x_575,-1.100000024);
let x_796:vec4<f32>=vec4<f32>(x_773,-0.899999976,4.0,0.0);
let x_429:vec3<f32>=vec3<f32>(-0.899999976,4.0,1e-15);
let x_688:vec3<f32>=vec3<f32>(x_379,-1.100000024,x_519);
let x_474:vec4<f32>=vec4<f32>(-0.899999976,-1.100000024,0.0,-0.899999976);
let x_797:vec4<f32>=vec4<f32>(x_429,x_579);
let x_423:f32=x_15.polynomial.z;
let x_950:vec4<f32>=vec4<f32>(x_385,1.0,1.0,x_771);
let x_779:f32=x_15.polynomial.z;
let x_593:vec3<f32>=vec3<f32>(-1.100000024,x_779,1e-15);
let x_430:vec4<f32>=vec4<f32>(1e-15,4.0,4.0,4.0);
let x_581:f32=x_15.polynomial.z;
let x_667:f32=x_15.polynomial.z;
let x_951:vec3<f32>=vec3<f32>(x_771,x_581,1.0);
let x_356:vec4<f32>=vec4<f32>(x_581,x_385,x_379,x_423);
let x_527:vec3<f32>=vec3<f32>(4.0,x_379,1e-15);
let x_798:vec3<f32>=vec3<f32>(x_575,x_579,4.0);
let x_952:vec4<f32>=vec4<f32>(vec3<f32>(x_667,x_423,-0.899999976),1e-15);
let x_783:f32=x_42.initial_xvalues.z;
let x_953:vec4<f32>=vec4<f32>(x_783,x_771,x_575,x_575);
let x_595:vec3<f32>=vec3<f32>(2.0,x_783,0.0);
let x_935:f32=x_42.initial_xvalues.z;
let x_799:vec4<f32>=vec4<f32>(x_385,x_667,1e-15,x_935);
let x_583:f32=x_15.polynomial.x;
let x_954:vec3<f32>=vec3<f32>(x_667,-0.899999976,x_923);
let x_943:f32=x_15.polynomial.x;
let x_800:vec4<f32>=vec4<f32>(x_943,x_429);
let x_528:vec4<f32>=vec4<f32>(x_583,4.0,2.0,0.0);
let x_955:vec3<f32>=vec3<f32>(x_581,2.0,x_423);
let x_919:f32=x_42.initial_xvalues.z;
let x_689:vec3<f32>=vec3<f32>(x_919,x_583,-1.100000024);
let x_801:vec4<f32>=vec4<f32>(x_385,x_429);
let x_475:vec4<f32>=vec4<f32>(-1.100000024,-1.100000024,x_423,x_385);
let x_44:f32=x_42.initial_xvalues.x;
let x_677:f32=x_15.polynomial.z;
let x_596:vec3<f32>=vec3<f32>(x_583,x_579,x_677);
let x_339:vec3<f32>=vec3<f32>(x_44,-1.100000024,1e-15);
let x_802:vec4<f32>=vec4<f32>(x_593,x_677);
let x_690:vec3<f32>=vec3<f32>(x_44,x_44,x_379);
let x_691:vec3<f32>=vec3<f32>(x_423,1.0,x_423);
let x_661:f32=x_15.polynomial.x;
let x_597:vec4<f32>=vec4<f32>(x_423,x_575,x_519,x_661);
let x_803:vec4<f32>=vec4<f32>(x_771,x_667,1e-15,-0.899999976);
let x_431:vec3<f32>=vec3<f32>(-0.899999976,x_379,0.0);
let x_804:vec4<f32>=vec4<f32>(x_667,x_690);
let x_956:vec4<f32>=vec4<f32>(1.0,x_527);
let x_476:vec4<f32>=vec4<f32>(4.0,x_44,x_423,-1.100000024);
let x_777:f32=x_15.polynomial.z;
let x_805:vec3<f32>=vec3<f32>(-0.899999976,x_581,x_771);
let x_957:vec4<f32>=vec4<f32>(x_798,x_779);
let x_692:vec3<f32>=vec3<f32>(x_777,0.0,-1.100000024);
let x_457:f32=x_42.initial_xvalues.z;
let x_806:vec4<f32>=vec4<f32>(x_687,x_519);
let x_598:vec3<f32>=vec3<f32>(x_579,x_385,-1.100000024);
let x_958:vec3<f32>=vec3<f32>(x_667,x_777,x_935);
let x_693:vec4<f32>=vec4<f32>(x_431,x_44);
let x_807:vec4<f32>=vec4<f32>(x_519,x_689);
let x_357:vec3<f32>=vec3<f32>(4.0,x_457,-1.100000024);
let x_808:vec4<f32>=vec4<f32>(x_593,x_773);
let x_959:vec3<f32>=vec3<f32>(x_583,x_667,x_779);
let x_47:f32=x_42.initial_xvalues.y;
let x_381:f32=x_15.polynomial.x;
let x_960:vec3<f32>=vec3<f32>(x_677,x_677,x_575);
let x_599:vec4<f32>=vec4<f32>(x_579,x_357);
let x_929:f32=x_15.polynomial.z;
let x_809:vec4<f32>=vec4<f32>(x_690,x_929);
let x_585:f32=x_42.initial_xvalues.z;
let x_961:vec4<f32>=vec4<f32>(x_457,x_661,x_575,x_585);
let x_694:vec4<f32>=vec4<f32>(x_429,x_385);
let x_529:vec3<f32>=vec3<f32>(x_47,x_585,-1.100000024);
let x_600:vec4<f32>=vec4<f32>(x_44,x_529);
let x_962:vec3<f32>=vec3<f32>(x_923,x_661,x_661);
let x_695:vec3<f32>=vec3<f32>(1e-15,4.0,x_381);
let x_432:vec3<f32>=vec3<f32>(-1.100000024,x_44,x_423);
let x_601:vec3<f32>=vec3<f32>(x_575,x_519,4.0);
let x_810:vec4<f32>=vec4<f32>(x_432,4.0);
let x_963:vec4<f32>=vec4<f32>(x_385,x_379,x_929,x_929);
let x_530:vec4<f32>=vec4<f32>(x_457,0.0,-0.899999976,x_381);
let x_478:vec4<f32>=vec4<f32>(x_457,x_379,x_44,1e-15);
let x_964:vec3<f32>=vec3<f32>(x_677,x_385,4.0);
let x_602:vec4<f32>=vec4<f32>(0.0,4.0,4.0,-0.899999976);
let x_387:vec3<f32>=vec3<f32>(x_381,x_385,x_47);
let x_811:vec4<f32>=vec4<f32>(x_593,x_519);
let x_925:f32=x_42.initial_xvalues.z;
let x_812:vec4<f32>=vec4<f32>(x_529,x_925);
let x_461:f32=x_15.polynomial.z;
let x_479:vec4<f32>=vec4<f32>(x_387,x_423);
let x_358:vec3<f32>=vec3<f32>(x_381,x_461,0.0);
let x_459:f32=x_42.initial_xvalues.z;
let x_965:vec4<f32>=vec4<f32>(x_381,x_598);
let x_480:vec4<f32>=vec4<f32>(-0.899999976,x_429);
let x_433:vec3<f32>=vec3<f32>(x_423,x_379,x_459);
let x_813:vec4<f32>=vec4<f32>(x_433,x_459);
let x_673:f32=x_15.polynomial.z;
let x_814:vec4<f32>=vec4<f32>(x_777,x_583,x_575,1e-15);
let x_915:f32=x_15.polynomial.x;
let x_531:vec4<f32>=vec4<f32>(x_915,1e-15,x_385,x_673);
let x_388:vec4<f32>=vec4<f32>(x_339,4.0);
let x_481:vec3<f32>=vec3<f32>(x_381,1e-15,1e-15);
let x_375:f32=x_15.polynomial.z;
let x_340:vec4<f32>=vec4<f32>(-1.100000024,x_375,1e-15,x_47);
let x_359:vec4<f32>=vec4<f32>(-0.899999976,x_339);
let x_696:vec4<f32>=vec4<f32>(x_44,x_357);
let x_966:vec3<f32>=vec3<f32>(x_423,x_779,x_381);
let x_603:vec4<f32>=vec4<f32>(x_457,x_459,x_581,x_457);
let x_967:vec4<f32>=vec4<f32>(x_429,x_585);
let x_697:vec4<f32>=vec4<f32>(4.0,x_459,x_381,4.0);
let x_968:vec3<f32>=vec3<f32>(2.0,x_771,x_375);
let x_815:vec4<f32>=vec4<f32>(x_375,x_695);
let x_969:vec4<f32>=vec4<f32>(x_783,x_432);
let x_50:f32=x_42.initial_xvalues.z;
let x_389:vec3<f32>=vec3<f32>(0.0,x_44,x_47);
x_235_phi=x_50;
x_234_phi=x_47;
x_233_phi=x_44;
loop{
var x_139:f32;
x_235=x_235_phi;
x_234=x_234_phi;
x_233=x_233_phi;
let x_816:vec4<f32>=vec4<f32>(x_519,x_432);
let x_698:vec3<f32>=vec3<f32>(4.0,x_457,x_381);
x_63=(x_233 - x_234);
let x_817:vec4<f32>=vec4<f32>(x_385,x_698);
let x_970:vec3<f32>=vec3<f32>(x_381,x_423,x_47);
let x_971:vec4<f32>=vec4<f32>(x_595,x_47);
x_465=x_15.polynomial.x;
let x_604:vec4<f32>=vec4<f32>(x_431,x_381);
let x_699:vec3<f32>=vec3<f32>(x_519,-0.899999976,x_423);
x_467=x_15.polynomial.x;
let x_434:vec4<f32>=vec4<f32>(x_233,x_465,x_467,-1.100000024);
let x_972:vec4<f32>=vec4<f32>(x_358,x_381);
let x_605:vec3<f32>=vec3<f32>(x_583,x_381,x_457);
let x_700:vec4<f32>=vec4<f32>(x_529,x_63);
let x_818:vec4<f32>=vec4<f32>(x_581,x_677,x_581,x_63);
let x_973:vec3<f32>=vec3<f32>(x_467,x_44,x_771);
x_64=abs(x_63);
let x_390:vec4<f32>=vec4<f32>(x_233,x_358);
let x_701:vec4<f32>=vec4<f32>(x_385,x_63,x_423,x_585);
let x_341:vec4<f32>=vec4<f32>(x_233,x_50,4.0,0.0);
let x_534:vec3<f32>=vec3<f32>(x_423,-0.899999976,x_50);
let x_819:vec4<f32>=vec4<f32>(x_688,x_423);
let x_702:vec4<f32>=vec4<f32>(x_529,x_583);
let x_535:vec3<f32>=vec3<f32>(x_50,x_385,x_235);
let x_820:vec3<f32>=vec3<f32>(1e-15,x_50,x_234);
let x_974:vec3<f32>=vec3<f32>(x_467,x_63,x_233);
x_435=vec3<f32>(x_379,x_47,0.0);
let x_821:vec4<f32>=vec4<f32>(x_673,x_387);
x_663=x_15.polynomial.z;
let x_975:vec4<f32>=vec4<f32>(x_673,x_601);
let x_703:vec4<f32>=vec4<f32>(x_519,x_595);
let x_606:vec4<f32>=vec4<f32>(vec3<f32>(x_381,x_44,1e-15),x_663);
let x_536:vec4<f32>=vec4<f32>(x_50,x_429);
let x_704:vec4<f32>=vec4<f32>(x_581,x_519,x_585,x_581);
if((x_64>=1e-15)){
}else{
break;
}

continuing{
let x_537:vec3<f32>=vec3<f32>(x_381,x_465,x_234);
let x_705:vec4<f32>=vec4<f32>(x_529,-1.100000024);
let x_71:f32=(x_235 - x_233);
let x_391:vec4<f32>=vec4<f32>(x_339,x_71);
let x_976:vec4<f32>=vec4<f32>(1e-15,x_805);
let x_822:vec4<f32>=vec4<f32>(x_689,x_661);
let x_436:vec4<f32>=vec4<f32>(x_235,x_47,-1.100000024,x_64);
let x_977:vec4<f32>=vec4<f32>(x_465,x_537);
let x_360:vec4<f32>=vec4<f32>(x_64,0.0,x_50,x_47);
let x_823:vec3<f32>=vec3<f32>(1.0,x_677,x_667);
let x_824:vec3<f32>=vec3<f32>(0.0,x_233,x_381);
let x_681:f32=x_42.initial_xvalues.z;
let x_538:vec4<f32>=vec4<f32>(x_681,1e-15,x_233,x_379);
let x_587:f32=x_15.polynomial.z;
let x_437:vec4<f32>=vec4<f32>(x_587,x_375,-1.100000024,x_381);
let x_539:vec4<f32>=vec4<f32>(x_381,x_423,-1.100000024,x_50);
let x_706:vec4<f32>=vec4<f32>(x_595,x_64);
let x_607:vec3<f32>=vec3<f32>(x_64,x_519,-1.100000024);
let x_75:f32=(x_234 - x_233);
let x_608:vec4<f32>=vec4<f32>(x_385,0.0,-0.899999976,x_459);
let x_469:f32=x_15.polynomial.z;
let x_392:vec3<f32>=vec3<f32>(x_64,x_469,x_379);
let x_540:vec4<f32>=vec4<f32>(x_235,x_469,x_235,x_47);
let x_609:vec4<f32>=vec4<f32>(4.0,x_71,x_44,x_575);
let x_825:vec4<f32>=vec4<f32>(-1.100000024,x_358);
let x_708:vec4<f32>=vec4<f32>(x_537,x_667);
let x_393:vec3<f32>=vec3<f32>(x_47,x_235,x_385);
let x_361:vec3<f32>=vec3<f32>(x_64,x_47,-1.100000024);
let x_610:vec4<f32>=vec4<f32>(x_534,x_519);
let x_978:vec3<f32>=vec3<f32>(4.0,x_681,1.0);
let x_161:f32=x_15.polynomial.x;
let x_709:vec4<f32>=vec4<f32>(x_534,x_465);
let x_979:vec4<f32>=vec4<f32>(x_358,x_587);
let x_611:vec3<f32>=vec3<f32>(x_234,x_64,x_64);
let x_775:f32=x_15.polynomial.z;
let x_980:vec3<f32>=vec3<f32>(x_71,x_375,x_771);
let x_482:vec3<f32>=vec3<f32>(x_71,x_71,x_64);
let x_826:vec3<f32>=vec3<f32>(x_583,x_677,x_381);
let x_981:vec3<f32>=vec3<f32>(x_663,x_935,x_681);
let x_354:f32=x_15.polynomial.z;
let x_711:vec3<f32>=vec3<f32>(x_375,-1.100000024,x_681);
let x_827:vec3<f32>=vec3<f32>(x_777,x_771,x_379);
let x_163:f32=pow(x_235,x_354);
let x_828:vec3<f32>=vec3<f32>(x_47,x_161,x_773);
let x_982:vec4<f32>=vec4<f32>(x_711,x_931);
let x_781:f32=x_15.polynomial.z;
let x_829:vec3<f32>=vec3<f32>(x_585,x_459,x_385);
let x_712:vec4<f32>=vec4<f32>(x_587,x_781,x_677,x_385);
let x_830:vec3<f32>=vec3<f32>(x_663,x_581,x_75);
let x_612:vec4<f32>=vec4<f32>(x_467,x_459,x_385,x_585);
let x_713:vec4<f32>=vec4<f32>(x_423,x_527);
let x_831:vec4<f32>=vec4<f32>(x_389,x_75);
let x_483:vec4<f32>=vec4<f32>(x_163,x_358);
let x_164:f32=(x_161*x_163);
let x_983:vec4<f32>=vec4<f32>(x_429,x_235);
let x_939:f32=x_15.polynomial.x;
let x_832:vec4<f32>=vec4<f32>(x_939,x_393);
let x_714:vec4<f32>=vec4<f32>(x_667,x_527);
let x_517:f32=x_42.initial_xvalues.z;
let x_984:vec3<f32>=vec3<f32>(x_667,x_783,x_47);
let x_438:vec4<f32>=vec4<f32>(x_357,x_517);
let x_985:vec3<f32>=vec3<f32>(x_71,x_925,2.0);
let x_577:f32=x_15.polynomial.z;
let x_484:vec4<f32>=vec4<f32>(x_577,4.0,x_163,x_47);
let x_715:vec4<f32>=vec4<f32>(x_591,x_467);
let x_614:vec4<f32>=vec4<f32>(x_385,x_235,x_354,x_467);
let x_986:vec3<f32>=vec3<f32>(x_677,x_667,x_923);
let x_833:vec4<f32>=vec4<f32>(x_379,vec3<f32>(x_775,x_375,x_233));
let x_394:vec3<f32>=vec3<f32>(x_75,x_75,x_63);
let x_541:vec3<f32>=vec3<f32>(-0.899999976,x_50,x_71);
let x_615:vec3<f32>=vec3<f32>(x_235,x_354,x_575);
let x_716:vec3<f32>=vec3<f32>(x_467,x_585,x_519);
let x_542:vec3<f32>=vec3<f32>(x_161,x_461,-0.899999976);
let x_166:f32=x_15.polynomial.y;
let x_168:f32=(x_166*x_235);
let x_169:f32=(x_164+x_168);
let x_987:vec4<f32>=vec4<f32>(x_698,x_583);
let x_717:vec4<f32>=vec4<f32>(x_392,x_465);
let x_485:vec4<f32>=vec4<f32>(x_375,x_44,x_164,x_381);
let x_834:vec4<f32>=vec4<f32>(x_686,x_579);
let x_486:vec4<f32>=vec4<f32>(x_394,x_457);
let x_362:vec4<f32>=vec4<f32>(x_339,x_63);
let x_171:f32=x_15.polynomial.z;
let x_543:vec3<f32>=vec3<f32>(x_379,x_457,x_459);
let x_836:vec4<f32>=vec4<f32>(x_235,x_595);
let x_616:vec3<f32>=vec3<f32>(x_235,x_465,x_577);
let x_941:f32=x_15.polynomial.z;
let x_837:vec3<f32>=vec3<f32>(x_677,x_166,x_941);
let x_488:vec3<f32>=vec3<f32>(x_457,x_457,x_63);
let x_363:vec3<f32>=vec3<f32>(-0.899999976,x_354,x_47);
let x_838:vec4<f32>=vec4<f32>(x_771,x_392);
let x_988:vec4<f32>=vec4<f32>(1.0,x_537);
let x_785:f32=x_15.polynomial.z;
let x_718:vec4<f32>=vec4<f32>(x_667,0.0,x_785,x_168);
let x_989:vec4<f32>=vec4<f32>(x_457,vec3<f32>(x_44,1e-15,x_354));
let x_172:f32=(x_169+x_171);
let x_839:vec3<f32>=vec3<f32>(x_773,1.0,x_773);
let x_618:vec3<f32>=vec3<f32>(x_168,x_579,x_161);
let x_395:vec3<f32>=vec3<f32>(-0.899999976,x_235,0.0);
let x_990:vec3<f32>=vec3<f32>(x_163,x_915,x_935);
let x_840:vec4<f32>=vec4<f32>(x_783,x_469,x_71,x_581);
let x_719:vec3<f32>=vec3<f32>(x_381,x_583,x_63);
let x_544:vec4<f32>=vec4<f32>(x_339,x_44);
let x_991:vec3<f32>=vec3<f32>(x_457,1.0,x_943);
let x_769:f32=x_15.polynomial.z;
let x_619:vec3<f32>=vec3<f32>(x_75,x_457,x_769);
let x_439:vec3<f32>=vec3<f32>(1e-15,x_168,x_164);
let x_490:vec3<f32>=vec3<f32>(x_375,x_63,4.0);
let x_992:vec3<f32>=vec3<f32>(x_931,-1.100000024,x_64);
let x_720:vec4<f32>=vec4<f32>(x_583,x_363);
let x_841:vec4<f32>=vec4<f32>(x_783,x_481);
let x_545:vec3<f32>=vec3<f32>(x_459,x_63,x_71);
let x_396:vec4<f32>=vec4<f32>(x_375,x_358);
let x_337:f32=x_15.polynomial.z;
let x_842:vec3<f32>=vec3<f32>(x_50,x_581,-0.899999976);
let x_993:vec3<f32>=vec3<f32>(x_169,x_379,x_71);
let x_491:vec3<f32>=vec3<f32>(x_71,x_171,x_44);
let x_178:f32=pow(x_233,x_337);
let x_440:vec4<f32>=vec4<f32>(x_71,x_63,x_337,x_423);
let x_921:f32=x_15.polynomial.z;
let x_994:vec3<f32>=vec3<f32>(x_943,x_939,x_233);
let x_843:vec3<f32>=vec3<f32>(x_577,x_921,x_354);
let x_995:vec4<f32>=vec4<f32>(x_469,x_395);
let x_179:f32=(x_161*x_178);
let x_996:vec3<f32>=vec3<f32>(x_663,x_375,x_169);
let x_620:vec4<f32>=vec4<f32>(x_233,x_389);
let x_721:vec3<f32>=vec3<f32>(x_577,x_577,x_47);
let x_523:f32=x_42.initial_xvalues.z;
let x_844:vec4<f32>=vec4<f32>(x_690,x_777);
let x_397:vec4<f32>=vec4<f32>(x_523,x_358);
let x_492:vec4<f32>=vec4<f32>(x_389,1e-15);
let x_621:vec3<f32>=vec3<f32>(x_423,x_164,4.0);
let x_183:f32=(x_166*x_233);
let x_364:vec4<f32>=vec4<f32>(vec3<f32>(4.0,x_235,x_44),x_337);
let x_845:vec3<f32>=vec3<f32>(x_771,x_63,x_673);
let x_997:vec4<f32>=vec4<f32>(x_601,x_921);
let x_846:vec3<f32>=vec3<f32>(x_773,x_581,x_575);
let x_521:f32=x_42.initial_xvalues.z;
let x_547:vec4<f32>=vec4<f32>(x_435,x_354);
let x_847:vec4<f32>=vec4<f32>(x_469,x_719);
let x_622:vec4<f32>=vec4<f32>(x_337,x_357);
let x_398:vec4<f32>=vec4<f32>(x_64,x_47,x_521,x_179);
let x_548:vec3<f32>=vec3<f32>(x_381,x_523,x_521);
let x_441:vec3<f32>=vec3<f32>(x_47,x_379,x_235);
let x_623:vec3<f32>=vec3<f32>(x_164,x_375,x_577);
let x_998:vec3<f32>=vec3<f32>(x_457,x_461,x_661);
let x_848:vec3<f32>=vec3<f32>(x_681,x_375,x_47);
let x_722:vec3<f32>=vec3<f32>(x_677,x_63,x_575);
let x_184:f32=(x_179+x_183);
let x_849:vec4<f32>=vec4<f32>(x_375,x_395);
let x_187:f32=(x_184+x_171);
let x_850:vec3<f32>=vec3<f32>(x_581,x_677,-0.899999976);
let x_999:vec4<f32>=vec4<f32>(x_431,x_379);
let x_723:vec4<f32>=vec4<f32>(x_64,x_593);
let x_442:vec3<f32>=vec3<f32>(-1.100000024,x_375,x_178);
let x_724:vec4<f32>=vec4<f32>(x_491,x_184);
let x_1000:vec3<f32>=vec3<f32>(x_773,x_769,x_943);
let x_550:vec4<f32>=vec4<f32>(x_363,x_47);
let x_83:f32=(x_172 - x_187);
let x_851:vec4<f32>=vec4<f32>(x_184,x_692);
let x_624:vec3<f32>=vec3<f32>(x_575,x_519,x_235);
let x_1001:vec4<f32>=vec4<f32>(x_50,vec3<f32>(x_234,x_379,x_677));
let x_852:vec3<f32>=vec3<f32>(x_771,x_587,x_457);
let x_427:f32=x_15.polynomial.z;
let x_625:vec3<f32>=vec3<f32>(x_187,x_523,-1.100000024);
let x_1002:vec4<f32>=vec4<f32>(x_354,x_848);
let x_853:vec3<f32>=vec3<f32>(x_184,x_427,x_781);
let x_494:vec3<f32>=vec3<f32>(x_179,x_179,x_427);
let x_626:vec4<f32>=vec4<f32>(x_187,x_543);
let x_1003:vec3<f32>=vec3<f32>(x_457,x_519,x_163);
let x_933:f32=x_15.polynomial.z;
let x_193:f32=pow(x_234,x_427);
let x_1004:vec3<f32>=vec3<f32>(x_234,x_673,-1.100000024);
let x_854:vec4<f32>=vec4<f32>(x_234,x_526);
let x_551:vec3<f32>=vec3<f32>(x_172,x_521,x_169);
let x_855:vec3<f32>=vec3<f32>(x_517,x_769,x_337);
let x_1005:vec4<f32>=vec4<f32>(x_583,x_619);
let x_727:vec3<f32>=vec3<f32>(x_587,x_379,x_457);
let x_194:f32=(x_161*x_193);
let x_728:vec3<f32>=vec3<f32>(x_375,x_457,x_587);
let x_399:vec4<f32>=vec4<f32>(x_233,x_357);
let x_198:f32=(x_166*x_234);
let x_856:vec3<f32>=vec3<f32>(x_235,x_583,x_184);
let x_1006:vec3<f32>=vec3<f32>(x_381,x_575,x_673);
let x_729:vec3<f32>=vec3<f32>(x_385,x_184,x_581);
let x_495:vec4<f32>=vec4<f32>(x_375,x_198,x_187,x_423);
let x_1007:vec4<f32>=vec4<f32>(vec3<f32>(x_183,x_171,x_385),-0.899999976);
let x_552:vec4<f32>=vec4<f32>(x_178,x_488);
let x_857:vec4<f32>=vec4<f32>(x_719,x_163);
let x_199:f32=(x_194+x_198);
let x_496:vec4<f32>=vec4<f32>(0.0,x_467,x_194,x_172);
let x_730:vec4<f32>=vec4<f32>(x_433,2.0);
let x_679:f32=x_15.polynomial.z;
let x_858:vec4<f32>=vec4<f32>(x_169,x_199,x_234,x_161);
let x_1008:vec3<f32>=vec3<f32>(x_63,x_467,x_661);
let x_628:vec3<f32>=vec3<f32>(x_64,x_679,x_198);
let x_1009:vec4<f32>=vec4<f32>(x_820,x_198);
let x_202:f32=(x_199+x_171);
let x_1010:vec3<f32>=vec3<f32>(x_577,x_169,x_427);
let x_91:f32=(x_202 - x_187);
let x_1011:vec3<f32>=vec3<f32>(x_523,x_679,x_521);
let x_629:vec4<f32>=vec4<f32>(x_488,x_91);
let x_400:vec4<f32>=vec4<f32>(x_44,x_169,x_168,x_71);
let x_859:vec3<f32>=vec3<f32>(x_777,x_661,x_164);
let x_1012:vec3<f32>=vec3<f32>(x_679,x_677,x_161);
let x_1013:vec4<f32>=vec4<f32>(x_777,x_931,x_681,x_163);
let x_95:f32=(x_75*x_83);
let x_553:vec3<f32>=vec3<f32>(x_517,x_519,x_183);
let x_1014:vec4<f32>=vec4<f32>(x_915,x_596);
let x_401:vec4<f32>=vec4<f32>(x_339,x_184);
let x_731:vec4<f32>=vec4<f32>(x_457,x_393);
let x_1015:vec4<f32>=vec4<f32>(x_529,x_519);
let x_443:vec4<f32>=vec4<f32>(x_64,x_179,x_95,x_198);
let x_554:vec3<f32>=vec3<f32>(x_427,x_172,x_427);
let x_98:f32=(x_71*x_91);
let x_1016:vec4<f32>=vec4<f32>(vec3<f32>(x_354,-1.100000024,x_519),x_579);
let x_365:vec3<f32>=vec3<f32>(x_198,x_178,x_169);
let x_99:f32=(x_95 - x_98);
let x_733:vec4<f32>=vec4<f32>(x_667,x_529);
let x_861:vec3<f32>=vec3<f32>(x_234,-0.899999976,x_71);
let x_498:vec4<f32>=vec4<f32>(x_361,x_233);
let x_630:vec4<f32>=vec4<f32>(-0.899999976,x_529);
let x_444:vec4<f32>=vec4<f32>(4.0,x_50,x_354,x_184);
let x_862:vec4<f32>=vec4<f32>(x_202,x_619);
let x_1017:vec4<f32>=vec4<f32>(x_777,x_433);
let x_1018:vec3<f32>=vec3<f32>(x_459,x_919,x_667);
let x_734:vec3<f32>=vec3<f32>(x_459,x_585,x_198);
let x_366:vec3<f32>=vec3<f32>(0.0,x_193,x_161);
let x_863:vec4<f32>=vec4<f32>(x_163,x_194,x_198,x_575);
let x_735:vec3<f32>=vec3<f32>(x_194,x_95,x_63);
let x_556:vec3<f32>=vec3<f32>(x_168,x_163,x_379);
let x_352:f32=x_15.polynomial.z;
let x_500:vec4<f32>=vec4<f32>(x_392,x_179);
let x_1019:vec3<f32>=vec3<f32>(x_47,x_781,x_198);
let x_101:f32=pow(x_71,x_352);
let x_665:f32=x_15.polynomial.z;
let x_557:vec4<f32>=vec4<f32>(x_375,x_179,1e-15,x_665);
let x_632:vec3<f32>=vec3<f32>(x_161,x_83,x_83);
let x_1020:vec3<f32>=vec3<f32>(x_83,x_50,x_677);
let x_736:vec3<f32>=vec3<f32>(x_579,x_187,x_202);
let x_367:vec3<f32>=vec3<f32>(x_47,x_64,x_169);
let x_865:vec3<f32>=vec3<f32>(x_771,x_517,-1.100000024);
let x_103:f32=(x_101*x_75);
let x_402:vec4<f32>=vec4<f32>(x_163,x_163,x_352,x_83);
let x_737:vec4<f32>=vec4<f32>(x_587,x_363);
let x_866:vec4<f32>=vec4<f32>(x_387,x_379);
let x_683:f32=x_15.polynomial.z;
let x_558:vec3<f32>=vec3<f32>(x_164,x_683,x_91);
let x_1021:vec3<f32>=vec3<f32>(x_427,x_193,x_199);
let x_1022:vec4<f32>=vec4<f32>(x_394,x_943);
let x_463:f32=x_15.polynomial.z;
let x_738:vec3<f32>=vec3<f32>(x_579,x_354,x_352);
let x_1023:vec3<f32>=vec3<f32>(x_161,x_352,x_354);
let x_867:vec3<f32>=vec3<f32>(x_575,x_194,x_171);
let x_559:vec4<f32>=vec4<f32>(x_463,x_387);
let x_868:vec4<f32>=vec4<f32>(vec3<f32>(x_933,x_233,x_337),x_183);
let x_403:vec4<f32>=vec4<f32>(x_178,x_178,x_75,x_463);
let x_383:f32=x_15.polynomial.z;
let x_869:vec3<f32>=vec3<f32>(-0.899999976,x_521,x_383);
let x_1024:vec3<f32>=vec3<f32>(x_234,x_184,x_103);
let x_739:vec4<f32>=vec4<f32>(x_491,x_423);
let x_105:f32=pow(x_75,x_383);
let x_1025:vec3<f32>=vec3<f32>(x_939,x_783,x_179);
let x_633:vec4<f32>=vec4<f32>(x_235,x_365);
let x_1026:vec3<f32>=vec3<f32>(2.0,x_233,x_95);
let x_108:f32=(x_103 -(x_105*x_71));
let x_1027:vec4<f32>=vec4<f32>(x_163,x_711);
let x_740:vec4<f32>=vec4<f32>(x_337,x_365);
let x_870:vec4<f32>=vec4<f32>(x_467,x_395);
let x_404:vec4<f32>=vec4<f32>(x_63,x_354,x_71,x_169);
let x_1028:vec4<f32>=vec4<f32>(x_168,x_187,x_457,x_915);
let x_871:vec4<f32>=vec4<f32>(x_385,x_585,x_352,x_665);
let x_109:f32=(x_99/x_108);
let x_741:vec3<f32>=vec3<f32>(x_98,x_517,x_385);
let x_114:f32=(x_109*x_101);
let x_1029:vec4<f32>=vec4<f32>(x_848,x_169);
let x_115:f32=(x_83 - x_114);
let x_1030:vec3<f32>=vec3<f32>(x_168,x_98,x_171);
let x_872:vec4<f32>=vec4<f32>(vec3<f32>(x_385,x_677,x_469),x_587);
let x_634:vec3<f32>=vec3<f32>(x_354,x_379,x_115);
let x_1031:vec3<f32>=vec3<f32>(x_579,x_83,x_683);
let x_635:vec3<f32>=vec3<f32>(x_465,x_91,x_193);
let x_344:vec4<f32>=vec4<f32>(x_105,x_50,x_337,x_105);
let x_446:vec3<f32>=vec3<f32>(x_98,x_385,-1.100000024);
let x_502:vec4<f32>=vec4<f32>(vec3<f32>(x_75,x_235,x_168),x_63);
let x_405:vec4<f32>=vec4<f32>(4.0,x_169,x_198,x_161);
let x_561:vec3<f32>=vec3<f32>(x_171,x_385,x_375);
let x_447:vec4<f32>=vec4<f32>(x_365,x_164);
let x_873:vec4<f32>=vec4<f32>(x_381,vec3<f32>(x_385,x_169,x_161));
let x_874:vec4<f32>=vec4<f32>(vec3<f32>(x_467,x_583,x_523),x_577);
let x_1032:vec4<f32>=vec4<f32>(x_543,x_773);
let x_743:vec3<f32>=vec3<f32>(x_381,x_679,x_105);
let x_637:vec3<f32>=vec3<f32>(x_95,x_585,x_178);
let x_1033:vec4<f32>=vec4<f32>(x_679,x_941,x_585,x_383);
let x_875:vec3<f32>=vec3<f32>(x_575,x_465,x_168);
let x_117:f32=(x_115/x_71);
let x_1034:vec4<f32>=vec4<f32>(x_91,x_166,x_178,x_929);
let x_876:vec3<f32>=vec3<f32>(x_679,x_354,x_168);
let x_1035:vec4<f32>=vec4<f32>(x_63,x_548);
let x_421:f32=x_15.polynomial.z;
let x_877:vec3<f32>=vec3<f32>(x_117,x_202,x_575);
let x_744:vec3<f32>=vec3<f32>(x_172,x_233,x_517);
let x_878:vec3<f32>=vec3<f32>(x_47,x_163,x_769);
let x_669:f32=x_15.polynomial.z;
let x_879:vec4<f32>=vec4<f32>(x_115,x_719);
let x_745:vec3<f32>=vec3<f32>(x_667,x_47,x_587);
let x_880:vec3<f32>=vec3<f32>(x_108,x_352,x_44);
let x_562:vec4<f32>=vec4<f32>(vec3<f32>(x_161,x_75,x_172),x_91);
let x_881:vec4<f32>=vec4<f32>(x_553,x_171);
let x_1036:vec3<f32>=vec3<f32>(x_75,-1.100000024,x_921);
let x_638:vec3<f32>=vec3<f32>(x_91,x_517,x_179);
let x_123:f32=(x_421*x_187);
let x_882:vec4<f32>=vec4<f32>(x_194,x_553);
let x_126:f32=sign(x_117);
let x_1037:vec3<f32>=vec3<f32>(x_166,x_98,x_463);
let x_883:vec4<f32>=vec4<f32>(x_575,x_711);
let x_747:vec4<f32>=vec4<f32>(x_194,vec3<f32>(x_98,x_83,x_166));
let x_563:vec4<f32>=vec4<f32>(x_385,vec3<f32>(x_95,x_115,x_117));
let x_884:vec4<f32>=vec4<f32>(x_457,vec3<f32>(x_583,-0.899999976,x_469));
let x_748:vec3<f32>=vec3<f32>(x_47,x_683,x_579);
let x_1038:vec3<f32>=vec3<f32>(x_781,-1.100000024,x_575);
let x_449:vec4<f32>=vec4<f32>(x_193,x_163,x_375,x_385);
let x_885:vec3<f32>=vec3<f32>(x_114,x_661,x_667);
let x_425:f32=x_15.polynomial.z;
let x_1039:vec3<f32>=vec3<f32>(x_117,x_114,x_44);
let x_749:vec4<f32>=vec4<f32>(x_108,x_459,x_587,2.0);
let x_505:vec4<f32>=vec4<f32>(x_187,x_117,x_63,x_166);
let x_128:f32=pow(x_117,x_425);
let x_886:vec3<f32>=vec3<f32>(x_108,x_179,1e-15);
let x_1040:vec3<f32>=vec3<f32>(x_521,x_421,x_929);
let x_639:vec3<f32>=vec3<f32>(x_163,x_164,x_337);
let x_564:vec3<f32>=vec3<f32>(x_98,x_123,x_183);
let x_506:vec4<f32>=vec4<f32>(x_47,x_433);
let x_1041:vec3<f32>=vec3<f32>(x_337,x_921,x_935);
let x_887:vec4<f32>=vec4<f32>(vec3<f32>(x_463,x_669,x_95),-1.100000024);
let x_1042:vec3<f32>=vec3<f32>(x_463,-1.100000024,x_943);
let x_450:vec3<f32>=vec3<f32>(x_179,x_44,x_421);
let x_406:vec4<f32>=vec4<f32>(x_83,x_126,x_193,x_161);
let x_1043:vec4<f32>=vec4<f32>(x_99,vec3<f32>(x_161,x_463,x_234));
let x_1044:vec4<f32>=vec4<f32>(x_579,vec3<f32>(x_63,x_679,x_64));
let x_888:vec3<f32>=vec3<f32>(x_199,x_63,x_427);
let x_787:f32=x_15.polynomial.x;
let x_750:vec4<f32>=vec4<f32>(x_787,x_523,x_337,x_179);
let x_1045:vec3<f32>=vec3<f32>(x_777,x_91,x_423);
let x_368:vec4<f32>=vec4<f32>(x_233,x_64,x_47,x_172);
let x_751:vec3<f32>=vec3<f32>(x_587,x_199,x_44);
let x_565:vec3<f32>=vec3<f32>(x_105,x_64,x_114);
let x_507:vec3<f32>=vec3<f32>(-1.100000024,x_459,x_421);
let x_1046:vec3<f32>=vec3<f32>(x_385,x_198,x_577);
let x_889:vec4<f32>=vec4<f32>(x_193,x_172,x_521,x_467);
let x_1047:vec3<f32>=vec3<f32>(x_123,1e-15,x_785);
let x_752:vec4<f32>=vec4<f32>(x_425,x_596);
let x_890:vec3<f32>=vec3<f32>(x_521,x_421,x_467);
let x_640:vec4<f32>=vec4<f32>(x_379,x_235,x_354,x_172);
let x_891:vec3<f32>=vec3<f32>(x_64,x_585,x_117);
let x_641:vec3<f32>=vec3<f32>(x_383,x_198,x_585);
let x_133:f32=((4.0*x_109)*x_187);
let x_1048:vec3<f32>=vec3<f32>(x_575,x_519,x_921);
let x_451:vec3<f32>=vec3<f32>(x_354,x_172,x_168);
let x_134:f32=(x_128 - x_133);
let x_753:vec4<f32>=vec4<f32>(x_587,x_109,x_661,x_91);
let x_1049:vec3<f32>=vec3<f32>(x_235,x_781,x_194);
let x_345:vec3<f32>=vec3<f32>(x_202,x_163,0.0);
let x_135:f32=sqrt(x_134);
let x_136:f32=(x_126*x_135);
let x_1050:vec4<f32>=vec4<f32>(0.0,vec3<f32>(x_459,x_385,x_184));
let x_892:vec4<f32>=vec4<f32>(2.0,x_392);
let x_452:vec3<f32>=vec3<f32>(4.0,x_354,x_75);
let x_1051:vec3<f32>=vec3<f32>(x_64,x_135,x_166);
let x_893:vec3<f32>=vec3<f32>(x_178,x_679,x_461);
let x_1052:vec4<f32>=vec4<f32>(vec3<f32>(x_99,2.0,x_166),x_517);
let x_642:vec4<f32>=vec4<f32>(x_383,vec3<f32>(x_427,x_161,x_168));
let x_369:vec3<f32>=vec3<f32>(x_198,x_101,x_63);
let x_407:vec3<f32>=vec3<f32>(x_198,x_199,x_202);
let x_1053:vec4<f32>=vec4<f32>(x_367,x_469);
let x_754:vec4<f32>=vec4<f32>(1e-15,x_548);
let x_453:vec4<f32>=vec4<f32>(x_367,x_128);
let x_755:vec3<f32>=vec3<f32>(x_673,x_579,x_198);
let x_643:vec4<f32>=vec4<f32>(x_50,vec3<f32>(x_457,x_423,x_178));
let x_346:vec4<f32>=vec4<f32>(x_136,x_161,x_168,x_172);
let x_454:vec4<f32>=vec4<f32>(x_128,x_361);
let x_1054:vec3<f32>=vec3<f32>(x_166,x_44,x_71);
let x_644:vec3<f32>=vec3<f32>(x_101,4.0,0.0);
let x_756:vec4<f32>=vec4<f32>(x_233,x_133,x_383,x_123);
let x_566:vec3<f32>=vec3<f32>(x_469,x_179,x_352);
let x_757:vec3<f32>=vec3<f32>(x_71,x_168,x_663);
let x_508:vec3<f32>=vec3<f32>(x_44,x_44,x_98);
let x_758:vec3<f32>=vec3<f32>(x_234,x_114,x_163);
let x_645:vec4<f32>=vec4<f32>(vec3<f32>(x_423,x_44,x_179),x_581);
let x_137:f32=(x_117+x_136);
let x_759:vec3<f32>=vec3<f32>(x_581,x_463,x_75);
let x_671:f32=x_15.polynomial.x;
let x_760:vec4<f32>=vec4<f32>(x_673,x_64,x_109,1e-15);
let x_567:vec3<f32>=vec3<f32>(x_671,x_519,0.0);
let x_894:vec3<f32>=vec3<f32>(x_126,x_75,0.0);
let x_377:f32=x_15.polynomial.x;
let x_408:vec4<f32>=vec4<f32>(x_63,x_383,x_136,x_75);
let x_761:vec3<f32>=vec3<f32>(x_44,x_168,x_581);
let x_646:vec4<f32>=vec4<f32>(vec3<f32>(-1.100000024,x_385,x_166),x_63);
let x_895:vec3<f32>=vec3<f32>(x_183,x_193,x_187);
let x_568:vec4<f32>=vec4<f32>(vec3<f32>(x_163,x_234,x_44),x_235);
let x_509:vec3<f32>=vec3<f32>(x_115,x_187,x_461);
let x_647:vec3<f32>=vec3<f32>(x_91,x_171,x_194);
let x_762:vec4<f32>=vec4<f32>(vec3<f32>(x_457,x_161,x_193),x_199);
let x_648:vec4<f32>=vec4<f32>(vec3<f32>(x_71,-1.100000024,x_169),x_465);
let x_409:vec4<f32>=vec4<f32>(x_385,x_168,x_235,x_50);
let x_649:vec4<f32>=vec4<f32>(vec3<f32>(x_171,x_187,x_354),x_457);
let x_138:f32=(x_123/x_137);
let x_1055:vec3<f32>=vec3<f32>(x_383,x_168,x_785);
let x_763:vec3<f32>=vec3<f32>(x_99,x_661,x_671);
let x_569:vec4<f32>=vec4<f32>(x_431,x_517);
let x_1056:vec4<f32>=vec4<f32>(x_172,x_686);
let x_896:vec4<f32>=vec4<f32>(x_577,x_429);
let x_1057:vec4<f32>=vec4<f32>(x_179,vec3<f32>(x_168,0.0,x_467));
let x_410:vec4<f32>=vec4<f32>(x_377,x_198,x_99,x_377);
let x_897:vec3<f32>=vec3<f32>(x_683,x_463,x_583);
let x_764:vec4<f32>=vec4<f32>(x_394,x_64);
let x_1058:vec4<f32>=vec4<f32>(x_171,x_925,x_137,x_935);
let x_510:vec3<f32>=vec3<f32>(x_50,1e-15,x_193);
let x_570:vec3<f32>=vec3<f32>(x_519,x_337,x_138);
let x_1059:vec3<f32>=vec3<f32>(x_779,x_423,1.0);
let x_898:vec4<f32>=vec4<f32>(vec3<f32>(x_172,x_465,x_579),x_64);
let x_471:f32=x_42.initial_xvalues.z;
let x_650:vec3<f32>=vec3<f32>(x_585,x_199,x_134);
let x_455:vec4<f32>=vec4<f32>(x_168,x_337,x_233,x_471);
let x_1060:vec4<f32>=vec4<f32>(x_199,vec3<f32>(x_198,-1.100000024,x_164));
let x_347:vec4<f32>=vec4<f32>(x_99,x_187,0.0,x_193);
let x_899:vec3<f32>=vec3<f32>(x_377,x_354,x_381);
let x_1061:vec4<f32>=vec4<f32>(vec3<f32>(x_352,x_377,x_169),x_381);
let x_651:vec4<f32>=vec4<f32>(x_389,x_64);
let x_1062:vec4<f32>=vec4<f32>(x_202,x_365);
let x_411:vec3<f32>=vec3<f32>(x_163,x_171,x_133);
let x_937:f32=x_15.polynomial.z;
let x_900:vec3<f32>=vec3<f32>(x_427,x_937,4.0);
let x_571:vec3<f32>=vec3<f32>(x_178,x_461,x_136);
let x_371:vec4<f32>=vec4<f32>(x_128,x_117,x_99,x_137);
x_139=(x_233 - x_138);
x_235_phi=x_234;
x_234_phi=x_233;
x_233_phi=x_139;
}
}
let x_765:vec3<f32>=vec3<f32>(x_423,x_50,x_661);
let x_1063:vec4<f32>=vec4<f32>(x_379,x_375,x_779,x_579);
let x_348:vec4<f32>=vec4<f32>(x_47,-0.899999976,x_63,x_50);
let x_372:vec3<f32>=vec3<f32>(x_44,x_233,4.0);
let x_1064:vec3<f32>=vec3<f32>(x_673,x_929,x_677);
let x_652:vec3<f32>=vec3<f32>(x_47,x_234,-1.100000024);
let x_1065:vec3<f32>=vec3<f32>(x_581,x_63,-0.899999976);
let x_413:vec4<f32>=vec4<f32>(x_379,x_234,x_235,1e-15);
let x_927:f32=x_15.polynomial.z;
let x_901:vec3<f32>=vec3<f32>(x_673,x_927,x_677);
let x_373:vec3<f32>=vec3<f32>(x_50,x_235,4.0);
let x_1066:vec4<f32>=vec4<f32>(2.0,x_481);
let x_511:vec4<f32>=vec4<f32>(x_379,x_433);
let x_902:vec3<f32>=vec3<f32>(-1.100000024,x_467,-1.100000024);
let x_653:vec4<f32>=vec4<f32>(x_358,x_385);
let x_903:vec4<f32>=vec4<f32>(x_581,x_783,x_583,x_579);
let x_1067:vec3<f32>=vec3<f32>(x_771,x_927,x_47);
let x_572:vec4<f32>=vec4<f32>(x_375,x_339);
let x_917:f32=x_15.polynomial.z;
let x_1068:vec3<f32>=vec3<f32>(1.0,x_44,x_519);
let x_904:vec3<f32>=vec3<f32>(x_663,x_917,x_235);
let x_414:vec3<f32>=vec3<f32>(1e-15,x_64,x_375);
let x_1069:vec4<f32>=vec4<f32>(x_798,x_927);
let x_1070:vec3<f32>=vec3<f32>(2.0,x_50,x_943);
let x_905:vec4<f32>=vec4<f32>(x_593,x_381);
let x_1071:vec3<f32>=vec3<f32>(x_233,x_375,x_915);
let x_675:f32=x_42.initial_xvalues.z;
let x_1072:vec3<f32>=vec3<f32>(x_519,x_673,x_931);
let x_415:vec3<f32>=vec3<f32>(x_233,x_675,x_64);
let x_1073:vec3<f32>=vec3<f32>(x_935,x_467,0.0);
let x_512:vec4<f32>=vec4<f32>(x_381,x_358);
let x_906:vec4<f32>=vec4<f32>(x_461,x_601);
if(((x_233<=-0.899999976)&(x_233>=-1.100000024))){
let x_513:vec4<f32>=vec4<f32>(x_235,vec3<f32>(x_381,x_379,x_235));
let x_766:vec3<f32>=vec3<f32>(x_457,x_47,x_47);
let x_1074:vec4<f32>=vec4<f32>(x_481,1e-15);
x_GLF_color=vec4<f32>(1.0,0.0,0.0,1.0);
let x_1075:vec3<f32>=vec3<f32>(x_677,1e-15,-1.100000024);
let x_654:vec3<f32>=vec3<f32>(x_50,x_375,x_63);
let x_1076:vec3<f32>=vec3<f32>(x_375,x_919,x_457);
let x_514:vec3<f32>=vec3<f32>(x_50,x_467,x_44);
let x_655:vec4<f32>=vec4<f32>(x_379,x_63,x_44,x_583);
}else{
let x_767:vec3<f32>=vec3<f32>(x_385,x_581,x_381);
let x_907:vec4<f32>=vec4<f32>(x_233,x_691);
let x_1077:vec4<f32>=vec4<f32>(x_435,1.0);
x_GLF_color=vec4<f32>(0.0,1.0,0.0,1.0);
let x_908:vec4<f32>=vec4<f32>(x_461,x_598);
let x_656:vec4<f32>=vec4<f32>(x_63,x_47,x_575,x_47);
let x_416:vec3<f32>=vec3<f32>(4.0,x_234,x_385);
let x_573:vec4<f32>=vec4<f32>(x_234,x_387);
let x_374:vec4<f32>=vec4<f32>(1e-15,x_339);
}
let x_1078:vec4<f32>=vec4<f32>(x_375,vec3<f32>(x_381,x_423,x_423));
let x_657:vec3<f32>=vec3<f32>(1e-15,x_575,x_581);
let x_574:vec3<f32>=vec3<f32>(x_63,-1.100000024,-1.100000024);
let x_515:vec3<f32>=vec3<f32>(x_44,x_465,x_459);
let x_456:vec3<f32>=vec3<f32>(0.0,x_234,x_234);
let x_1079:vec4<f32>=vec4<f32>(x_459,x_429);
let x_909:vec3<f32>=vec3<f32>(x_575,x_47,x_673);
let x_350:f32=x_15.polynomial.z;
let x_910:vec4<f32>=vec4<f32>(x_783,x_695);
let x_1080:vec4<f32>=vec4<f32>(x_690,x_375);
let x_589:f32=x_15.polynomial.z;
let x_911:vec3<f32>=vec3<f32>(0.0,x_461,1e-15);
let x_417:vec3<f32>=vec3<f32>(x_64,x_589,1e-15);
let x_1081:vec3<f32>=vec3<f32>(x_233,x_583,x_677);
let x_912:vec4<f32>=vec4<f32>(x_687,x_575);
let x_658:vec3<f32>=vec3<f32>(x_589,1e-15,x_64);
let x_913:vec3<f32>=vec3<f32>(x_459,x_44,x_459);
let x_1082:vec4<f32>=vec4<f32>(x_529,x_50);
let x_419:f32=x_15.polynomial.z;
let x_914:vec3<f32>=vec3<f32>(x_379,x_677,x_459);
let x_768:vec3<f32>=vec3<f32>(x_677,x_583,x_585);
let x_659:vec3<f32>=vec3<f32>(0.0,0.0,x_519);
let x_516:vec3<f32>=vec3<f32>(x_379,x_63,x_467);
let x_349:vec4<f32>=vec4<f32>(x_419,x_233,x_350,-0.899999976);
let x_418:vec4<f32>=vec4<f32>(x_385,x_385,-0.899999976,x_63);
let x_1083:vec4<f32>=vec4<f32>(x_661,vec3<f32>(x_457,-0.899999976,x_379));
let x_660:vec3<f32>=vec3<f32>(x_459,x_64,x_457);
return;
}

struct main_out{
[[location(0)]]
x_GLF_color_1:vec4<f32>;
};

[[stage(fragment)]]
fn main()->main_out{
main_1();
return main_out(x_GLF_color);
}
