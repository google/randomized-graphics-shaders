[[block]]
struct buf0{
resolution:vec2<f32>;
};

var<private>gl_FragCoord:vec4<f32>;

[[group(0),binding(0)]]var<uniform>x_188:buf0;

var<private>x_GLF_color:vec4<f32>;

fn main_1(){
var x_334:array<i32,10u>;
var x_466:array<i32,10u>;
var x_497:vec3<f32>;
var x_501:vec3<f32>;
var x_505:vec3<f32>;
var x_512:vec3<f32>;
var x_516:vec3<f32>;
var x_520:vec3<f32>;
var x_528:vec3<f32>;
var x_529_phi:i32;
var x_530_phi:i32;
var x_531_phi:vec3<f32>;
var x_532_phi:vec3<f32>;
var x_533_phi:vec3<f32>;
var x_534_phi:vec3<f32>;
var x_535_phi:vec3<f32>;
var x_536_phi:vec3<f32>;
var x_537_phi:vec3<f32>;
let x_1021:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_846:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_926:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1022:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_728:f32=vec3<f32>(1.0,2.0,3.0).x;
x_529_phi=0;
loop{
var x_175:i32;
let x_529:i32=x_529_phi;
let x_654:f32=vec3<f32>(1.0,2.0,3.0).x;
if((x_529<bitcast<i32>(10u))){
}else{
break;
}

continuing{
let x_927:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_847:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_928:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_780:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1023:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_929:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_467:ptr<function,i32>=&(x_466[x_529]);
let x_1024:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_729:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_930:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1025:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_848:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1026:f32=vec3<f32>(1.0,2.0,3.0).y;
*(x_467)=bitcast<i32>((10u - bitcast<u32>(x_529)));
let x_931:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_655:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_730:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_932:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1027:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_691:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_781:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_933:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_731:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_168:i32=*(x_467);
let x_692:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_849:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1028:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_934:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_171:i32=*(x_467);
let x_850:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_782:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_935:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_851:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_936:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_852:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1029:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_693:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1030:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_853:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1031:f32=vec3<f32>(1.0,2.0,3.0).x;
*(x_467)=(x_168*x_171);
let x_937:f32=vec3<f32>(1.0,2.0,3.0).y;
x_175=bitcast<i32>((1u+bitcast<u32>(x_529)));
let x_732:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_854:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_938:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1032:f32=vec3<f32>(1.0,2.0,3.0).x;
x_529_phi=x_175;
}
}
let x_694:f32=vec3<f32>(1.0,2.0,3.0).x;
x_334[0u]=0;
let x_1033:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_695:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_783:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_733:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1034:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_939:f32=vec3<f32>(1.0,2.0,3.0).x;
x_334[1u]=9;
let x_656:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_855:f32=vec3<f32>(1.0,2.0,3.0).x;
x_530_phi=1;
loop{
var x_539:i32;
var x_389:i32;
var x_539_phi:i32;
var x_538_phi:i32;
var x_546_phi:i32;
let x_530:i32=x_530_phi;
let x_784:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_696:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1035:f32=vec3<f32>(1.0,2.0,3.0).x;
if((x_530>=bitcast<i32>(0u))){
}else{
break;
}
let x_734:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1036:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_940:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_856:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_657:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_785:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_735:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_941:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_857:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_942:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_786:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1037:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_354:ptr<function,i32>=&(x_334[x_530]);
let x_697:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_736:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1038:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_355:i32=*(x_354);
let x_1039:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_943:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_858:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_787:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_357:i32=(x_530 - bitcast<i32>(2u));
let x_1040:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_944:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_658:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1041:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_788:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_945:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_859:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_659:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1042:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_946:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_359:i32=x_334[(x_530 - bitcast<i32>(1u))];
let x_481:ptr<function,i32>=&(x_466[x_355]);
let x_947:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_860:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_406:i32=*(x_481);
let x_789:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_948:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_408:i32=(x_359 - 1);
let x_1043:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_949:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_698:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1044:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_790:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1045:f32=vec3<f32>(1.0,2.0,3.0).z;
x_539_phi=x_408;
x_538_phi=x_359;
loop{
var x_424:i32;
var x_431:i32;
var x_547_phi:i32;
x_539=x_539_phi;
let x_538:i32=x_538_phi;
let x_1046:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_660:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1047:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_861:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_737:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_661:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_950:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_862:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_791:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1048:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_951:f32=vec3<f32>(1.0,2.0,3.0).y;
if((x_538<=(x_355 - bitcast<i32>(1u)))){
}else{
break;
}
let x_1049:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_863:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_482:ptr<function,i32>=&(x_466[x_538]);
let x_952:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_738:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_419:i32=*(x_482);
let x_662:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1050:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1051:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_699:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_953:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_792:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_663:f32=vec3<f32>(1.0,2.0,3.0).x;
x_547_phi=x_539;
if((x_419<=x_406)){
let x_664:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1052:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_954:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1053:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_793:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_739:f32=vec3<f32>(1.0,2.0,3.0).z;
x_424=(1+bitcast<i32>(x_539));
let x_1054:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_665:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_483:ptr<function,i32>=&(x_466[x_424]);
let x_740:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_794:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_443:i32=*(x_483);
let x_447:i32=*(x_482);
*(x_483)=x_447;
let x_955:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_741:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_795:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1055:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_666:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_956:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_796:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_864:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_957:f32=vec3<f32>(1.0,2.0,3.0).z;
*(x_482)=x_443;
let x_797:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1056:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_958:f32=vec3<f32>(1.0,2.0,3.0).z;
x_547_phi=x_424;
}
let x_547:i32=x_547_phi;

continuing{
let x_798:f32=vec3<f32>(1.0,2.0,3.0).x;
x_431=(x_538+bitcast<i32>(1u));
let x_959:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_865:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1057:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_799:f32=vec3<f32>(1.0,2.0,3.0).z;
x_539_phi=x_547;
x_538_phi=x_431;
}
}
let x_1058:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_960:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1059:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_800:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1060:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_961:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_742:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_866:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1061:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_487:ptr<function,i32>=&(x_466[bitcast<i32>((1u+bitcast<u32>(x_539)))]);
let x_456:i32=*(x_487);
let x_460:i32=*(x_481);
let x_801:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_743:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_802:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_667:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_962:f32=vec3<f32>(1.0,2.0,3.0).y;
*(x_487)=x_460;
let x_803:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_963:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1062:f32=vec3<f32>(1.0,2.0,3.0).x;
*(x_481)=x_456;
let x_1063:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_366:bool=(x_539>x_359);
let x_867:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_964:f32=vec3<f32>(1.0,2.0,3.0).x;
if(x_366){
let x_965:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_868:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_668:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1064:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_966:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_744:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1065:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_967:f32=vec3<f32>(1.0,2.0,3.0).y;
x_334[(x_530+bitcast<i32>(4294967295u))]=x_359;
*(x_354)=x_539;
}
let x_669:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1066:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_968:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1067:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_745:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_553:i32=select(x_357,x_530,x_366);
let x_700:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_804:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1068:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_379:i32=bitcast<i32>((2u+bitcast<u32>(x_539)));
let x_805:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_701:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1069:f32=vec3<f32>(1.0,2.0,3.0).x;
x_546_phi=x_553;
if((x_379<x_355)){
let x_969:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_970:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_869:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_971:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_746:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_972:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1070:f32=vec3<f32>(1.0,2.0,3.0).z;
x_334[bitcast<i32>((1u+bitcast<u32>(x_553)))]=x_379;
let x_973:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1071:f32=vec3<f32>(1.0,2.0,3.0).x;
x_389=bitcast<i32>((2u+bitcast<u32>(x_553)));
let x_806:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1072:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_702:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_870:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_807:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_808:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1073:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_703:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_747:f32=vec3<f32>(1.0,2.0,3.0).x;
x_334[x_389]=x_355;
let x_974:f32=vec3<f32>(1.0,2.0,3.0).y;
x_546_phi=x_389;
}
let x_546:i32=x_546_phi;
let x_670:f32=vec3<f32>(1.0,2.0,3.0).z;

continuing{
let x_975:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_671:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1074:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_809:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_748:f32=vec3<f32>(1.0,2.0,3.0).y;
x_530_phi=x_546;
}
}
let x_810:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_184:vec4<f32>=gl_FragCoord;
let x_976:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_871:f32=x_184.y;
let x_185:vec2<f32>=vec2<f32>(x_184.x,x_184.y);
let x_1075:f32=x_184.z;
let x_704:f32=x_184.z;
let x_1076:f32=x_184.z;
let x_872:f32=x_184.z;
let x_1077:f32=x_185.x;
let x_977:f32=x_184.w;
let x_1078:f32=x_184.y;
let x_873:f32=x_184.x;
let x_672:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_705:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1079:f32=x_184.w;
let x_811:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_749:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1080:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_191:vec2<f32>=x_188.resolution;
let x_812:f32=x_191.x;
let x_1081:f32=x_184.y;
let x_750:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_192:vec2<f32>=(x_185/x_191);
let x_874:f32=x_185.y;
let x_978:f32=x_185.x;
let x_201:i32=x_466[0];
let x_751:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_979:f32=x_185.x;
let x_875:f32=x_184.x;
let x_813:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1082:f32=x_185.x;
let x_980:f32=x_184.z;
let x_1083:f32=x_184.y;
let x_814:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_981:f32=x_185.y;
let x_207:f32=(1.0+f32(x_201));
let x_876:f32=x_184.z;
let x_982:f32=x_184.z;
let x_706:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_752:f32=x_184.z;
let x_1084:f32=x_184.z;
let x_983:f32=x_191.x;
let x_1085:f32=x_185.y;
var x_493_1:vec3<f32>=vec3<f32>(1.0,2.0,3.0);
x_493_1.x=x_207;
let x_493:vec3<f32>=x_493_1;
let x_984:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_877:f32=x_184.y;
let x_707:f32=x_493.y;
let x_210:f32=x_192.x;
let x_985:f32=x_191.x;
let x_1086:f32=x_493.x;
x_531_phi=x_493;
if((x_210>0.25)){
let x_878:f32=x_493.x;
let x_216:i32=x_466[1u];
let x_879:f32=x_185.y;
let x_815:f32=x_184.y;
let x_880:f32=x_184.z;
let x_673:f32=x_184.z;
let x_1087:f32=x_192.x;
let x_881:f32=x_184.y;
let x_1088:f32=x_192.x;
let x_882:f32=x_192.y;
let x_986:f32=x_493.y;
let x_816:f32=vec3<f32>(1.0,2.0,3.0).y;
x_497=x_493;
x_497.x=(x_207+f32(x_216));
let x_883:f32=x_493.z;
let x_987:f32=vec3<f32>(1.0,2.0,3.0).z;
x_531_phi=x_497;
}
let x_531:vec3<f32>=x_531_phi;
let x_817:f32=x_192.x;
let x_988:f32=x_192.y;
let x_818:f32=x_184.y;
x_532_phi=x_531;
if((x_210>0.5)){
let x_819:f32=x_192.y;
let x_230:i32=x_466[2];
let x_1089:f32=x_185.x;
let x_820:f32=x_185.y;
let x_1090:f32=x_184.x;
let x_708:f32=x_493.y;
let x_1091:f32=x_493.z;
let x_1092:f32=x_184.y;
let x_709:f32=x_184.z;
let x_989:f32=x_531.y;
let x_884:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_990:f32=x_184.z;
let x_1093:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_821:f32=x_191.y;
let x_1094:f32=x_192.y;
let x_1095:f32=x_493.y;
x_501=x_531;
x_501.y=(f32(x_230)+x_531.y);
let x_1096:f32=x_531.y;
let x_885:f32=x_184.x;
let x_822:f32=x_493.y;
let x_886:f32=x_185.y;
let x_1097:f32=x_185.y;
let x_710:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1098:f32=x_191.y;
let x_823:f32=x_184.z;
x_532_phi=x_501;
}
let x_532:vec3<f32>=x_532_phi;
let x_991:f32=x_191.y;
let x_992:f32=x_532.y;
let x_824:f32=x_184.z;
let x_887:f32=x_532.z;
let x_1099:f32=x_531.x;
let x_753:f32=x_191.x;
let x_1100:f32=x_493.z;
x_533_phi=x_532;
if((x_210>0.75)){
let x_1101:f32=x_493.y;
let x_888:f32=x_191.x;
let x_1102:f32=x_493.x;
let x_674:f32=x_192.x;
let x_245:i32=x_466[3];
let x_675:f32=x_531.y;
let x_993:f32=x_532.z;
let x_825:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1103:f32=x_493.z;
let x_994:f32=x_532.y;
let x_889:f32=x_192.y;
let x_1104:f32=x_185.y;
let x_890:f32=x_185.x;
x_505=x_532;
x_505.z=(f32(x_245)+x_532.z);
let x_711:f32=x_531.z;
let x_891:f32=x_192.y;
x_533_phi=x_505;
}
let x_533:vec3<f32>=x_533_phi;
let x_754:f32=x_191.x;
let x_995:f32=x_531.y;
let x_826:f32=x_493.y;
let x_712:f32=x_192.y;
let x_892:f32=x_493.x;
let x_996:f32=x_532.y;
let x_827:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_997:f32=x_533.z;
let x_254:i32=x_466[4];
let x_998:f32=x_533.z;
let x_1105:f32=x_493.z;
let x_828:f32=x_191.x;
let x_713:f32=x_192.x;
let x_893:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1106:f32=x_192.y;
let x_755:f32=x_192.x;
let x_1107:f32=x_192.y;
let x_714:f32=x_192.y;
let x_894:f32=x_192.y;
let x_1108:f32=x_531.z;
let x_829:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1109:f32=x_533.x;
let x_756:f32=x_192.y;
let x_895:f32=x_532.y;
var x_508_1:vec3<f32>=x_533;
x_508_1.y=(f32(x_254)+x_533.y);
let x_508:vec3<f32>=x_508_1;
let x_896:f32=x_531.z;
let x_715:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_757:f32=x_531.z;
let x_676:f32=x_185.x;
let x_261:f32=x_192.y;
let x_1110:f32=x_493.z;
let x_758:f32=x_493.y;
let x_1111:f32=x_493.z;
let x_677:f32=x_192.x;
let x_897:f32=x_532.y;
let x_999:f32=x_493.z;
x_534_phi=x_508;
if((x_261>0.25)){
let x_898:f32=x_532.y;
let x_759:f32=x_532.y;
let x_899:f32=x_531.z;
let x_1112:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_267:i32=x_466[5u];
let x_716:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1113:f32=x_192.x;
let x_760:f32=x_531.z;
x_512=x_508;
x_512.x=(f32(x_267)+x_533.x);
let x_717:f32=x_184.x;
let x_830:f32=x_192.y;
let x_1114:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_678:f32=x_532.y;
let x_1000:f32=x_531.z;
x_534_phi=x_512;
}
let x_534:vec3<f32>=x_534_phi;
let x_900:f32=x_493.y;
let x_1115:f32=x_191.y;
let x_761:f32=x_184.z;
let x_1116:f32=x_531.x;
let x_831:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1001:f32=x_184.z;
let x_679:f32=x_534.z;
let x_1117:f32=x_185.x;
let x_832:f32=x_191.x;
let x_680:f32=x_192.x;
let x_1118:f32=x_534.y;
let x_762:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_901:f32=x_185.y;
let x_718:f32=x_532.y;
let x_1119:f32=x_532.z;
let x_902:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_833:f32=x_192.y;
let x_903:f32=x_531.z;
x_535_phi=x_534;
if((x_261>0.5)){
let x_1120:f32=x_508.y;
let x_763:f32=x_493.z;
let x_280:i32=x_466[6u];
let x_1002:f32=x_192.y;
let x_681:f32=x_531.z;
let x_1003:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_1121:f32=x_184.y;
let x_834:f32=x_191.y;
let x_1004:f32=x_533.z;
let x_719:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_835:f32=x_192.y;
let x_764:f32=x_184.y;
let x_1005:f32=x_192.x;
let x_1122:f32=x_192.x;
x_516=x_534;
x_516.y=(f32(x_280)+x_534.y);
let x_1123:f32=x_191.x;
x_535_phi=x_516;
}
let x_535:vec3<f32>=x_535_phi;
let x_904:f32=x_192.x;
let x_765:f32=x_533.x;
let x_720:f32=x_191.x;
let x_1006:f32=x_531.z;
let x_905:f32=x_533.x;
let x_721:f32=x_184.z;
let x_1124:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_906:f32=x_185.y;
x_536_phi=x_535;
if((x_261>0.75)){
let x_293:i32=x_466[7];
let x_766:f32=x_508.x;
let x_1007:f32=x_192.x;
let x_682:f32=x_534.z;
let x_767:f32=x_533.z;
let x_1008:f32=x_192.x;
let x_768:f32=x_192.y;
let x_1125:f32=x_508.x;
let x_769:f32=x_533.z;
let x_907:f32=x_508.x;
let x_1126:f32=x_185.x;
let x_1009:f32=x_184.y;
let x_1010:f32=x_535.z;
let x_722:f32=x_184.y;
let x_1127:f32=x_508.x;
x_520=x_535;
x_520.z=(f32(x_293)+x_535.z);
let x_770:f32=x_184.y;
x_536_phi=x_520;
}
let x_536:vec3<f32>=x_536_phi;
let x_683:f32=x_191.x;
let x_908:f32=x_531.y;
let x_1128:f32=x_508.x;
let x_301:i32=x_466[8];
let x_1011:f32=x_184.z;
let x_771:f32=x_185.x;
let x_836:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_909:f32=x_533.z;
let x_723:f32=x_535.z;
let x_1129:f32=x_533.z;
let x_910:f32=x_533.x;
let x_837:f32=x_185.x;
let x_911:f32=x_493.y;
var x_523_1:vec3<f32>=x_536;
x_523_1.z=(f32(x_301)+x_536.z);
let x_523:vec3<f32>=x_523_1;
let x_1012:f32=x_493.z;
let x_912:f32=x_191.y;
let x_772:f32=vec3<f32>(1.0,2.0,3.0).x;
let x_1130:f32=x_493.y;
let x_838:f32=x_191.y;
let x_684:f32=x_493.y;
let x_913:f32=x_191.y;
let x_839:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_1131:f32=x_493.y;
let x_685:f32=x_493.x;
let x_1132:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_840:f32=x_493.y;
let x_773:f32=x_184.z;
let x_914:f32=x_531.z;
x_537_phi=x_523;
if((abs((x_210 - x_261))<0.25)){
let x_841:f32=x_191.x;
let x_915:f32=x_493.z;
let x_686:f32=x_536.y;
let x_916:f32=x_184.y;
let x_317:i32=x_466[9u];
let x_1133:f32=x_535.z;
let x_917:f32=x_185.y;
let x_687:f32=x_493.y;
let x_1134:f32=x_533.z;
let x_774:f32=x_536.y;
let x_842:f32=x_535.y;
let x_918:f32=vec3<f32>(1.0,2.0,3.0).y;
let x_775:f32=x_535.z;
let x_1013:f32=x_493.y;
let x_724:f32=x_192.x;
let x_1014:f32=x_192.y;
let x_919:f32=x_508.y;
let x_843:f32=x_493.x;
let x_920:f32=x_493.y;
let x_921:f32=x_184.x;
let x_1015:f32=x_184.y;
x_528=x_523;
x_528.x=(f32(x_317)+x_536.x);
x_537_phi=x_528;
}
let x_537:vec3<f32>=x_537_phi;
let x_776:f32=x_535.y;
let x_1016:f32=x_533.z;
let x_1135:f32=x_531.z;
let x_326:vec3<f32>=normalize(x_537);
let x_1017:f32=x_537.z;
let x_777:f32=x_533.z;
let x_922:f32=x_531.x;
let x_844:f32=x_493.x;
let x_1136:f32=x_493.z;
let x_1018:f32=x_185.x;
let x_688:f32=x_535.z;
let x_1137:f32=x_531.z;
let x_725:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_923:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_726:f32=x_531.z;
let x_1138:f32=vec3<f32>(1.0,2.0,3.0).z;
let x_845:f32=x_532.y;
let x_924:f32=x_537.y;
let x_778:f32=x_493.z;
let x_1139:f32=x_532.z;
let x_1019:f32=x_493.z;
let x_689:f32=x_535.y;
let x_727:f32=x_532.z;
let x_690:f32=x_533.z;
let x_779:f32=x_184.x;
let x_1020:f32=x_493.z;
let x_925:f32=x_192.y;
let x_1140:f32=x_531.z;
x_GLF_color=vec4<f32>(x_326.x,x_326.y,x_326.z,1.0);
return;
}

struct main_out{
[[location(0)]]
x_GLF_color_1:vec4<f32>;
};

[[stage(fragment)]]
fn main([[builtin(position)]]gl_FragCoord_param:vec4<f32>)->main_out{
gl_FragCoord=gl_FragCoord_param;
main_1();
return main_out(x_GLF_color);
}
