[[block]]
struct buf0{
resolution:vec2<f32>;
};

var<private>gl_FragCoord:vec4<f32>;

[[group(0),binding(0)]]var<uniform>x_17:buf0;

var<private>x_GLF_color:vec4<f32>;

fn main_1(){
var indexable:array<vec4<f32>,16u>;
var x_106:i32;
var x_104:i32;
var x_270:i32;
var x_651:vec4<i32>;
var x_245:vec4<i32>;
var x_424:i32;
var x_353:vec4<i32>;
var x_212:i32;
var x_61:bool;
var x_271:i32;
var x_658:bool;
var x_515:vec4<i32>;
var x_428:vec4<f32>;
var x_307:i32;
var x_430:i32;
var x_517:bool;
var x_106_phi:i32;
var x_104_phi:i32;
let x_574:i32=(100 - 4);
let x_459:f32=f32(bitcast<u32>(100));
let x_575:i32=-(1000);
let x_387:i32=(4 - 4);
let x_236:f32=f32(bitcast<u32>(16));
let x_388:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.0,0.5,0.0,1.0));
let x_220:f32=f32(bitcast<u32>(10));
let x_460:i32=(4+x_387);
let x_326:i32=(4 - bitcast<i32>(16u));
let x_289:i32=-(10);
let x_207:f32=f32(bitcast<u32>(16));
let x_237:i32=(10 - x_460);
let x_389:i32=(x_237+x_387);
let x_576:i32=(100+4);
let x_327:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.5,0.0,0.5,1.0));
let x_390:f32=f32(x_389);
let x_461:f32=f32(bitcast<u32>(100));
let x_577:i32=-(x_289);
let x_257:i32=-(1);
let x_462:u32=(16u - bitcast<u32>(1));
let x_578:f32=f32(4);
let x_290:i32=(1000 - x_237);
let x_579:i32=-(100);
let x_463:f32=f32(bitcast<u32>(0));
let x_391:i32=(0+16);
let x_464:f32=f32(x_460);
let x_221:f32=f32(100);
let x_328:f32=f32(100);
let x_465:vec4<i32>=-(x_388);
let x_238:f32=f32(bitcast<u32>(16));
let x_258:i32=bitcast<i32>(x_220);
let x_466:i32=-(4);
let x_13:vec4<f32>=gl_FragCoord;
let x_583:i32=(x_391+100);
let x_392:f32=f32(bitcast<u32>(x_326));
let x_467:i32=(x_387 - x_466);
let x_239:i32=(1 - bitcast<i32>(16u));
let x_584:f32=f32(x_257);
let x_468:i32=bitcast<i32>((x_462+bitcast<u32>(x_257)));
let x_393:i32=(0+4);
let x_585:f32=bitcast<f32>(x_574);
let x_469:i32=(x_467+x_239);
let x_329:i32=(16 - 4);
let x_586:f32=f32(x_574);
let x_394:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.5,0.0,0.0,1.0));
let x_259:i32=(x_237 - x_237);
let x_395:f32=f32(x_329);
let x_587:f32=f32(1);
let x_330:i32=-(1000);
let x_588:f32=f32(x_576);
let x_292:f32=f32(16);
let x_589:i32=-(x_389);
let x_208:f32=f32(bitcast<u32>(100));
let x_470:i32=-(x_257);
let x_396:i32=(1000 - x_259);
let x_590:f32=bitcast<f32>(x_462);
let x_471:i32=(100+x_237);
let x_331:i32=(x_259 - 1);
let x_472:f32=f32(bitcast<u32>(x_471));
let x_293:f32=f32(x_237);
let x_592:f32=f32(bitcast<u32>(-(x_389)));
let x_397:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.5,0.5,0.0,1.0));
let x_594:f32=f32(bitcast<u32>(x_331));
let x_240:f32=f32(1000);
let x_474:f32=f32(x_259);
let x_14:vec2<f32>=vec2<f32>(x_13.x,x_13.y);
let x_595:i32=-(x_579);
let x_596:f32=f32(bitcast<u32>(100));
let x_294:i32=(100 - 1000);
let x_333:i32=(x_326 - x_259);
let x_597:f32=f32(bitcast<u32>(0));
let x_295:f32=f32(4);
let x_598:f32=f32(bitcast<u32>(x_391));
let x_223:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.5,0.0,0.5,1.0));
let x_398:vec4<f32>=vec4<f32>(bitcast<vec4<u32>>(x_394));
let x_599:vec4<f32>=bitcast<vec4<f32>>(x_394);
let x_334:f32=bitcast<f32>(10);
let x_600:vec4<f32>=bitcast<vec4<f32>>(x_394);
let x_260:i32=(16 - x_237);
let x_22:vec2<f32>=x_17.resolution;
let x_601:f32=f32(bitcast<u32>(x_393));
let x_241:u32=(16u - bitcast<u32>(10));
let x_296:f32=f32(bitcast<u32>(x_290));
let x_478:vec4<i32>=(x_397+x_394);
let x_335:f32=f32(bitcast<u32>(x_260));
let x_479:vec4<i32>=(x_397+x_223);
let x_602:f32=f32(bitcast<u32>((x_237 - x_333)));
let x_261:f32=f32(bitcast<u32>(100));
let x_603:i32=(x_289 - x_468);
let x_336:i32=(10 - x_326);
let x_400:f32=f32(bitcast<u32>(x_289));
let x_605:i32=-(x_237);
let x_480:f32=bitcast<f32>(x_330);
let x_606:f32=bitcast<f32>(x_336);
let x_23:vec2<f32>=(x_14/x_22);
let x_607:i32=bitcast<i32>(f32(1000));
let x_401:i32=bitcast<i32>(f32(10));
let x_481:f32=bitcast<f32>(x_290);
let x_242:f32=f32(0);
let x_608:f32=f32(x_469);
let x_402:vec4<i32>=(x_397+x_223);
let x_609:f32=bitcast<f32>(-(x_290));
let x_337:i32=(x_260 - x_333);
let x_224:vec4<f32>=bitcast<vec4<f32>>(x_327);
let x_403:f32=bitcast<f32>(x_326);
let x_610:i32=bitcast<i32>(f32(bitcast<i32>(16u)));
let x_482:vec4<f32>=vec4<f32>(bitcast<vec4<u32>>(x_402));
let x_338:f32=f32(x_260);
let x_611:f32=f32(bitcast<u32>(x_401));
let x_483:i32=(10+x_289);
let x_612:i32=bitcast<i32>(10.0);
let x_404:f32=f32(x_257);
let x_484:i32=(x_396 - x_336);
let x_297:i32=(x_294+x_258);
let x_339:f32=f32(bitcast<u32>(x_326));
let x_262:i32=(4+16);
let x_298:i32=bitcast<i32>(0.5);
let x_405:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(1.0,0.0,0.0,1.0));
let x_614:i32=((4 - x_470)- x_330);
let x_340:vec4<i32>=(x_223 - x_327);
let x_615:i32=bitcast<i32>(f32(x_290));
let x_263:u32=bitcast<u32>(-(bitcast<i32>(x_241)));
let x_486:u32=bitcast<u32>(-(bitcast<i32>(x_462)));
let x_299:vec4<i32>=-(x_223);
let x_616:i32=(x_326 - x_574);
let x_341:vec4<f32>=vec4<f32>(bitcast<vec4<u32>>(x_299));
let x_487:f32=f32(bitcast<u32>(x_333));
let x_406:i32=-(x_333);
let x_488:f32=f32(bitcast<u32>(x_333));
let x_243:f32=f32(1000);
let x_489:vec4<i32>=(x_327 - x_394);
let x_617:f32=f32(bitcast<u32>(x_387));
let x_407:i32=(x_298 - x_391);
let x_264:u32=bitcast<u32>(-(bitcast<i32>(x_241)));
let x_618:i32=(x_297 - 0);
let x_408:i32=bitcast<i32>(x_236);
let x_619:vec4<f32>=bitcast<vec4<f32>>(x_479);
let x_490:i32=(x_406 - x_407);
let x_620:i32=(x_576 - x_615);
let x_342:i32=-(x_326);
let x_300:f32=f32(x_241);
let x_621:f32=bitcast<f32>(x_263);
let x_409:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.5,0.5,0.0,1.0));
let x_491:i32=(x_290 - x_387);
let x_34:i32=i32((10.0*x_23.x));
let x_622:f32=bitcast<f32>(x_241);
let x_492:i32=(x_466 - x_262);
let x_623:vec4<f32>=bitcast<vec4<f32>>(x_478);
let x_493:i32=(x_396+x_406);
let x_624:f32=bitcast<f32>(16);
let x_625:i32=-(x_239);
let x_494:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.0,0.0,0.5,1.0));
let x_344:f32=f32(bitcast<u32>(x_237));
let x_410:i32=bitcast<i32>(f32(x_263));
let x_627:f32=f32(bitcast<u32>(x_401));
let x_244:vec4<i32>=bitcast<vec4<i32>>(x_224);
let x_301:f32=bitcast<f32>(x_294);
let x_628:u32=(16u - bitcast<u32>(x_615));
let x_411:i32=(x_408+bitcast<i32>(16u));
let x_629:i32=-(x_342);
let x_495:i32=(x_468+x_471);
let x_630:i32=(x_387+x_579);
let x_265:f32=f32(bitcast<u32>(x_237));
let x_496:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(x_327));
let x_412:f32=f32(bitcast<u32>(x_237));
let x_497:i32=-(x_297);
let x_345:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.5,0.0,0.0,1.0));
let x_631:i32=bitcast<i32>(x_236);
let x_413:f32=bitcast<f32>(x_289);
let x_210:vec2<u32>=bitcast<vec2<u32>>(x_14);
let x_632:f32=f32(x_391);
let x_346:vec4<i32>=(x_223+x_340);
let x_498:u32=(x_241 - bitcast<u32>(1));
let x_266:f32=f32(bitcast<u32>(16));
let x_499:f32=f32(x_468);
let x_633:i32=-((x_326 - x_574));
let x_414:i32=(x_329 - x_393);
let x_634:vec4<i32>=(x_465+x_345);
let x_39:i32=i32((10.0*x_23.y));
let x_635:i32=(x_237+x_607);
let x_267:i32=(x_239 - bitcast<i32>(x_264));
let x_415:f32=f32(x_408);
let x_302:u32=(16u - bitcast<u32>(x_297));
let x_225:i32=(0+x_34);
let x_500:f32=f32(bitcast<u32>(x_330));
let x_416:i32=bitcast<i32>(x_221);
let x_501:f32=f32(bitcast<u32>(x_577));
let x_637:i32=-(x_290);
let x_268:i32=(4+0);
let x_347:f32=f32(bitcast<u32>(x_297));
let x_502:vec4<f32>=vec4<f32>(x_494);
let x_48:i32=(x_39*10);
let x_638:i32=(x_336 - x_492);
let x_503:i32=-(x_237);
let x_639:i32=bitcast<i32>(f32(x_239));
let x_348:f32=f32(bitcast<u32>(x_260));
let x_504:i32=-(1000);
let x_640:f32=f32(bitcast<u32>(x_326));
let x_269:u32=(x_264 - bitcast<u32>(100));
let x_641:vec4<i32>=-(x_397);
let x_418:f32=f32(bitcast<u32>(x_258));
let x_349:f32=f32(x_257);
let x_303:vec4<i32>=-(x_346);
let x_642:f32=bitcast<f32>(x_579);
let x_419:f32=f32(x_34);
let x_49:i32=(x_34+x_48);
let x_643:u32=(x_263 - bitcast<u32>(x_633));
let x_420:f32=f32(bitcast<u32>(1000));
let x_644:i32=(x_267 - 0);
let x_505:i32=(x_297 - -(10));
let x_304:vec4<i32>=(x_244+x_299);
let x_645:i32=(x_290+x_633);
let x_506:f32=f32(bitcast<u32>(x_490));
let x_646:i32=bitcast<i32>(x_459);
let x_350:i32=-(1);
let x_211:f32=f32(bitcast<u32>(0));
let x_647:vec4<i32>=(x_402 - x_489);
let x_351:i32=-(x_342);
let x_507:i32=bitcast<i32>(x_221);
let x_421:f32=f32(x_264);
let x_648:f32=bitcast<f32>(x_574);
let x_508:f32=f32(bitcast<u32>(x_294));
let x_305:f32=f32(x_257);
let x_509:f32=f32(bitcast<u32>(x_330));
let x_422:i32=(x_414 - x_259);
x_106_phi=100;
x_104_phi=0;
loop{
var x_69:i32;
x_106=x_106_phi;
x_104=x_104_phi;
x_270=bitcast<i32>(x_459);
let x_649:f32=f32(bitcast<u32>(x_637));
let x_352:f32=f32(bitcast<u32>(16));
let x_650:i32=(x_342 - x_635);
let x_510:f32=f32(bitcast<u32>(x_289));
x_651=(x_223+x_340);
x_245=(x_327 - x_346);
let x_652:u32=bitcast<u32>(-(bitcast<i32>(x_628)));
x_424=(x_49+x_391);
let x_511:u32=bitcast<u32>(-(bitcast<i32>(x_241)));
let x_653:vec4<i32>=bitcast<vec4<i32>>(x_600);
x_353=(x_299 - bitcast<vec4<i32>>(x_651));
let x_425:f32=f32(x_330);
let x_512:f32=f32(x_104);
let x_654:vec4<f32>=bitcast<vec4<f32>>((x_346+x_223));
let x_306:i32=(x_259 - x_49);
let x_426:f32=f32(x_389);
x_212=-(1000);
let x_655:f32=f32(bitcast<u32>(x_639));
let x_354:f32=f32(bitcast<u32>(x_39));
let x_656:i32=bitcast<i32>(-(x_212));
let x_513:vec4<f32>=vec4<f32>(x_465);
x_61=(x_104<x_49);
let x_427:f32=f32(bitcast<u32>(x_391));
let x_657:f32=bitcast<f32>(x_290);
let x_514:f32=f32(x_407);
x_271=-(x_49);
let x_226:i32=bitcast<i32>(-(x_104));
x_658=!(x_61);
x_515=-(x_479);
let x_659:i32=-(x_329);
x_428=vec4<f32>(x_653);
let x_660:f32=f32(x_407);
let x_355:f32=f32(1);
let x_429:i32=bitcast<i32>(x_292);
x_307=(x_260 - bitcast<i32>(x_264));
let x_356:i32=-(x_326);
let x_661:i32=bitcast<i32>(-(x_270));
let x_516:f32=f32(bitcast<u32>(x_259));
x_430=(x_333 - bitcast<i32>(x_271));
let x_663:vec4<i32>=-(x_641);
x_517=!(x_61);
let x_664:i32=bitcast<i32>(f32(x_391));
if(x_61){
}else{
break;
}

continuing{
let x_518:i32=-(x_262);
let x_308:bool=!(x_61);
let x_665:i32=(1000 - bitcast<i32>(x_628));
let x_519:i32=(x_239+x_330);
let x_272:f32=f32(x_260);
let x_64:i32=bitcast<i32>((x_106*bitcast<i32>(4)));
let x_357:vec4<i32>=bitcast<vec4<i32>>((x_245+x_245));
let x_521:i32=(x_406 - x_226);
let x_309:i32=(x_268 - x_294);
let x_522:vec4<i32>=(x_653 - bitcast<vec4<i32>>(x_515));
let x_667:vec4<i32>=-(x_479);
let x_431:bool=!(x_61);
let x_523:i32=(x_225+x_492);
let x_273:i32=-(x_470);
let x_669:f32=f32(bitcast<u32>(bitcast<i32>(x_338)));
let x_432:f32=f32(x_262);
let x_670:i32=(x_273+x_297);
let x_310:vec4<f32>=vec4<f32>(bitcast<vec4<u32>>(x_303));
let x_358:vec4<i32>=(x_303+bitcast<vec4<i32>>(x_353));
let x_433:bool=!(x_431);
let x_671:u32=(x_498+bitcast<u32>(x_414));
let x_227:f32=f32(x_104);
let x_434:bool=!(x_431);
let x_673:f32=f32(x_411);
let x_246:i32=(x_225+bitcast<i32>(x_212));
let x_524:vec4<i32>=(x_388 - bitcast<vec4<i32>>(x_245));
let x_67:i32=(1000 - bitcast<i32>(x_106));
let x_359:i32=-(x_273);
let x_674:bool=!(x_308);
let x_247:f32=f32(bitcast<i32>(16u));
let x_675:i32=(x_639+bitcast<i32>(x_270));
let x_311:f32=f32(x_267);
let x_676:vec4<i32>=(x_494+x_223);
let x_435:f32=f32(x_239);
let x_677:i32=bitcast<i32>(x_602);
let x_275:i32=(x_64 - x_225);
let x_678:i32=-((x_490 - bitcast<i32>(x_269)));
let x_361:vec4<i32>=bitcast<vec4<i32>>(bitcast<vec4<f32>>(x_244));
let x_679:vec4<i32>=(x_405+x_478);
let x_526:f32=bitcast<f32>(x_391);
let x_680:i32=(x_237 - x_615);
let x_312:vec2<u32>=bitcast<vec2<u32>>(-(bitcast<vec2<i32>>(x_210)));
let x_527:f32=f32(bitcast<u32>(x_466));
let x_362:i32=bitcast<i32>((x_104+bitcast<i32>(x_331)));
let x_528:i32=-(x_490);
let x_229:f32=bitcast<f32>(x_67);
let x_363:i32=bitcast<i32>((x_212+bitcast<i32>(4)));
let x_682:i32=(x_351 - x_504);
let x_529:i32=bitcast<i32>(x_415);
let x_683:i32=(bitcast<i32>(x_242)+x_414);
let x_276:f32=f32(x_237);
let x_684:f32=f32(x_607);
let x_364:vec4<f32>=vec4<f32>(x_353);
let x_436:i32=(x_298+x_67);
let x_685:vec4<i32>=-(x_304);
let x_249:bool=!(x_61);
let x_437:f32=f32(0);
let x_686:u32=bitcast<u32>(-(bitcast<i32>(x_241)));
let x_214:f32=f32(x_104);
let x_365:f32=bitcast<f32>(x_342);
let x_687:vec4<i32>=-(x_358);
let x_250:f32=f32(x_239);
let x_531:bool=!(x_308);
let x_688:bool=!(x_61);
let x_438:i32=(x_262 - x_416);
let x_533:vec2<i32>=bitcast<vec2<i32>>(x_23);
let x_230:i32=bitcast<i32>((x_106 - bitcast<i32>(x_225)));
let x_366:i32=(x_275+x_48);
let x_689:i32=(x_356 - x_466);
let x_534:f32=f32(bitcast<u32>(x_356));
let x_690:f32=f32(x_270);
let x_277:bool=!(x_658);
let x_367:f32=bitcast<f32>(x_326);
let x_535:i32=(x_297+x_226);
let x_691:f32=f32(bitcast<u32>(bitcast<i32>((x_430+bitcast<i32>(x_39)))));
x_69=((x_64*x_67)/-(x_330));
let x_692:bool=!(x_433);
let x_536:i32=(bitcast<i32>(x_220)+x_257);
let x_693:i32=(x_664+x_505);
let x_440:bool=!(x_431);
let x_313:i32=-(x_259);
let x_251:i32=(x_226+x_225);
let x_72:i32=bitcast<i32>((x_104+bitcast<i32>(1)));
let x_368:i32=bitcast<i32>((x_106+bitcast<i32>(16u)));
let x_695:i32=bitcast<i32>(x_295);
let x_537:f32=f32(bitcast<u32>(x_504));
let x_278:bool=!(x_433);
let x_538:bool=!(!(x_308));
let x_696:f32=f32(bitcast<u32>(x_645));
let x_441:bool=!(!(x_431));
let x_539:f32=f32(x_575);
let x_314:i32=-(x_275);
let x_231:i32=-(4);
let x_442:i32=-(x_273);
let x_315:i32=(x_72+10);
let x_698:vec4<i32>=(-(x_358)+x_397);
let x_443:f32=f32(bitcast<u32>(x_246));
let x_540:u32=(x_486 - bitcast<u32>(x_491));
let x_369:bool=!(!(!(x_433)));
let x_279:i32=(x_246+16);
let x_370:i32=(x_267 - x_260);
let x_699:vec2<f32>=bitcast<vec2<f32>>(bitcast<vec2<u32>>(-(bitcast<vec2<i32>>(x_210))));
let x_316:bool=!(x_433);
let x_371:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.5,0.0,0.5,1.0));
let x_541:f32=bitcast<f32>(1);
let x_215:i32=(x_39 -(0 - x_34));
let x_542:i32=(x_490 - bitcast<i32>((x_302 - bitcast<u32>(x_273))));
let x_372:f32=f32(bitcast<u32>(x_48));
x_106_phi=x_69;
x_104_phi=x_72;
}
}
let x_232:bool=!(x_61);
let x_444:f32=f32(x_34);
let x_543:i32=-(x_329);
let x_700:vec4<i32>=bitcast<vec4<i32>>((x_353 - bitcast<vec4<i32>>(x_327)));
let x_373:vec4<i32>=(x_345 - x_327);
let x_252:vec4<f32>=bitcast<vec4<f32>>(x_223);
let x_98:i32=bitcast<i32>((x_106 % 16));
let x_544:f32=f32(x_260);
let x_701:i32=(x_576 - x_467);
let x_280:bool=!(x_61);
let x_545:vec4<i32>=(x_465+x_303);
let x_702:vec4<i32>=(x_340+x_299);
let x_374:f32=f32(bitcast<u32>(x_239));
let x_703:f32=f32(x_430);
let x_546:i32=-(x_330);
let x_547:bool=!(x_280);
let x_253:vec4<f32>=vec4<f32>(x_223);
let x_548:f32=f32(bitcast<u32>(x_468));
let x_704:f32=f32(x_424);
let x_549:i32=(100+100);
let x_705:vec4<i32>=bitcast<vec4<i32>>(-(x_515));
let x_375:f32=f32(x_307);
let x_550:f32=bitcast<f32>(x_260);
let x_551:vec4<f32>=vec4<f32>(x_397);
let x_446:f32=bitcast<f32>(x_331);
let x_706:f32=f32(bitcast<u32>((x_401+x_595)));
let x_376:i32=bitcast<i32>((x_270+bitcast<i32>(x_237)));
let x_707:vec4<i32>=bitcast<vec4<i32>>((x_515 - bitcast<vec4<i32>>(x_402)));
let x_318:f32=f32(x_307);
let x_554:i32=-(x_389);
let x_708:f32=bitcast<f32>(x_269);
let x_709:i32=(x_294+bitcast<i32>(x_270));
let x_447:f32=f32(bitcast<u32>(1000));
indexable=array<vec4<f32>,16u>(vec4<f32>(0.0,0.0,0.0,1.0),vec4<f32>(0.5,0.0,0.0,1.0),vec4<f32>(0.0,0.5,0.0,1.0),vec4<f32>(0.5,0.5,0.0,1.0),vec4<f32>(0.0,0.0,0.5,1.0),vec4<f32>(0.5,0.0,0.5,1.0),vec4<f32>(0.0,0.5,0.5,1.0),vec4<f32>(0.5,0.5,0.5,1.0),vec4<f32>(0.0,0.0,0.0,1.0),vec4<f32>(1.0,0.0,0.0,1.0),vec4<f32>(0.0,1.0,0.0,1.0),vec4<f32>(1.0,1.0,0.0,1.0),vec4<f32>(0.0,0.0,1.0,1.0),vec4<f32>(1.0,0.0,1.0,1.0),vec4<f32>(0.0,1.0,1.0,1.0),vec4<f32>(1.0,1.0,1.0,1.0));
let x_448:bool=!(x_280);
let x_711:f32=f32(bitcast<u32>(x_503));
let x_378:i32=(x_336+0);
let x_712:i32=-(x_407);
let x_555:vec4<i32>=(x_327 - x_402);
let x_449:i32=(x_297+10);
let x_282:i32=-(-(x_260));
let x_556:i32=-(x_376);
let x_254:i32=-(x_237);
let x_283:vec4<f32>=bitcast<vec4<f32>>(x_245);
let x_557:bool=!(x_448);
let x_319:u32=bitcast<u32>((x_212+bitcast<i32>(x_263)));
let x_233:bool=!(x_232);
let x_714:bool=!(x_547);
let x_450:i32=(x_260+x_411);
let x_320:vec4<f32>=bitcast<vec4<f32>>(x_651);
let x_379:u32=(x_263 - bitcast<u32>(100));
let x_218:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(0.0,1.0,1.0,1.0));
let x_451:vec4<i32>=bitcast<vec4<i32>>(x_224);
let x_715:i32=-(x_297);
let x_255:f32=f32(bitcast<u32>(16));
let x_716:vec4<i32>=bitcast<vec4<i32>>((x_515+bitcast<vec4<i32>>((x_465+x_394))));
let x_559:f32=bitcast<f32>(x_260);
let x_284:f32=f32(x_263);
let x_717:vec4<f32>=vec4<f32>(x_394);
let x_380:f32=f32(0);
let x_718:vec4<i32>=(x_223+x_479);
let x_452:i32=(x_406+x_376);
let x_321:f32=f32(x_49);
let x_719:i32=(x_469+x_260);
let x_561:i32=(x_48+x_98);
let x_234:i32=-(x_39);
let x_720:f32=f32(x_307);
let x_562:f32=f32(((x_389 - 0)+x_342));
let x_721:bool=!(x_280);
let x_285:i32=(x_257 - 100);
let x_722:f32=f32(x_271);
let x_453:i32=(x_329+x_449);
let x_103:vec4<f32>=indexable[x_98];
let x_723:bool=!(!(x_448));
let x_563:vec4<i32>=bitcast<vec4<i32>>(-(x_353));
let x_724:f32=f32(bitcast<u32>(x_331));
let x_454:i32=(x_396+x_396);
let x_725:i32=(bitcast<i32>((16u+bitcast<u32>(x_212)))-(x_577 - x_471));
let x_381:bool=!(!(x_658));
let x_256:vec4<i32>=bitcast<vec4<i32>>((x_245 - bitcast<vec4<i32>>(x_244)));
let x_726:bool=!(x_232);
let x_727:vec4<i32>=bitcast<vec4<i32>>(x_428);
let x_323:bool=!(x_448);
let x_565:bool=!(x_517);
let x_382:vec4<i32>=(x_303 - x_244);
let x_566:i32=bitcast<i32>(bitcast<f32>(x_260));
let x_286:i32=bitcast<i32>(-(x_270));
let x_567:f32=f32(x_503);
let x_728:vec4<f32>=vec4<f32>(bitcast<vec4<u32>>((x_327 - x_244)));
let x_219:f32=f32(x_104);
let x_729:i32=bitcast<i32>(f32(bitcast<u32>(x_391)));
let x_456:i32=(x_262+x_449);
let x_568:i32=(x_49 - bitcast<i32>(x_462));
let x_324:bool=!(x_280);
let x_730:bool=!(!(!(x_547)));
let x_457:vec4<f32>=vec4<f32>(bitcast<vec4<u32>>((x_303+bitcast<vec4<i32>>(x_245))));
let x_384:i32=(x_260+x_239);
let x_287:bool=!(!(x_280));
let x_325:vec4<i32>=bitcast<vec4<i32>>(vec4<f32>(1.0,1.0,1.0,1.0));
let x_731:f32=f32(-(x_237));
let x_458:bool=!(x_280);
let x_569:i32=-(x_406);
let x_385:vec4<f32>=vec4<f32>(x_245);
let x_732:bool=!(x_232);
x_GLF_color=x_103;
let x_733:i32=bitcast<i32>(f32(x_257));
let x_570:i32=(x_401 - x_260);
let x_734:vec4<i32>=-(x_489);
let x_235:f32=f32((x_577+x_595));
let x_735:bool=!(!(x_232));
let x_571:f32=f32(x_342);
let x_386:i32=(bitcast<i32>((x_104+bitcast<i32>(x_331)))- x_267);
let x_572:f32=f32(bitcast<i32>(x_302));
let x_288:f32=bitcast<f32>(x_267);
let x_573:vec2<i32>=bitcast<vec2<i32>>(x_22);
return;
}

struct main_out{
[[location(0)]]
x_GLF_color_1:vec4<f32>;
};

[[stage(fragment)]]
fn main([[builtin(position)]]gl_FragCoord_param:vec4<f32>)->main_out{
gl_FragCoord=gl_FragCoord_param;
main_1();
return main_out(x_GLF_color);
}
