var<private>gl_FragCoord:vec4<f32>;

var<private>color:vec4<f32>;

fn main_1(){
var matrix_2:mat3x3<f32>;
var column:f32;
var scalar:f32;
var vector_1:vec3<f32>;
var vector_2:vec3<f32>;
var matrix_1:mat3x3<f32>;
var row:f32;
let x_16:f32=gl_FragCoord.x;
row=f32(((i32(x_16)/bitcast<i32>(16u))+bitcast<i32>(1u)));
let x_27:f32=gl_FragCoord.y;
column=f32(((i32(x_27)/bitcast<i32>(16u))+bitcast<i32>(1u)));
scalar=1.0;
let x_37:f32=scalar;
scalar=(1.0+x_37);
let x_39:f32=row;
let x_41:f32=scalar;
scalar=(x_41+1.0);
let x_43:f32=column;
let x_45:f32=scalar;
scalar=(x_45+1.0);
let x_47:f32=row;
let x_49:f32=column;
vector_1=vec3<f32>((x_37*x_39),(x_43*x_41),((x_47*x_45)*x_49));
let x_53:f32=scalar;
scalar=(x_53+1.0);
let x_55:f32=row;
let x_57:f32=scalar;
scalar=(1.0+x_57);
let x_59:f32=column;
let x_61:f32=scalar;
scalar=(1.0+x_61);
let x_63:f32=row;
let x_65:f32=column;
vector_2=vec3<f32>((x_53*x_55),(x_57*x_59),(x_65*(x_61*x_63)));
let x_71:f32=scalar;
scalar=(1.0+x_71);
let x_73:f32=row;
let x_75:f32=scalar;
scalar=(x_75+1.0);
let x_77:f32=column;
let x_79:f32=scalar;
scalar=(1.0+x_79);
let x_81:f32=row;
let x_83:f32=column;
let x_85:f32=scalar;
scalar=(1.0+x_85);
let x_87:f32=row;
let x_89:f32=scalar;
scalar=(x_89+1.0);
let x_91:f32=column;
let x_93:f32=scalar;
scalar=(x_93+1.0);
let x_95:f32=row;
let x_97:f32=column;
let x_99:f32=scalar;
scalar=(x_99+1.0);
let x_101:f32=row;
let x_103:f32=scalar;
scalar=(1.0+x_103);
let x_105:f32=column;
let x_107:f32=scalar;
scalar=(x_107+1.0);
let x_109:f32=row;
let x_111:f32=column;
matrix_1=mat3x3<f32>(vec3<f32>((x_73*x_71),(x_75*x_77),((x_81*x_79)*x_83)),vec3<f32>((x_85*x_87),(x_89*x_91),((x_95*x_93)*x_97)),vec3<f32>((x_99*x_101),(x_103*x_105),(x_111*(x_109*x_107))));
let x_119:f32=scalar;
scalar=(1.0+x_119);
let x_121:f32=row;
let x_123:f32=scalar;
scalar=(1.0+x_123);
let x_125:f32=column;
let x_127:f32=scalar;
scalar=(x_127+1.0);
let x_129:f32=row;
let x_131:f32=column;
let x_133:f32=scalar;
scalar=(x_133+1.0);
let x_135:f32=row;
let x_137:f32=scalar;
scalar=(1.0+x_137);
let x_139:f32=column;
let x_141:f32=scalar;
scalar=(1.0+x_141);
let x_143:f32=row;
let x_145:f32=column;
let x_147:f32=scalar;
scalar=(x_147+1.0);
let x_149:f32=row;
let x_151:f32=scalar;
scalar=(1.0+x_151);
let x_153:f32=column;
let x_155:f32=scalar;
scalar=(1.0+x_155);
let x_157:f32=row;
let x_159:f32=column;
matrix_2=mat3x3<f32>(vec3<f32>((x_119*x_121),(x_123*x_125),(x_131*(x_129*x_127))),vec3<f32>((x_133*x_135),(x_139*x_137),(x_145*(x_141*x_143))),vec3<f32>((x_149*x_147),(x_151*x_153),((x_157*x_155)*x_159)));
let x_167:f32=scalar;
scalar=(x_167+1.0);
let x_169:vec3<f32>=vector_1;
let x_170:vec3<f32>=(x_169*x_167);
let x_171:vec4<f32>=color;
color=vec4<f32>(x_170.x,x_170.y,x_170.z,x_171.w);
let x_173:f32=scalar;
scalar=(x_173+1.0);
let x_175:mat3x3<f32>=matrix_1;
let x_177:vec4<f32>=color;
let x_179:vec3<f32>=(vec3<f32>(x_177.x,x_177.y,x_177.z)*(x_175*x_173));
let x_180:vec4<f32>=color;
color=vec4<f32>(x_179.x,x_179.y,x_179.z,x_180.w);
let x_182:vec3<f32>=vector_1;
let x_183:mat3x3<f32>=matrix_1;
let x_185:vec4<f32>=color;
let x_187:vec3<f32>=(vec3<f32>(x_185.x,x_185.y,x_185.z)+(x_182*x_183));
let x_188:vec4<f32>=color;
color=vec4<f32>(x_187.x,x_187.y,x_187.z,x_188.w);
let x_190:mat3x3<f32>=matrix_1;
let x_191:vec3<f32>=vector_1;
let x_193:vec4<f32>=color;
let x_195:vec3<f32>=(vec3<f32>(x_193.x,x_193.y,x_193.z)+(x_190*x_191));
let x_196:vec4<f32>=color;
color=vec4<f32>(x_195.x,x_195.y,x_195.z,x_196.w);
let x_198:mat3x3<f32>=matrix_1;
let x_199:mat3x3<f32>=matrix_2;
let x_201:vec4<f32>=color;
let x_203:vec3<f32>=(vec3<f32>(x_201.x,x_201.y,x_201.z)*(x_198*x_199));
let x_204:vec4<f32>=color;
color=vec4<f32>(x_203.x,x_203.y,x_203.z,x_204.w);
let x_206:vec3<f32>=vector_1;
let x_207:vec3<f32>=vector_2;
let x_208:mat3x3<f32>=mat3x3<f32>(vec3<f32>((x_207.x*x_206.x),(x_207.x*x_206.y),(x_207.x*x_206.z)),vec3<f32>((x_207.y*x_206.x),(x_207.y*x_206.y),(x_207.y*x_206.z)),vec3<f32>((x_207.z*x_206.x),(x_207.z*x_206.y),(x_207.z*x_206.z)));
let x_209:vec4<f32>=color;
let x_211:vec3<f32>=(vec3<f32>(x_209.x,x_209.y,x_209.z)*x_208);
let x_212:vec4<f32>=color;
color=vec4<f32>(x_211.x,x_211.y,x_211.z,x_212.w);
let x_214:vec3<f32>=vector_1;
let x_215:vec3<f32>=vector_2;
let x_217:vec4<f32>=color;
let x_219:vec3<f32>=(vec3<f32>(x_217.x,x_217.y,x_217.z)*dot(x_215,x_214));
let x_220:vec4<f32>=color;
color=vec4<f32>(x_219.x,x_219.y,x_219.z,x_220.w);
let x_222:vec4<f32>=color;
let x_224:vec3<f32>=sin(vec3<f32>(x_222.x,x_222.y,x_222.z));
color=vec4<f32>(x_224.x,x_224.y,x_224.z,1.0);
return;
}

struct main_out{
[[location(0)]]
color_1:vec4<f32>;
};

[[stage(fragment)]]
fn main([[builtin(position)]]gl_FragCoord_param:vec4<f32>)->main_out{
gl_FragCoord=gl_FragCoord_param;
main_1();
return main_out(color);
}
